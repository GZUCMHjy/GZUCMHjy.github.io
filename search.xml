<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL 学习笔记</title>
      <link href="/2023/02/27/mysql-xue-xi-ji-chu-pian/"/>
      <url>/2023/02/27/mysql-xue-xi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL基础篇"><a href="#MySQL基础篇" class="headerlink" title="MySQL基础篇"></a>MySQL基础篇</h1><h2 id="一、MySQL概述"><a href="#一、MySQL概述" class="headerlink" title="一、MySQL概述"></a>一、MySQL概述</h2><h3 id="1-MySQL三层结构"><a href="#1-MySQL三层结构" class="headerlink" title="1.MySQL三层结构"></a>1.MySQL三层结构</h3><ul><li><p>数据库</p><p>全称是<strong>存储数据的仓库</strong>，数据时候有组织的进行存储；简称DataBase(DB)</p></li><li><p>数据库管理系统</p><p>全称是<strong>操纵和管理数据库的大型软件</strong> ；简称DataBase Management System（DBMS）</p></li><li><p>SQL</p><p>操纵<strong>关系型数据库的编程语言</strong>，定义了一套操作关系型数据库<strong>统一标准</strong> ；简称Structured Query Language（SQL）</p></li></ul><h3 id="2-主流的关系型数据库管理系统"><a href="#2-主流的关系型数据库管理系统" class="headerlink" title="2.主流的关系型数据库管理系统"></a>2.主流的关系型数据库管理系统</h3><ul><li>Oracle</li><li>MySQL</li><li>Microsoft SQL Server</li></ul><h3 id="3-MySQL数据库"><a href="#3-MySQL数据库" class="headerlink" title="3. MySQL数据库"></a>3. MySQL数据库</h3><ul><li><p>关系型数据库</p><ol><li>概念:建立在关系模型基础上，由多张互相连接的<strong>二维表</strong>组成的数据库</li><li>特点<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul></li></ol></li><li><p>数据模型</p></li></ul><p><img src="C:/Users/de%27l%27l/AppData/Roaming/Typora/typora-user-images/image-20230114201641744.png" alt="image-20230114201641744"></p><h2 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h2><h4 id="1-SQL通用语法"><a href="#1-SQL通用语法" class="headerlink" title="1.SQL通用语法"></a>1.SQL通用语法</h4><ul><li><p>SQL语句可以单行或多行书写 以<strong>分号结尾</strong></p></li><li><p>SQL语句可以使用空格/缩进来增强语句的可读性</p></li><li><p>MySQL数据库的SQL语句<strong>不区分大小写，关键字建议使用大写</strong></p></li><li><p>注释 </p><ol><li>单行注释 ：– 注释内容 或#注释内容（MySQL独有）</li><li>多行注释 ：/* */</li></ol></li><li><p>数据类型</p></li></ul><ol><li><p>数值类型</p><ul><li><p>TINYINT</p></li><li><p>SMALLINT</p></li><li><p>MEDIUMINT</p></li><li><p>INT或INTEGER</p></li><li><p>BIGINT</p></li><li><p>FLOAT</p></li><li><p>DOUBLE</p></li><li><p>DECIMAL</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">age TINYINT UNSIGNEDscore double(4,1)/*表示长度最多是4，小数点位数为1*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114210721876.png" alt="image-20230114210721876"></p></li><li><p>字符串类型</p><ul><li><p><strong>CHAR</strong>  定长字符串</p><p>定长意思是 规定字符串长度为多少，即使没占用这么多空间 系统会自动帮你补位</p></li><li><p>**VARCHAR **变长字符串</p><p>变长意思是 根据你给的字符串长度 分配具体的空间大小</p></li><li><p>TINYBLOB</p></li><li><p>TINYTEXT</p></li><li><p>BLOB</p></li><li><p>TEXT</p></li><li><p>MEDIUMBLOB</p></li><li><p>MEDIUMTEXT</p></li><li><p>LONGBLOB</p></li><li><p>LONGTEXT</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHAR(规定的字符串长度)  性能好VARCHAR(规定的字符串长度) 性能差<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114211650076.png" alt="image-20230114211650076"></p></li><li><p>日期类型</p><ul><li><strong>DATA</strong></li><li>TIME</li><li>YEAR</li><li>DATETIME</li><li>TIMETAMP</li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114212555472.png" alt="image-20230114212555472"></p></li></ol><h4 id="2-SQL分类"><a href="#2-SQL分类" class="headerlink" title="2.SQL分类"></a>2.SQL分类</h4><h5 id="2-1DDL-数据定义语句-（create-table，datebase）"><a href="#2-1DDL-数据定义语句-（create-table，datebase）" class="headerlink" title="2.1DDL 数据定义语句 （create table，datebase）"></a>2.1DDL 数据定义语句 （create table，datebase）</h5><h6 id="2-1-1库操作"><a href="#2-1-1库操作" class="headerlink" title="2.1.1库操作"></a>2.1.1库操作</h6><ul><li><p>查询</p><p>1）查询所有数据库(SHOW)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）查询<strong>当前</strong>数据库(SELECT)</p><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SELECT DATABASE();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建(CREATE)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*如果不存在就创建database*/CREATE DATABASE[IF NOT EXISTS]数据库名[DEFAULT CHARSET 字符集][COLLATE 排序规则];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除(DROP)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASES[IF EXISTS]; 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用(USE)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*切换访问的数据库*/USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h6 id="2-1-2表操作"><a href="#2-1-2表操作" class="headerlink" title="2.1.2表操作"></a>2.1.2表操作</h6><ul><li><p>查询</p><p>1）查询当前数据所有表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）查询表结构</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESC 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）查询指定表的建表语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建(CREATE)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名{ 字段1 字段1类型[COMMENT 字段1注释], 字段2 字段2类型[COMMENT 字段2注释], 字段3 字段3类型[COMMENT 字段3注释]}[COMMENT 表注释];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改(ALTER)</p><ol><li>添加字段(ADD)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ADD 字段名 类型(长度)[comment 注释][约束];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改数据类型(MODIFY)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改字段名和字段类型(CHANGE)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度)[COMMENT 注释] [约束];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>删除字段（DROP）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 DROP 字段名;#删除列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>修改表名</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">  ALTER TABLE 表名 RENAME TO 新表名;  * 删除  1. 删除表  ```mySQL  DROP TABLE [IF EXISTS]表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>删除指定表，并重新创建该表(该表的<strong>数据会被删除</strong>，以该名表被重新创建)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="2-2DML-数据操作语句-（insert-，updata，delete）"><a href="#2-2DML-数据操作语句-（insert-，updata，delete）" class="headerlink" title="2.2DML 数据操作语句 （insert ，updata，delete）"></a>2.2DML 数据操作语句 （insert ，updata，delete）</h5><h6 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h6><p>​用来对数据库中的<strong>数据记录</strong>进行**(insert)、(delete)、(update)**操作</p><h6 id="2-2-2数据记录操作"><a href="#2-2-2数据记录操作" class="headerlink" title="2.2.2数据记录操作"></a>2.2.2数据记录操作</h6><ul><li><p>添加数据（INSERT）</p><ol><li>给<strong>指定字段名</strong>添加数据</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名 (字段名1，字段名2，...)VALUES(值1，值2，...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>给<strong>全部字段名</strong>添加数据</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名 VALUES(值1，值2，...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>批量添加数据</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*批量插入数据 用逗号隔开*/INSERT INTO 表名(字段名1，字段名2，...)VALUES(值1，值2，...),(值1，值2，...),(值1，值2，...);INSERT INTO 表名 VALUES (值1，值2，...)，(值1，值2，....)，(值1，值2，....);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><p>​1）插入数据时，指定的字段顺序需要与值的<strong>顺序是一致</strong>的</p><p>​2）字符串和日期类型应该包含的在引号中</p><p>​3）插入的数据大小，应该在字段的规定范围内</p></li><li><p>修改数据（UPDATE）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE 表名 SET 字段名1=值1，字段名2=值2，...[WHERE 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除（DELETE）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM 表名[WHERE 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="2-3DQL-数据查询语句-（select）-x3D-x3D-重难点-x3D-x3D"><a href="#2-3DQL-数据查询语句-（select）-x3D-x3D-重难点-x3D-x3D" class="headerlink" title="2.3DQL 数据查询语句 （select）==重难点=="></a>2.3DQL 数据查询语句 （select）==重难点==</h5><h6 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2..3.1 定义"></a>2..3.1 定义</h6><p>​数据查询语言，用来查询(筛选)数据中表的数据</p><h6 id="2-3-2关键字"><a href="#2-3-2关键字" class="headerlink" title="2.3.2关键字"></a>2.3.2关键字</h6><ul><li>SELECT 字段列表</li><li>FROM 表名列表</li><li>WHERE 条件列表</li><li>GROUP BY 分组字段列表</li><li>HAVING 分组后条件列表</li><li>ORDER BY 排序字段列表</li><li>LIMIT 分页参数</li></ul><h6 id="2-3-3-语法"><a href="#2-3-3-语法" class="headerlink" title="2.3.3 语法"></a>2.3.3 语法</h6><ul><li><p>基本查询</p><ol><li>查询多个字段</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1,字段2，字段3...FROM 表名;SELECT *FROM 表名(全部字段)#返回查询列表中所有数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>设置别名（AS）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1[AS 别名1],字段2[AS 别名2]...FROM表名;#别名要用单引号 AS可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>去除重复纪录(DISTINCT)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT 字段列表 FROM 表名;#将该列的重复的元素去除（去重）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>条件查询</p><ol><li>语法(WHERE)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM WHERE 条件列表;# where相当于java中if语句 后接条件语句 字段列表=*(所有列)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>条件</p><ul><li>比较运算符</li></ul><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或！=</td><td>不等于</td></tr><tr><td>BETWEEN…AND</td><td>在某个范围之内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配(匹配_<strong>单个字符</strong>,%匹配<strong>任意个字符</strong>)</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><ul><li><p>逻辑运算符</p><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND或&amp;&amp;</td><td>并且(多个条件同时成立)</td></tr><tr><td>OR或||</td><td>或者(多个条件任意一个成立)</td></tr><tr><td>NOT或！</td><td>非，不是</td></tr></tbody></table></li></ul></li></ol></li><li><p>聚合函数</p><ol><li><p>介绍</p><p>将一列数据作为一个整体</p></li><li><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></li><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 聚合函数 from 表名;# SELECT COUNT(*)FROM EMP;#SELECT COUNT(ID)FROM EMP;#聚合函数传进去的是字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:null值不参与聚合函数的运算</p></li></ol></li><li><p>分组查询(GROUP BY)</p><ol><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表名[WHERE 条件]GROUP BY 分组字段名[HAVING 分组后过滤条件];SELECT gender,count(*)from emp GROUP BY gender;#查询效果是 根据性别分组 统计男女的数量SELECT gender,AVG(age)FROM emp GROUP BY gender;#查询效果是 根据性别分组 统计男女的平均年龄SELECT address,COUNT(*)FROM emp WHERE age&lt;xxx GROUP BY address;#查询效果是 根据地址分组 统计年龄小于xxx的人数SELECT address,COUNT(*) address_count FROM emp WHERE age&lt;xxx GROUP BY address HAVING address_count&gt;X;#上面一条语句的基础上再次筛选having<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HAING 和WHERE区别</p><ul><li>执行时机不同:where是<strong>分组之前</strong>进行过滤，不满足where条件不进行分组；而having是<strong>分组之后</strong>对结果进行过滤</li><li>判断条件不同:<strong>where不能对聚合函数进行判断</strong> 而having可以</li></ul></li><li><p>注意 </p><ul><li>执行顺序:where-&gt;聚合函数-&gt;having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义(意思是分组字段和查询字段是相同的)</li></ul></li></ol></li><li><p>排序查询(ORDER BY)</p><ol><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#支持多字段排序SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方1,字段2 排序方式2SELECT * FROM emp ORDER BY age desc;#降序SELECT * FROM emp ORDER BY age asc;#升序SELECT * FROM emp ORDER BY age asc,entrydate desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序方式</p><ul><li><p>ASC：升序（默认值）</p></li><li><p>DESC：降序</p><p>注意:如果是多字段查询时，当第一个字段值相同时，才会根据第二个字段进行排序</p></li></ul></li></ol></li><li><p>分页查询(LIMIT)</p><ol><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM LIMIT 起始索引,查询记录数;#两个参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意</p><ul><li>起始索引是<strong>从0开始</strong>，起始索引=（查询页码-1）*每页显示记录数</li><li><strong>分页查询是数据库的方言</strong>，不同的数据库有不同的实现，Mysql是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10</li></ul><p>视频练习</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT age FROM emp BETWEEN 20 AND 23;SELECT *  FROM emp WHERE gender='男'and (20&lt;=age&lt;=40) and like '___';#加个括号显得更有清晰一些SELECT gender,count(*)FROM emp WHERE age&lt;60 GROUP BY gender;SELECT age,name FROM emp where age&lt;=35 ORDER BY age HAVING entryDate desc;SELECT gender FROM emp where gender='男' 20&lt;age&lt;40  ORDER BY age ,HAVING entryDate desc LIMIT 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h6 id="2-3-4-编写-执行顺序"><a href="#2-3-4-编写-执行顺序" class="headerlink" title="2.3.4 编写_执行顺序"></a>2.3.4 编写_执行顺序</h6><p>详情请看这篇博客:<a href="https://blog.csdn.net/dz77dz/article/details/115111559">SQL的执行顺序_不想做靓仔的博客-CSDN博客_sql执行顺序</a></p><ul><li><p>编写顺序</p><p>SELECT-&gt;FROM-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;ORDER BY-&gt;LIMIT</p></li><li><p>执行顺序==<strong>(重点)</strong>==</p><p><strong>FROM</strong>-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;<strong>SELECT</strong>-&gt;ORDER BY-&gt;LIMIT</p><p>聚合函数的执行在GROUP BY之后，HAVING之前</p></li></ul><h5 id="2-4DCL-数据控制语句-（管理数据库）"><a href="#2-4DCL-数据控制语句-（管理数据库）" class="headerlink" title="2.4DCL 数据控制语句 （管理数据库）"></a>2.4DCL 数据控制语句 （管理数据库）</h5><h6 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h6><p>​用来管理数据库用户，控制数据库的访问权限</p><h6 id="2-4-2-管理用户"><a href="#2-4-2-管理用户" class="headerlink" title="2.4.2 管理用户"></a>2.4.2 管理用户</h6><ul><li><p>查询用户</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">USE mysql;SELECT *FROM user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; #主机名是'localhost'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改用户密码</p><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP USER '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意:</p><ul><li>主机名可以使用%使用</li><li>这列SQL开发人员的操作比较少，主要是DBA（数据库管理员）使用</li></ul></li></ul><h6 id="2-4-3权限控制"><a href="#2-4-3权限控制" class="headerlink" title="2.4.3权限控制"></a>2.4.3权限控制</h6><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL,ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><ol><li><p>查询权限</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GRANTS FOR '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授予权限</p><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';GRANT ALL ON xxx.xxx TO '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>撤销权限</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE 权限列表 ON 数据苦命.表名 FROM  '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意:</p><ul><li>多个权限之间，使用逗号隔开</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有</li></ul></li></ol><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><h3 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1.字符串函数"></a>1.字符串函数</h3><ul><li><p>常用函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接,将s1,s2,..sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转成小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转成大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串<strong>头部和尾部的空格</strong></td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串str从start位置起len个长度的字符串</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 函数(参数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2.数值函数"></a>2.数值函数</h3><ul><li><p>常用函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table></li></ul><h3 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3.日期函数"></a>3.日期函数</h3><ul><li><p>常用函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>返回当前指定date的年份</td></tr><tr><td>MONTH(date)</td><td>返回当前指定date的月份</td></tr><tr><td>DAY(date)</td><td>返回当前指定date的日期</td></tr><tr><td>DATE_ADD(date,INTERVAL_EXPR type)</td><td>返回一个日期/时间加上一个<strong>时间间隔</strong>expr后的时间值</td></tr><tr><td>DATEDIFF(date1，date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT date_add(now(),INTERVAL 70 YEAR);#查询员工的入职天数SELECT name,diff(now(),entrydate) as entrydayscount FROM emp Group By entrydayscount SELECT name,DATEDIFF(NOW(),'2000-11-12')FROM emp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-流程函数"><a href="#4-流程函数" class="headerlink" title="4.流程函数"></a>4.流程函数</h3><ul><li><p>常见函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(Value，t，f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(Value1,Value2)</td><td>如果Value1不为空(空=null)，则返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1]THEN[res1]…ELSE[default]END</td><td>如果val1为true，返回res1，否则返回default默认值</td></tr><tr><td>CASE [expr]WHEN[val]THEN[res1]…ELSE[default]END</td><td>如果**expr(表达式)**的值等于val1，返回res1，…否则返回default默认值</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT name,(case workaddress when '北京'then'一线城市'when '上海'then'一线城市'else'二线城市'end)asd '工作地址'SELECT id,name,(case when math&gt;=85 then '优秀' when math&gt;=60 then '及格'else '不及格 'end)as '数学'),(case when English&gt;=85 then '优秀' when English&gt;=60 then '及格'else '不及格 'end)as '英语'),(case when Chinese&gt;=85 then '优秀' when Chinese&gt;=60 then '及格'else '不及格 'end)as '语文')FROM score;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="四、约束-CONSTRAINT"><a href="#四、约束-CONSTRAINT" class="headerlink" title="四、约束(CONSTRAINT)"></a>四、约束(CONSTRAINT)</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><ol><li><p>概念</p><p>约束是<strong>作用表中字段</strong>上的规则，用于限制存储在表中的数据</p></li><li><p>作用</p><p>保证数据库中数据的<strong>正确性、有效性和完整性</strong></p></li><li><p>分类</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是<strong>唯一</strong>，<strong>不重复</strong>的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求<strong>非空且唯一</strong></td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.16）</td><td>保证字段值满足某一个条件(逻辑表达式+比较运算符)</td><td>CHECK</td></tr><tr><td>外键约束</td><td><strong>用来让==两张表==的数据中之间建立连接，保证数据的一致性和完整性</strong></td><td>FOREIGN KEY</td></tr></tbody></table><p>注意:约束是作用在表中字段上的，可以在<strong>创建表/修改表</strong>的时候添加约束</p></li></ol><h3 id="2-案例展示"><a href="#2-案例展示" class="headerlink" title="2.案例展示"></a>2.案例展示</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user(    id int primary key auto_increment comment '主键',    name varchar(10) not null comment '名字',    age int check ( age&gt;0&amp;&amp;age&lt;120 ) comment '年龄',# mysql 版本要在8.0才支持该语句    status char(1) default '1'comment '状态',    gemder char(1) comment'性别')comment '用户表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-外键约束"><a href="#3-外键约束" class="headerlink" title="3.外键约束"></a>3.外键约束</h3><h4 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3. 1语法"></a>3. 1语法</h4><ul><li>添加外键:保证数据的完整性和一致性</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#建表前添加外键CREATE TABLE 表名{字段名 数据类型,...[CONSTRAINT][外键名称]FOREIGN KEY(外键字段名)REFERENCES 主表（主表列名）};#建表后进行添加外键ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名)REFERENCES 主表(主表列名);#表名连接主表ALTER TABLE 表名 ADD CONSTRAINT FK_表名_外键字段名 FOREIGN KEY (外键字段名)REFERENCES 主(父)表(主表列名);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除外键</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除/更新行为(DELETE/UPDATE)</li></ul><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。</td></tr><tr><td>RESTRICT</td><td>同上</td></tr><tr><td>CASCADE</td><td>当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在字表中的记录</td></tr><tr><td>SET NULL</td><td>当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则设置字表中该外键值为null</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，字表将外键列设置成一个默认值(Innodb不支持)</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段)References 主表名(字表字段名) ON UPDATE CASCADE ON DELETE CASCADE;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、多表查询"><a href="#五、多表查询" class="headerlink" title="五、多表查询"></a>五、多表查询</h2><h3 id="1-多表关系"><a href="#1-多表关系" class="headerlink" title="1.多表关系"></a>1.多表关系</h3><p>概述:由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本分为三种</p><p>一对多(多对一)</p><ul><li>案例:部门与员工的关系</li><li>关系:一个部门对应多个员工，一个员工只能对应一个部门</li><li>实现:<strong>在多的一方建立外键，指向一的一方的主键</strong>(员工表为多表，部门表就为一表)</li></ul><p>多对多</p><ul><li>案例:学生和课程的关系</li><li>关系:一个雪上可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现:<strong>建立第三张中间表</strong>，中间表至少包含两个外键，分别<strong>关联两方主键</strong>(primary key)</li></ul><p>一对一</p><ul><li>案例:用户与用户详情的关系</li><li>关系:一对一关系，多用于单表拆分，将一张表的<strong>基础字段</strong>放在一张表中，<strong>其他详情字段放在另一张表中</strong>，以提升操作效率</li><li>实现:在任意的一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</li></ul><h3 id="2-多表查询概述"><a href="#2-多表查询概述" class="headerlink" title="2.多表查询概述"></a>2.多表查询概述</h3><ul><li><p>概述:指从多张表中查询数据</p></li><li><p>笛卡尔积:笛卡尔乘积是指在数学中个，两个集合A集合和B集合的所有组合情况。(<strong>多表查询时，需要消除无效的笛卡尔积（连接条件）</strong>)</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#多表查询SELECT *FROM 父表,外表;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>多表查询分类</p><ul><li><p>连接查询</p><ol><li><p>内连接</p><p>相当于查询A、B<strong>交集</strong>部分数据</p></li><li><p>外连接</p><ul><li>左外连接</li><li>右外连接</li></ul></li><li><p>自连接</p><p>当前表与自身的连接查询，自连接<strong>必须使用表别名</strong></p></li><li><p>联合查询</p></li></ol></li><li><p>子查询</p></li></ul></li></ul><h3 id="3-连接查询"><a href="#3-连接查询" class="headerlink" title="3.连接查询"></a>3.连接查询</h3><h4 id="3-1内连接"><a href="#3-1内连接" class="headerlink" title="3.1内连接"></a>3.1内连接</h4><ul><li>隐式内连接</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表1，表2 WHERE 条件...;#视频例子 emp员工表 dept部门表 SELECT emp.name,dept.name FROM emp,dept WHERE emp.dept_id=dept.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>显式内连接</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表1,[INNER] JOIN 表2 ON 连接条件;#视频例子SELECT e.name,d.name FROM emp e INNER JOIN dept d ON e.dept_id=d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2外连接"><a href="#3-2外连接" class="headerlink" title="3.2外连接"></a>3.2外连接</h4><ul><li>左外连接(LEFT JOIN)</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 #字段列表根据需求可进行优化 因为按照sql语句的执行属性可知select是在后面执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于查询表1(左表)的所有数据和包含表1和表2交集部分的数据</p><ul><li>右外连接(RIGHT JOIN)</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于查询表2(右表)的所有数据和包含表1和表2交集部分的数据</p><h4 id="3-3自连接"><a href="#3-3自连接" class="headerlink" title="3.3自连接"></a>3.3自连接</h4><ul><li>语法</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 把一张表看做成两张表 通过唯一的id做为自连接的条件 managerid=id# 自连接必须给表名取别名！！！SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件...;SELECT a.name,b.name FROM emp a JOIN emp b ON a.managerid=b.id; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="G:\BMI\SharedScreenshot.jpg"></p><h4 id="3-4联合查询"><a href="#3-4联合查询" class="headerlink" title="3.4联合查询"></a>3.4联合查询</h4><ul><li><p>定义</p><p>对于联合查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p></li><li><p>关键词</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 作为单独一句 在两个sql语句查询中间UNION #将查询的结果合并时，进行去重UNION ALL #直接将查询的结果进行合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意</p><ol><li>对于联合查询多表查询的；列数必须保持一致，字段类型也必须保持一致</li><li>union all 会将全部数据直接合并在一起，union 会对合并之后的数据去重</li></ol></li></ul><h3 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4.子查询"></a>4.子查询</h3><h4 id="4-1概述"><a href="#4-1概述" class="headerlink" title="4.1概述"></a>4.1概述</h4><ul><li>概念:SQL语句中嵌套SELECT语句，成为<strong>嵌套语句</strong>，又称子查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM t1 WHERE column1=(SELECT column1 FROM t2);#子查询外部的语句可以是INSERT/UPDATE/DELETE/SELECT的任何一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>查询结果分类</p><ol><li>标量子查询(子表查询结果为单个值)</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ol></li><li><p>根据子查询位置</p><ol><li>WHERE之后</li><li>FROM之后</li><li>SELECT之后</li></ol></li></ul><h4 id="4-2查询结果分类"><a href="#4-2查询结果分类" class="headerlink" title="4.2查询结果分类"></a>4.2查询结果分类</h4><ul><li><p>标量子查询</p><ol><li><p>定义: 子查询返回的结果是单个值(数字，字符串，日期等)，最简单的形式，这种子查询称为标量子查询</p></li><li><p>常用操作符:= 、&lt;&gt;、&gt; 、&gt;=、 &lt; 、&lt;=</p></li><li><p>案例展示</p></li></ol></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># emp员工信息表# dept部门表# 要求查询具体部门对应的员工信息 前提员工表和部门表是已经建立了连接(foreign key)# 分析 首先得知道具体部门的部门ID 进而查询该部门的员工信息# 可以两种sql写法SELECT id FROM dept WHERE name='具体的部门名';SELECT * FROM emp WHERE dept_id ="上条语句的结果";# 所以可以整合成一句 形成嵌套SELECT * FROM emp WHERE dept_id=(SELECT id FROM dept WHERE name='具体的部门名');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>列子查询</p><ol><li>子查询返回的结果是一列(可以是多行 )，这种子查询为列子查询</li><li>常用操作符:IN、NOT IN、ANY、SOME、ALL</li></ol><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td><strong>ANY</strong></td><td>子查询返回列表中，有<strong>任意一个满足</strong>即可</td></tr><tr><td><strong>SOME</strong></td><td>与ANY<strong>等同</strong>，使用SOME的地方都可以使用ANY</td></tr><tr><td><strong>ALL</strong></td><td>子查询返回列表的<strong>所有值都必须满足</strong></td></tr></tbody></table><ol start="3"><li>案例演示</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询比财务部所有人工资都高的员工信息#将获取信息的问题拆分化 在通过嵌套进行优化 形成一句sql语句# 获取财务部的部门idSELECT id FROM dept WHERE name ='财务部';# 获取财务中所有人的工资SELECT salary FROM emp WHERE id=(SELECT id FROM dept WHERE name ='财务部');# 获取比财务部所有员工工资都高的员工信息SELECT * FROM emp WHERE salary&gt;ALL SELECT salary FROM emp WHERE id=(SELECT id FROM dept WHERE name ='财务部');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>行子查询</p><pre><code>  1. 子查询返回的结果是一行(可以是多列)，这种子查询为列子查询  1. 常用操作符:IN、NOT IN、ANY、SOME、ALL(同上)  1. 案例演示</code></pre></li></ul><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL"># 查询张无忌的薪资及直属领导相同的员工信息SELECT salary managerid FROM emp WHERE name="张无忌";SELECT *FROM emp WHERE (salary,managerid)=(SELECT salary managerid FROM emp WHERE name="张无忌");#返回的结果是一行多列 对应的是salary和managerID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>表子查询</p><ol><li>表子查询返回的结果是多行多列，这种子查询为列表查询</li><li>常用操作符:IN</li><li>案例演示</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询入职日期是“2006-01-01”之后的员工信息和部门信息SELECT * FROM emp where entrydate&gt;'2006-01-01';SELECT e.*,d.* FROM (SELECT * FROM emp where entrydate&gt;'2006-01-01') e LEFT JOIN dept d on e.dept_id=d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>事务是一组操作的集合，他是<strong>一个不可分割的工作单位</strong>，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么<strong>同时成功</strong>，要么<strong>同时失败</strong>。</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230124150636784.png" alt="image-20230124150636784"></p><h3 id="2-事务操作"><a href="#2-事务操作" class="headerlink" title="2.事务操作"></a>2.事务操作</h3><h4 id="2-1查看-x2F-设置事务提交方式"><a href="#2-1查看-x2F-设置事务提交方式" class="headerlink" title="2.1查看/设置事务提交方式"></a>2.1查看/设置事务提交方式</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#第一种 设置autocommit值SELECT @@autocommit;# autocommit=0表示手动提交 1表示自动提交 修改值:set autocommit=0/1SET @@autocommit=0;#第二种 开启事务START TRANSACTION 或 BEGIN <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2提交事务"><a href="#2-2提交事务" class="headerlink" title="2.2提交事务"></a>2.2提交事务</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">COMMIT;#出错不运行执行commit指令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3回滚事务"><a href="#2-3回滚事务" class="headerlink" title="2.3回滚事务"></a>2.3回滚事务</h4><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">ROLLBACK;#出错则进行回滚rollback<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table account(    id int auto_increment primary key comment '主键',    name varchar(10) comment '姓名',    money int comment '金额')comment '个人账户';insert into  account(id, name, money) VALUES (null,'张三',2000),(null,'李四',2000);update account set money=2000 where name='李四'or name='张三';set @@autocommit=0;#手动提交select * from account where name='李四' or name='张三';update account set money = money-1000 where name='李四';#报错指令...update account set money=money+1000 where name='张三';commit;#执行结果无报错 则可以执行commit操作(手动提交)#回滚事务rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-事务四大特性"><a href="#3-事务四大特性" class="headerlink" title="3.事务四大特性"></a>3.事务四大特性</h3><h4 id="3-1原子性"><a href="#3-1原子性" class="headerlink" title="3.1原子性"></a>3.1原子性</h4><p>事务是不可分割的<strong>最小操作单元</strong>，要么成功，要么失败</p><h4 id="3-2一致性"><a href="#3-2一致性" class="headerlink" title="3.2一致性"></a>3.2一致性</h4><p>事务完成时，必须是所有的数据都保持一致状态</p><h4 id="3-3隔离性"><a href="#3-3隔离性" class="headerlink" title="3.3隔离性"></a>3.3隔离性</h4><p>数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</p><p>就好比:有多个事务对同一个的数据库进行数据操作，并行操作的事务A不会影响事务B对数据库的操作！</p><h4 id="3-4持久性"><a href="#3-4持久性" class="headerlink" title="3.4持久性"></a>3.4持久性</h4><p>事务一旦提交或回滚，它对数据库中的数据的改变就是<strong>永久的</strong>(将改变的数据存在电脑磁盘)</p><h3 id="4-并发事务问题"><a href="#4-并发事务问题" class="headerlink" title="4.并发事务问题"></a>4.并发事务问题</h3><h4 id="4-1介绍"><a href="#4-1介绍" class="headerlink" title="4.1介绍"></a>4.1介绍</h4><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还<strong>没有提交</strong>的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但<strong>两次读取的数据不同，称之为不可重复读</strong></td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影“</td></tr></tbody></table><p>这些都是由于多个并行的事务引发的问题…</p><h4 id="4-2事务隔离级别"><a href="#4-2事务隔离级别" class="headerlink" title="4.2事务隔离级别"></a>4.2事务隔离级别</h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read**(默认)**</td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>Serializable</strong></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>注意:==性能越来越差，数据安全越来越高==</p><ul><li>语法</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看事务隔离级别SELECT @@transaction_isolation;#设置事务隔离级别SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE};#SESSION(会话级别)指的是当前客户端#GLOBAL(全局级别) 指的是所有的客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven安装</title>
      <link href="/2023/01/14/cai-niao-jiao-ni-ru-he-an-zhuang-maven-huan-shi-bu-hui-wo-ba-dian-nao-chi-ge/"/>
      <url>/2023/01/14/cai-niao-jiao-ni-ru-he-an-zhuang-maven-huan-shi-bu-hui-wo-ba-dian-nao-chi-ge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="菜鸟教你如何安装MAVEN-还是不会，我把电脑吃咯"><a href="#菜鸟教你如何安装MAVEN-还是不会，我把电脑吃咯" class="headerlink" title="菜鸟教你如何安装MAVEN(还是不会，我把电脑吃咯)"></a>菜鸟教你如何安装MAVEN(还是不会，我把电脑吃咯)</h1><h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p>​这篇博客是默认你有jdk，且以<strong>jdk1.8</strong>的版本为例</p><h2 id="一、下载maven-jar包"><a href="#一、下载maven-jar包" class="headerlink" title="一、下载maven_jar包"></a>一、下载maven_jar包</h2><h3 id="1-下载官网"><a href="#1-下载官网" class="headerlink" title="1. 下载官网"></a>1. 下载官网</h3><ul><li><p><a href="https://maven.apache.org/">Maven – Welcome to Apache Maven</a></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114110130225.png" alt="image-20230114110130225"></p></li></ul><p>​点击左栏中的<strong>Download选项</strong></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114110309615.png" alt="image-20230114110309615"></p><p>​点击<strong>Binary zip archive的Link链接</strong> 即可下载maven的安装包</p><h3 id="2-maven包的安装路径"><a href="#2-maven包的安装路径" class="headerlink" title="2. maven包的安装路径"></a>2. maven包的安装路径</h3><p>​选择在一个没有中文，没有空格的文件里 如下图 我是将maven安装包放在G盘的Maven文件里的(这个Maven文件是我新建用来装解压的maven包的)</p><p>​<img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114110856342.png" alt="image-20230114110856342"></p><h3 id="3-新建repo文件-仓库文件"><a href="#3-新建repo文件-仓库文件" class="headerlink" title="3. 新建repo文件(仓库文件)"></a>3. 新建repo文件(仓库文件)</h3><p>​在解压的maven文件中新建一个文件名为repo的文件(<strong>后面要用</strong>）<img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114111125548.png" alt="image-20230114111125548"></p><h2 id="二、配置系统变量和环境变量"><a href="#二、配置系统变量和环境变量" class="headerlink" title="二、配置系统变量和环境变量"></a>二、配置系统变量和环境变量</h2><h3 id="1-点击顺序"><a href="#1-点击顺序" class="headerlink" title="1. 点击顺序"></a>1. 点击顺序</h3><p>​(1)右键单击此电脑属性——&gt;(2)点击高级系统设置——&gt;(3)点击环境变量——&gt;(4)编辑用户变量的Path——&gt;(5)新建系统变量MAVEN_HOME</p><h3 id="2-图片展示"><a href="#2-图片展示" class="headerlink" title="2. 图片展示"></a>2. 图片展示</h3><ul><li><p>右键单击此电脑属性</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114112001791.png" alt="image-20230114112001791"></p></li><li><p>高级系统设置</p><p>(可能没电脑的高级系统设置的位置都不一样)</p><p>可以快捷键win+Q 搜索 高级系统设置</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114112324828.png" alt="image-20230114112324828"></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114112510124.png" alt="image-20230114112510124"></p></li><li><p>点击环境变量</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114112659042.png" alt="image-20230114112659042"></p></li><li><p>编辑用户变量</p><ol><li><p>找到path(首字母可能大写可能小写)</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114112934474.png" alt="image-20230114112934474"></p></li><li><p>编辑path</p><p>2.1 新建</p><p>2.2 写入**%MAVEN_HOME%\bin**</p><p>​<img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114113107526.png" alt="image-20230114113107526"></p></li></ol><p>​2.3 点击确定(好像是废话)</p></li><li><p>新建系统变量</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114113300027.png" alt="image-20230114113300027"></p><pre><code>        1. 变量名设置为MAVEN_HOME</code></pre><ol start="2"><li><p>变量值则为我们将maven包解压的文件路径中</p><p>(我是安装到G盘中的maven文件里的)<strong>切记不要搞错文件路径了</strong></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114113552358.png" alt="image-20230114113552358"></p><pre><code>         3. 点击确定</code></pre></li></ol></li></ul><h3 id="3-验证maven环境配置是否成功"><a href="#3-验证maven环境配置是否成功" class="headerlink" title="3. 验证maven环境配置是否成功"></a>3. 验证maven环境配置是否成功</h3><ul><li><p>打开cmd（win+R）</p><pre class="line-numbers language-none"><code class="language-none">输入mvn -v(有空格 别忘了！)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114114113485.png" alt="image-20230114114113485"></p><p>如上图 则表示安装成功！</p><h2 id="三、配置本地仓库"><a href="#三、配置本地仓库" class="headerlink" title="三、配置本地仓库"></a>三、配置本地仓库</h2><h3 id="1-打开maven的setting-xml文件"><a href="#1-打开maven的setting-xml文件" class="headerlink" title="1. 打开maven的setting.xml文件"></a>1. 打开maven的setting.xml文件</h3><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114114241569.png" alt="image-20230114114241569"></p><h3 id="2-修改本地仓库的路径"><a href="#2-修改本地仓库的路径" class="headerlink" title="2. 修改本地仓库的路径"></a>2. 修改本地仓库的路径</h3><p>该路径也就是你<strong>新建repo文件的路径</strong></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114114609595.png" alt="image-20230114114609595"></p><h3 id="3-配置阿里与镜像"><a href="#3-配置阿里与镜像" class="headerlink" title="3.配置阿里与镜像"></a>3.配置阿里与镜像</h3><p>因为国外下载速度慢 我们采用阿里云镜像 下载速度会快些</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--添加的代码--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114114813312.png" alt="image-20230114114813312"></p><p>这里提供完整的xml文件给大家参考</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--&gt;</span><span class="token comment">&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in ${user.home}/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they're all using the same Maven |                 installation). It's normally provided in |                 ${maven.conf}/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;</span>  <span class="token comment">&lt;!--下面是我修改的maven仓库的文件路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>G:\Maven\apache-maven-3.8.7\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;  --&gt;</span>  <span class="token comment">&lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline&gt;false&lt;/offline&gt;  --&gt;</span>  <span class="token comment">&lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.   |--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy&gt;      &lt;id&gt;optional&lt;/id&gt;      &lt;active&gt;true&lt;/active&gt;      &lt;protocol&gt;http&lt;/protocol&gt;      &lt;username&gt;proxyuser&lt;/username&gt;      &lt;password&gt;proxypass&lt;/password&gt;      &lt;host&gt;proxy.host.net&lt;/host&gt;      &lt;port&gt;80&lt;/port&gt;      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;    &lt;/proxy&gt;    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the 'id' attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server&gt;      &lt;id&gt;deploymentRepo&lt;/id&gt;      &lt;username&gt;repouser&lt;/username&gt;      &lt;password&gt;repopwd&lt;/password&gt;    &lt;/server&gt;    --&gt;</span>    <span class="token comment">&lt;!-- Another sample, using keys to authenticate.    &lt;server&gt;      &lt;id&gt;siteServer&lt;/id&gt;      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;    &lt;/server&gt;    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- mirror     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror&gt;      &lt;id&gt;mirrorId&lt;/id&gt;      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;    &lt;/mirror&gt;     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- profile     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id's for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile&gt;      &lt;id&gt;jdk-1.4&lt;/id&gt;      &lt;activation&gt;        &lt;jdk&gt;1.4&lt;/jdk&gt;      &lt;/activation&gt;      &lt;repositories&gt;        &lt;repository&gt;          &lt;id&gt;jdk14&lt;/id&gt;          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;          &lt;layout&gt;default&lt;/layout&gt;          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;        &lt;/repository&gt;      &lt;/repositories&gt;    &lt;/profile&gt;    --&gt;</span>    <span class="token comment">&lt;!--     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin&gt;     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;     |     |   &lt;configuration&gt;     |     &lt;tomcatLocation&gt;${tomcatPath}&lt;/tomcatLocation&gt;     |   &lt;/configuration&gt;     | &lt;/plugin&gt;     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.     |    &lt;profile&gt;      &lt;id&gt;env-dev&lt;/id&gt;      &lt;activation&gt;        &lt;property&gt;          &lt;name&gt;target-env&lt;/name&gt;          &lt;value&gt;dev&lt;/value&gt;        &lt;/property&gt;      &lt;/activation&gt;      &lt;properties&gt;        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;      &lt;/properties&gt;    &lt;/profile&gt;    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles&gt;    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;  &lt;/activeProfiles&gt;  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>cmd中输入</li></ol><pre class="line-numbers language-none"><code class="language-none">mvn help:system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114115302397.png" alt="image-20230114115302397"></p><p>如上图则表示安装成功！</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20230114115435004.png" alt="image-20230114115435004"></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb学习笔记</title>
      <link href="/2022/11/14/java-bi-ji/"/>
      <url>/2022/11/14/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java笔记"><a href="#java笔记" class="headerlink" title="java笔记"></a>java笔记</h1><h2 id="1-静态成员"><a href="#1-静态成员" class="headerlink" title="1. 静态成员"></a>1. 静态成员</h2><ul><li><p>关键词<strong>static</strong></p></li><li><p>修饰对象  </p><ul><li>静态常量</li><li>静态变量</li><li>静态方法</li><li><em>静态类(对内部类的修饰)</em></li></ul></li><li><p>应用场景: 多个类需要**共享同一个数据 故用关键词static 修饰 使其方法/属性/常量 固定一个内存空间 让每一个类都可以使用</p></li><li><p>调用静态成员的格式 ——类名.静态类成员</p></li><li><p>代码演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//静态常量</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//静态变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//静态方法</span>        <span class="token comment">//do Something</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> method <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticTest</span><span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态常量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticTest</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StaticTest</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>static作用</p><ol><li>给各类提供<strong>共享</strong>的数据和方法</li><li><strong>打破</strong>虽创建同一个类名但他们却<strong>各自独立</strong>的情况 改变静态变量/常量  同类调用的时候也是改变后的变量</li><li>总的来说就是static可以<strong>让类之间不用继承</strong> 也可以一起使用的变量和方法(当然是在类之间没有继承关系但又要共享同一内容的情况下)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">47</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StaticTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">StaticTest</span> staticTest1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StaticTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StaticTest</span> staticTest2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StaticTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虽创建同一个类名taticTest 但是jvm分给他们的是不同的内存空间</span>        staticTest1<span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//static给他们搭起了桥梁 联通了起来 可以使他们共享改变后的i值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staticTest2<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出来是i=60;//而不是i=47;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意:</p><ol><li>静态类成员依旧遵循<strong>权限问题</strong> 如:静态类方法的私有属性 不能被其他类所调用</li><li>==静态方法体中不能调用非静态类方法和变量==</li><li>静态方法体也不能用this关键词(因为不能调用非静态的属性和方法)</li><li>用static关键修饰的变量必须是 类的属性(就是<strong>类的全局变量</strong>而非成员方法中的变量[<strong>成员方法的变量称作为局部变量</strong>])</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//错误例子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> PI<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//do something</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//do something</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span><span class="token comment">//必报错 不能修饰方法的变量</span>        <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译器会报错！！！在静态方法中只能调用静态方法！！！</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//不能用this 不过我不明白为什么要写return this 可能为例子才写的吧</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2. 常量"></a>2. 常量</h1><ul><li><p>关键词 final</p></li><li><p>修饰对象</p><ol><li>变量(局部变量、全局变量)</li><li>对象</li><li>类</li><li>方法</li></ol></li><li><p>作用</p><ol><li><p>对于变量——使其不能被更改 变量变成了常量</p><p>注意:fina关键词定义的变量必须在<strong>声明时对其进行赋值操作</strong>。</p></li></ol><p>tip:表示常量的变量要用全大写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//数学中的常量 不可更改！局部常量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token comment">//全局常量 只能在定义时才能赋值 其余不改变！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>对于对象 ——使其只能指向固定的一个对象</li></ol><p>注意:但还是可以改对象的变量值 要想根本不能改变 就必须 用<strong>static final</strong>修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> java1 <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//final 固定指向了java1</span>        java1 java1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">java2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能指向其他类 会报错 </span>        java1<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">//只固定指向java1 但没限制对该类的变量赋值变值操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> java2<span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对于类——不能被继承 你想想final的作用就是不想被更改 如果能被继承 不就是会遇到子类更改所继承的变量值吗？</li><li>对于方法 ——不能被重写</li></ol></li></ul><h1 id="3-内部类"><a href="#3-内部类" class="headerlink" title="3. 内部类"></a>3. 内部类</h1><ul><li><p>种类</p><ol><li>成员内部类——最常见</li><li>静态内部类——用<strong>关键词static修饰</strong>的外部类里面的类</li><li>匿名内部类——==重点好吗==</li><li>局部内部类 ——定义在<strong>外部类的方法</strong>里面</li></ol><ul><li><p>语法格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span><span class="token comment">//外部类</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span><span class="token comment">//内部类</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>本质——我认为哈 就是套娃(嵌套)类里面还一个类</p><ul><li><p><strong>成员内部类</strong></p><ol><li><p>内部类可以随意使用外部类的任意的属性和方法(即使是私有的private)</p></li><li><p>外部类则不能直接调用内部类的属性 因为内部类的作用域在内部类 作用不到外部类 除非在外部类创建一个内部类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token class-name">InnerClass</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在外部类实例化内部类对象(new)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">InnerClass</span> <span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这是属于外部类的方法</span>        in<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//必须在外部类创建内部类 才能在外部类的方法中调用内部类的方法/属性</span>        <span class="token comment">//就把内部类当做正常的对象 进行调用</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//要想在方法中获取类的内部类</span>        <span class="token comment">//1. 先创建外部类</span>        <span class="token comment">//2. 再外部类名class.内部类名class.内部变量名=外部类变量名.new 内部类名class()</span>        <span class="token class-name">OuterClass</span> out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span> in<span class="token operator">=</span>out<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//靠返回值实例化内部类</span>      <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span> in<span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//靠外部类直接进行创建new</span>        <span class="token comment">//翻译就是 在OuterClass类的InnerClass的变量名 in=在外部类的变量名out里创建内部类InnerClass</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当外部类的内部类为私有时，<strong>只有该外部类</strong>才可以调用使用(<strong>前提</strong>就是要在外部类创建内部类对线)</p><p>问:那如何才能访问到私有的内部类的方法</p><p>答:接口！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Outerface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">implements</span> <span class="token class-name">Outerface</span><span class="token punctuation">{</span>        <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//含参构造器</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//实体化接口方法</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">OuterClass</span> <span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Innerface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntefaceInner</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">OuterClass</span> outClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Outerface</span> outerface<span class="token operator">=</span>out<span class="token punctuation">.</span><span class="token function">doit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过接口访问私有内部类</span>        outerface<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用内部类的方法f();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><strong>局部内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//嵌套在外部类的方法 这种内部类称之为局部内部类</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>外部类的方法外<strong>不能直接调用局部内部类</strong>的方法/属性</p><ul><li><p>原因：局部内部列的<strong>作用域</strong>只能作用在<strong>自个的方法体</strong>中，外部类不能直接调用其内部类的成员属性和方法。</p></li><li><p>解决方法：</p><p>如果外部类想访问内部类的属性和方法，就必须在<strong>外部类的方法中创建内部类对象</strong>，从而调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>            <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">InnerClass</span> innerclass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>innerClass<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>不能添加访问修饰符，但是可以使用final修饰，达到不会被继承(因为内部类终究还是类)</p></li><li><p>内部类可以直接访问外部类的成员属性和方法 </p></li><li><p>外部其它类不能访问外部类的内部类</p></li><li><p>当外部类的成员变量和内部类的成员变量重名时，采用的是<strong>就近原则</strong>，若想用外部类的成员变量时，采用“外部类名.this.变量名”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是打印的是内部类的n1，因为就近原则</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">OuterClss</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这时打印的是外部类的n1成员变量值</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><strong>静态内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">doitInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会报错 静态类中不能调用非静态的方法和变量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>匿名内部类</strong>(定义在<strong>外部类的局部位置</strong>，比如<strong>在方法</strong>中)</p><ul><li><p>特点</p><ol><li>本质：类</li><li>特点：没有名字</li></ol></li><li><p>基本语法</p><p>new 类或接口(参数列表){</p><p>​类体</p><p>}==;  分号==</p><ol><li>面对对象(也包括抽象类对象)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span><span class="token comment">//不能同时有两个或者多个public类，但可以有多个public方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建了匿名内部类 你是看不到他叫什么名字的 但是他确实有一个名字 这名字是jdk赋予的 只能使用一次 但对象可以多次使用</span>        <span class="token comment">// 匿名类内部类(OuterClass$2) extends father</span>        <span class="token comment">//同理面向接口的匿名内部类</span>        <span class="token class-name">Father</span> father<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//重写Father 类方法</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Aniamle</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"TOM"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>male<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//此为匿名内部类的类体中</span>            <span class="token comment">//在匿名内部类中重写继承类Animal的方法test1()</span>            <span class="token comment">//如果匿名内部类中继承了抽象类 就必须重写抽象类的抽象方法！！！</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫喵喵~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//按照以往 需要创建多个类(class)去继承类 然后重写继承的方法</span>        <span class="token comment">// 而使用匿名内部类 就直接创建匿名内部类然后让匿名内部类去继承类即可</span>        <span class="token comment">//这极大提高开发效率</span>        cat<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是匿名内部类的test1方法而不是Animal类中test1方法</span>        <span class="token comment">//还可以这么写 直接连编译类型对象也不写直接调方法</span>        <span class="token comment">/*Aniamle cat=new Animal("TOM",10,male){            //此为匿名内部类的类体中            //在匿名内部类中重写继承Animal的方法test1()            public void test1(){                System.out.println("小猫喵喵~");            }        }.test1();*/</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//比如我可以创建一个类Animal</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个ANIMAL类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> java1<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">OuterClass</span> outerclass<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outerclass<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知识点：</p><ul><li>运行类型：OuterClass$2（其实就是匿名内部类类型)</li><li>编译类型: Father</li><li>此次面向对象的匿名内部类<strong>不是创建</strong> 而是<strong>继承</strong>例子中Father类</li><li>过程是 创建了匿名内部类，然后编译类型是Father 运行类型是father继承了匿名内部类 可以在匿名内部类进行重写方法</li></ul><ol start="2"><li>面对接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//传统方法 1.创建对象 2.调用方法</span>        <span class="token comment">/*IA tiger=new Tiger();        tiger.cry();*/</span>        <span class="token comment">//匿名内部类</span>        <span class="token comment">//接口本不能创建，但这是使用匿名内部类的语法</span>        <span class="token comment">//IA tiger=new IA();这才叫创建嘛 但是！接口不能创建！这是错的话 别模仿这样写！！</span>        <span class="token comment">//tiger 的运行类型是匿名内部类(执行了cry()) 编译类型是IA(接口)</span>        <span class="token class-name">IA</span> tiger<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//@override(implements接口就必须)重写实现接口方法！</span>            <span class="token comment">//只创建一次</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//这里是有分号的！！！</span>        <span class="token comment">//运行了匿名内部类定义的方法cry</span>        tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span><span class="token comment">//接口IA</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*class Tiger implements IA{    //实现接口IA的方法cry()    public void cry(){        System.out.println("老虎叫唤...");    }}*/</span><span class="token keyword">public</span> mainClass<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">OuterClass</span> outerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outerClass<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li><p>使用案例(匿名类作为参数传参)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CellPhone</span> cellPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellPhone<span class="token punctuation">.</span><span class="token function">alarmClock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//省去了implements，减少了代码的冗长</span>            <span class="token comment">//实现接口中的方法ring()</span>            <span class="token comment">//匿名内部类作为方法中参数</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒猪起床了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show show <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//面向接口</span><span class="token keyword">interface</span> <span class="token class-name">Bell</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CellPhone</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">alarmClock</span><span class="token punctuation">(</span><span class="token class-name">Bell</span> cell<span class="token punctuation">)</span><span class="token punctuation">{</span>        cell<span class="token punctuation">.</span><span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态绑定 运行类型是匿名内部类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//面向抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mobile</span><span class="token punctuation">{</span>     <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> show<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Mobile</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showMobile!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>知识点</p><ul><li><p>编译类型——IA(接口类型)</p></li><li><p>运行类型——匿名内部类(OuterClass$1)——是jdk自己给的</p></li><li><p>实现过程:jdk底层在创建匿名内部类OuterClass$1，立马创建了OuterClass$1实例，并且返回给tiger</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//底层jdk自己给匿名内部类取得名字——OuterClass$1</span><span class="token keyword">class</span> <span class="token class-name">OuterClass</span>$<span class="token number">1</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫唤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用场景:</p><p>不想创建一个只用一次的对象，这样会使得代码过于冗余 而且很浪费空间</p></li></ul></li><li><p>细节</p><ol><li><p>当<strong>外部类的成员变量和内部类的成员变量重名</strong>时，在内部类使用重名的变量时:采用<strong>就近原则</strong>——就是选择内部类的值</p></li><li><p>那需要外部类的成员属性呢？<strong>用this</strong></p></li><li><p>方法也是基于上两条的规则描述</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时打印的是内部类的成员变量age=100</span>            <span class="token comment">//要想打印外部类的成员变量age 需要 his！</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token operator">+</span><span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//还记得吗 this表示的是当前对象</span>            <span class="token comment">//所以OuterClass.this.age 表示当前在OuterClass类中age的属性</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li></ul><h1 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4.正则表达式"></a>4.正则表达式</h1><h2 id="1-标准字符集"><a href="#1-标准字符集" class="headerlink" title="1. 标准字符集"></a>1. 标准字符集</h2><ul><li>\d   任意一个数字，0~9中的任意一个</li><li>\w   任意一个<strong>字母</strong>或<strong>数字</strong>或<strong>下划线</strong>，也就是A-Z,a~z,0-9,_中==任意一个==</li><li>\s     包括空格、制表符、换行符等空白字符的其中任意一个</li></ul><h2 id="2-自定义字符集合"><a href="#2-自定义字符集合" class="headerlink" title="2. 自定义字符集合"></a>2. 自定义字符集合</h2><ul><li><p>[   ]方括号匹配方式，能够匹配方括号中任意一个字符</p><ul><li>[ ^abc   ]表示匹配中括号abc字符以外的任意一个字符</li><li>[ k  -f   ]表示匹配k到f的任意一个字符</li></ul></li><li><p>{   }花括号</p><ul><li>{n}表达式重复n次</li><li>{m,n}表达式至少重复m次，最多重复n次</li><li>{m，}表达式至少重复m次</li></ul></li></ul><h1 id="5-IO流"><a href="#5-IO流" class="headerlink" title="5. IO流"></a>5. IO流</h1><p>5.1 什么是文件:保存数据的地方</p><ul><li><p>创建文件方式</p><p>   推荐第二种和第三种</p><ul><li>new File(File parent,String childFile)</li><li>new File(String pathFile)</li><li>new File(String parentFile,String childFile)</li></ul></li><li><p>文件的常规操作</p><ol><li>获取文件信息</li><li>创建目录及多级目录(目录也是一种文件)</li></ol></li></ul><p>5.2 IO流和流的分类</p><p>介绍:</p><ul><li>I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理数据传输，读写文件，网络通讯；在java程序中，对于数据的输入和输出操作都是以”流”的形式进行的。</li><li>Input(输入):==读取外部数据==(从外部的存储设备中的数据传入到java程序内存中)</li><li>Output(输出):将程序中的内存数据==传入==到指定的外部存储设备 如:电脑的磁盘，也可以是外部的存储设备，如:U盘，光盘等。</li></ul><p>流的分类</p><ul><li>按操作数据单位:**字节流(8bit)<strong>二进制文件(比如:图片，视频)，</strong>字符类(按字符)**文本文件</li><li>按数据流向:输入流，输出流 </li><li>流的角色:结点流，处理流</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB 学习笔记</title>
      <link href="/2022/11/10/matlab-xue-xi/"/>
      <url>/2022/11/10/matlab-xue-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MATLAB学习"><a href="#MATLAB学习" class="headerlink" title="MATLAB学习"></a>MATLAB学习</h1><h1 id="第一章——基础知识"><a href="#第一章——基础知识" class="headerlink" title="第一章——基础知识"></a>第一章——基础知识</h1><h2 id="1-数值数据类型"><a href="#1-数值数据类型" class="headerlink" title="1. 数值数据类型"></a>1. 数值数据类型</h2><ul><li><p>整型</p><ul><li>无符号</li><li>有符号</li></ul></li><li><p>浮点型</p><ul><li>单精度</li><li>双精度(默认数据为双精度)</li></ul></li><li><p>复数型</p><ul><li><p>虚数(默认都是双精度)</p></li><li><p>实数real)</p></li></ul></li></ul><h2 id="2-数值数据的输出格式"><a href="#2-数值数据的输出格式" class="headerlink" title="2. 数值数据的输出格式"></a>2. 数值数据的输出格式</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">format命令的格式format 格式符format longformat （short）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常用函数的应用"><a href="#3-常用函数的应用" class="headerlink" title="3. 常用函数的应用"></a>3. 常用函数的应用</h2><ul><li><p>三角函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">%1.以弧度为单位的函数</span><span class="token comment">%2. 以角度为单位的函数(额外添加d以示区别)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>abs函数</p><p>用于取绝对值</p></li><li><p>取整函数</p><ol><li>fix 取靠近零的数</li><li>floor</li><li>cell</li><li>round</li></ol></li></ul><h2 id="4-变量和语句"><a href="#4-变量和语句" class="headerlink" title="4. 变量和语句"></a>4. 变量和语句</h2><h3 id="4-1-自定义变量"><a href="#4-1-自定义变量" class="headerlink" title="4.1  自定义变量"></a>4.1  自定义变量</h3><ul><li>区分大小写</li><li>数字和下划线不能充当变量名的开头</li></ul><h3 id="4-2-预定变量"><a href="#4-2-预定变量" class="headerlink" title="4.2 预定变量"></a>4.2 预定变量</h3><p>避免命名冲突</p><ul><li>ans</li><li>i和j默认代表是虚数单位</li><li>pi表示圆周率</li><li>NaN表示非数</li></ul><h3 id="4-3-赋值语句"><a href="#4-3-赋值语句" class="headerlink" title="4.3 赋值语句"></a>4.3 赋值语句</h3><ul><li>格式<ol><li>变量名=表达式</li><li>表示式(直接赋值给默认的预定变量)</li></ol></li></ul><h3 id="4-4-变量管理"><a href="#4-4-变量管理" class="headerlink" title="4.4 变量管理"></a>4.4 变量管理</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%save命令: 创建内存变量文件</span><span class="token comment">%load命令:装入内存变量文件</span><span class="token comment">% 使得变量变成类似的全局变量 直接拿来引用</span>save mydata a x <span class="token comment">%mydata是文件名</span>load mydata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-矩阵"><a href="#5-矩阵" class="headerlink" title="5. 矩阵"></a>5. 矩阵</h2><h3 id="5-1-矩阵的建立"><a href="#5-1-矩阵的建立" class="headerlink" title="5.1 矩阵的建立"></a>5.1 矩阵的建立</h3><ul><li><p>直接输入法</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token comment">% 三行三列</span><span class="token comment">% 逗号表示空格</span><span class="token comment">% 分号表示换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>分块矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>C<span class="token operator">=</span><span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>B<span class="token punctuation">,</span>A<span class="token punctuation">]</span><span class="token comment">%还可以实部矩阵和虚部矩阵构成复数矩阵</span>B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>C<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>A<span class="token operator">=</span>B<span class="token operator">+</span><span class="token number">i</span><span class="token operator">*</span>C<span class="token comment">%前提是B和C是同型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-2-行向量"><a href="#5-2-行向量" class="headerlink" title="5.2 行向量"></a>5.2 行向量</h3><ul><li><p>冒号表达式</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 格式 矩阵=[head:step:end]</span><span class="token comment">% step 默认值是1</span>A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">]</span>A<span class="token operator">=</span>  <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>linspace函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">linspace</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">% a 是第一个元素</span><span class="token comment">% b 是最后一个元素</span><span class="token comment">% n 是元素个数（默认n=100）</span>x<span class="token operator">=</span><span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-3-种类"><a href="#5-3-种类" class="headerlink" title="5.3 种类"></a>5.3 种类</h3><ul><li><p>结构矩阵</p><p>类似于java里对象中的元素 用“.”运算</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'liu'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">34178</span><span class="token punctuation">]</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'liu'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">34178</span><span class="token punctuation">]</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'liu'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">34178</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>单元矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">b<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'liu'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">%花括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="5-4-引用方式"><a href="#5-4-引用方式" class="headerlink" title="5.4 引用方式"></a>5.4 引用方式</h3><ul><li><p>通过下标来引用矩阵元素</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment">% 表示矩阵A的四行五列的元素是10</span><span class="token comment">%若给出的行数和列数是原先没有定义的 MATLAB会自动将其扩充 扩充的元素置为零！</span>A<span class="token operator">=</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过序号来引用</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>A<span class="token operator">=</span>  <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>  <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token number">2</span><span class="token comment">%是从一列一列开始算 A(3)指的是第一列 1,4 第二列 2 你看这就是第三个数字 所以A(3)=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>冒号表达式获得子矩阵</p><p>A(i,:)                      第i行的全部元素</p><p>A(:,j)                      第j列的全部元素</p><p>A(i:i+m,k:k+m)       第i-i+m行内且在第k-k+m列中的所有元素</p><p>A(i:i+m,:)                第i-i+m行内所有元素</p><p>A(end,:)                  最后一行元素</p><p>A([1,4],3:end)         表示引用第一行和第四行的第三列到最后一列的元素</p><p>A(: )                         将矩阵变为列矩阵——向量</p></li><li><p>删除矩阵</p><p>利用空矩阵</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">A=[] %中括号里面为空<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如:要删除第二列到第四列的元素</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">A=[1,2,3;4,5,6;7,8,9]A=(:,[2,4])=[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>改变形状（reshape)</p><p>不改变原有的数量和存储顺序</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token function">reshape</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>x<span class="token operator">=</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>   <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span>   <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-运算（针对矩阵）——线代知识"><a href="#6-运算（针对矩阵）——线代知识" class="headerlink" title="6. 运算（针对矩阵）——线代知识"></a>6. 运算（针对矩阵）——线代知识</h2><ul><li><p>算数运算</p><ol><li><p>基本算数运算</p><p>1.1 加、乘</p><p>1.2 右除/</p><p>1.3 左除\</p><p>1.4^ 乘方</p><p>1.5 **. **  点运算(特色)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%点乘运算对应元素进行相乘 ！！！</span><span class="token comment">%不同于矩阵之间的乘法运算</span>x<span class="token operator">=</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.3</span><span class="token operator">:</span><span class="token number">1</span>y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">%只能通过点乘运算才能进行 而运用矩阵乘法会因为矩阵不相容——线代知识</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>关系运算</p><ol><li><p>小于，大于，等于==，小于等于，大于等于</p></li><li><p>不等于~=</p></li></ol></li><li><p>逻辑运算</p><ol><li><p>&amp;与</p></li><li><p>|或</p></li><li><p>~非</p></li></ol><p>优先级:单目运算符&gt;双目运算符</p><p>算术运算符&gt;关系运算符&gt;逻辑运算符</p></li></ul><h2 id="7-字符型数据"><a href="#7-字符型数据" class="headerlink" title="7.字符型数据"></a>7.字符型数据</h2><h3 id="1-字符串格式"><a href="#1-字符串格式" class="headerlink" title="1. 字符串格式"></a>1. 字符串格式</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 用单引号表示‘’</span>A<span class="token operator">=</span><span class="token string">'HJY'</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">%不同于数组下标是从零开始的</span>ans<span class="token operator">=</span>   HJY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字符串矩阵"><a href="#2-字符串矩阵" class="headerlink" title="2.字符串矩阵"></a>2.字符串矩阵</h3><p>tip:要保持列数相同</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token string">'ABc123D4E56fG9'</span>K<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>A<span class="token operator">&gt;</span><span class="token string">'a'</span><span class="token operator">&amp;</span>A<span class="token operator">&lt;</span><span class="token string">'z'</span><span class="token punctuation">)</span>K<span class="token operator">=</span>  <span class="token comment">%返回的是符合条件的序号在字符串中</span>  <span class="token number">3</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">13</span><span class="token function">A</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token function">length</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串操作"><a href="#3-字符串操作" class="headerlink" title="3.字符串操作"></a>3.字符串操作</h3><ul><li><p>eval函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t<span class="token operator">=</span><span class="token keyword">pi</span>m<span class="token operator">=</span><span class="token string">'[t,sin(t),cos(t)]'</span><span class="token comment">%行向量</span>y<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">3.1416</span> <span class="token number">0.0000</span> <span class="token number">1.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串与数值转换</p><ul><li><p>abs和double函数</p><p>将获取的字符串矩阵所对应的ASCII码值</p></li><li><p>char函数将ASCII码矩阵转换为字符串矩阵</p></li></ul></li><li><p>字符串比较</p><ol><li>关系运算符</li></ol><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token string">'www0'</span><span class="token operator">&gt;=</span><span class="token string">'WWW0'</span><span class="token comment">%对应字符进行ASCII码值进行大小比较 运算值只能是1/0</span>ans<span class="token operator">=</span>   <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>函数——boolean函数<ul><li>strcmp(s1,s2) 比较是否相等</li><li>strncmp (s1,s2,n) 比较前n个字符是否相同</li><li>strcmpi(s1,s2) 忽略大小写的情况下，比较俩字符串是否相等</li><li>strncmpi(s1,s2,n)忽略大小写的情况下，比较俩字符串前n个字符是否相等</li></ul></li></ol></li><li><p>字符串查找和替换</p><p>findstr(s1,s2) 短字符串在长字符串出现的开始位置</p><p>strrep(s1,s2,s3) 将字符串s1所有的子字符串s2替换成字符串s3</p></li></ul><h1 id="第二章——矩阵处理"><a href="#第二章——矩阵处理" class="headerlink" title="第二章——矩阵处理"></a>第二章——矩阵处理</h1><h2 id="1-特殊矩阵"><a href="#1-特殊矩阵" class="headerlink" title="1.特殊矩阵"></a>1.特殊矩阵</h2><h3 id="1-1-通用型矩阵"><a href="#1-1-通用型矩阵" class="headerlink" title="1.1 通用型矩阵"></a>1.1 通用型矩阵</h3><ul><li><p>zeros函数：产生零矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">zeros</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment">%产生m*m零矩阵</span><span class="token function">zeros</span><span class="token punctuation">(</span>m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token comment">% 产生m*n零矩阵</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">% 产生与矩阵A同样大小的零矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>ones函数：产生全1矩阵 (幺矩阵)</p></li><li><p>eye函数:产生对角线为1的矩阵 当矩阵是方阵是，得到一个单位矩阵</p></li><li><p>rand函数:产生一个（0,1）区间均匀分布的随机矩阵</p></li><li><p>randn函数:产生均值为0，方差为1的标准正态分布随机数x</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">A=fix(10+(99-10+1)*rand(5))B=0.6+sqrt(0.1)*randn(5) %均值0.6 方差0.1的五阶正态分布随机矩阵C=eye(5)%五阶单位矩阵(A+B)*C=C*A+B*Cans=1 1 1 1 11 1 1 1 11 1 1 1 11 1 1 1 11 1 1 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-专门学科的特殊矩阵"><a href="#1-2-专门学科的特殊矩阵" class="headerlink" title="1.2 专门学科的特殊矩阵"></a>1.2 专门学科的特殊矩阵</h3><ul><li><p>魔方矩阵</p><p>n阶魔方阵由1,2,3，……n^2^共n^2^个整数组成 且每行每列以及主副对角线上各n个元素之和相等</p><p>n阶魔方矩阵每行每列的元素之和为:(1+2+3+4……+n^2^)/n=(n+n^3^)/2</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">M<span class="token operator">=</span><span class="token function">magic</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>M<span class="token operator">=</span>   <span class="token number">8</span> <span class="token number">1</span> <span class="token number">6</span>   <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span>   <span class="token number">4</span> <span class="token number">9</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>范德蒙矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">vander</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">16</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">81</span> <span class="token number">27</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">256</span> <span class="token number">64</span> <span class="token number">16</span> <span class="token number">4</span> <span class="token number">1</span><span class="token number">625</span> <span class="token number">125</span> <span class="token number">25</span> <span class="token number">5</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>希尔伯特矩阵</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">H= 1 1/2 …… 1/n   1/2 1/3 …… 1/(n+1)   ……   1/n 1/n+1 ……   1/(2n-1)   H=hilb(4)   H=   1 1/2 1/3 1/4   1/2 1/3 1/4 1/5   1/3 1/4 1/5 1/6   1/4 1/5 1/6 1/7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>伴随矩阵</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">% 生成多项式 x^3-2x^2-5x+6p=[1,-2,-5,6]A=compan(p)A=2 5 -61 0 00 1 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>帕斯卡矩阵</p><p>第一行和第一列都为1 其余位置的元素是该元素的左边元素与上面元素相加。</p><p>p(i,j)=p(i-1,j)+p(i,j-1)</p></li></ul><h2 id="2-矩阵变换"><a href="#2-矩阵变换" class="headerlink" title="2. 矩阵变换"></a>2. 矩阵变换</h2><ul><li><p>求对角阵——除主对角线之外的元素结皆为零的矩阵</p><ol><li><p>提取矩阵的对角线元素</p><p>1.1 diag(A)：<strong>提取矩阵A主对角线元素</strong>，产生一个列向量</p><p>1.2 diag(A,k)：<strong>提取矩阵A第K条对角线元素</strong> ，产生一个列向量</p><p>tip:以主对角线为零条，往右上叠加，左下递减</p></li><li><p>产生对角矩阵</p><p>2.1 diag(V)参数是一个列向量 <strong>产生对角矩阵</strong></p><p>2.2 diag(V,k)以向量V 为第K条对角线元素，<strong>产生对角矩阵</strong></p></li></ol></li><li><p>求三角阵</p><ol><li><p>上三角</p><p>1.1triu(A) 提取矩阵A的主对角线及以上的元素</p><p>1.2 triu(A,K) 提取矩阵A的第k条对角线及以上的元素</p></li><li><p>下三角</p><p>2.1low(A) 同理</p><p>2.2 low(A,K)同理</p></li></ol></li><li><p>求矩阵转置</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%%.'和'都是转置</span><span class="token comment">%但对于复数矩阵 .' 要多做一步:每个数的复共轭</span><span class="token comment">%对于实数 都一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>求矩阵旋转</p><ol><li>rot90(A,K) 将矩阵A 逆时针方向旋转90°的k倍，当k为1时可省略</li><li>fliplr(A)  左列和右列互相调换 以此类推</li><li>flipud(A) 最上行和最小列互相调换 以此类推</li></ol></li><li><p>求逆矩阵</p><p>inv(A)</p></li></ul><h2 id="3-矩阵求值"><a href="#3-矩阵求值" class="headerlink" title="3. 矩阵求值"></a>3. 矩阵求值</h2><h3 id="3-1-行列式值"><a href="#3-1-行列式值" class="headerlink" title="3.1 行列式值"></a>3.1 行列式值</h3><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">det(A)%行列式函数det<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-秩"><a href="#3-2-秩" class="headerlink" title="3.2 秩"></a>3.2 秩</h3><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">rank(A)%秩的函数rank<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-迹"><a href="#3-3-迹" class="headerlink" title="3.3 迹"></a>3.3 迹</h3><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">trace(A)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-范数"><a href="#3-4-范数" class="headerlink" title="3.4 范数"></a>3.4 范数</h3><ul><li>向量1——范数</li><li>向量2——范数</li><li>向量3——范数</li></ul><p>求向量范数的函数</p><ul><li>norm(V) 或norm(V,2) 计算向量V的2——范数</li><li>norm(V,1)：计算向量V的1——范数</li><li>norm(V,inf)：计算向量V 的无穷——范数</li></ul><h3 id="3-5-条件数"><a href="#3-5-条件数" class="headerlink" title="3.5 条件数"></a>3.5 条件数</h3><p><strong>矩阵的条件数=矩阵的范数*矩阵的逆的范数的乘积</strong></p><p>条件数越接近于1，矩阵的性能越好，反之，矩阵性能越查</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%跟求范数格式相同 只是函数不同</span><span class="token function">cond</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">cond</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token function">cond</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">cond</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token keyword">inf</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-矩阵的特征值和特征向量（未掌握）"><a href="#4-矩阵的特征值和特征向量（未掌握）" class="headerlink" title="4. 矩阵的特征值和特征向量（未掌握）"></a>4. 矩阵的特征值和特征向量（未掌握）</h2><h3 id="4-1-定义-数学回顾"><a href="#4-1-定义-数学回顾" class="headerlink" title="4.1 定义(数学回顾)"></a>4.1 定义(数学回顾)</h3><h3 id="4-2-调用格式"><a href="#4-2-调用格式" class="headerlink" title="4.2 调用格式"></a>4.2 调用格式</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">E<span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token comment">%求矩阵A的全部特征值，构成向量E</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>D<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%求矩阵A的全部特征值，构成对角矩阵，并产生矩阵X X各列是相应的特征向量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-稀疏矩阵"><a href="#5-稀疏矩阵" class="headerlink" title="5. 稀疏矩阵"></a>5. 稀疏矩阵</h2><p>目的:对于少量的非零元素的矩阵 采用稀疏矩阵可以节省存储空间和提高存储运算速度</p><h3 id="5-1-完全存储方式"><a href="#5-1-完全存储方式" class="headerlink" title="5.1  完全存储方式"></a>5.1  完全存储方式</h3><p>全部元素都是<strong>按列存放</strong></p><h3 id="5-2-稀疏存储方式"><a href="#5-2-稀疏存储方式" class="headerlink" title="5.2 稀疏存储方式"></a>5.2 稀疏存储方式</h3><p>稀疏存储方式只存储非零元素的值及其位置，即行号和列号</p><h3 id="5-3-转换"><a href="#5-3-转换" class="headerlink" title="5.3 转换"></a>5.3 转换</h3><p>完全存储矩阵 转换 稀疏存储矩阵</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">sparse(A)%sparse 行数sparse(m,n)sparse(u,v,S)%u,v分别是S的行下标和列下标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接建立稀疏存储矩阵</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">B=spconvert(A)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-4-种类"><a href="#5-4-种类" class="headerlink" title="5.4  种类"></a>5.4  种类</h3><ul><li><p>无规则结构</p></li><li><p>有规则结构</p><p>​带状稀疏矩阵 ——是指所有非零元素集中在对角线上的矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>B<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">spdiags</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%从带状稀疏矩阵A中提取全部非零对角线元素赋给矩阵B 及其这些非零对角线元素付给矩阵B 及其这些非零对角线的位置向量d</span>A<span class="token operator">=</span><span class="token function">spdiags</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>d<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">%产生带状稀疏矩阵的稀疏存储矩阵A,其中m，n为原带状稀疏矩阵的行数和列数，矩阵B的第i列即为原带状稀疏矩阵的第i条非零对角线，向量d为原带状稀疏矩阵所有非零对角线的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="第三章——程序流程控制"><a href="#第三章——程序流程控制" class="headerlink" title="第三章——程序流程控制"></a>第三章——程序流程控制</h1><h2 id="0-文件创建"><a href="#0-文件创建" class="headerlink" title="0.文件创建"></a>0.文件创建</h2><ul><li><p>主页菜单——新建脚本(其实就是文本文件)</p></li><li><p>命令行语句</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">edit test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%建立脚本文件 f1.m(后缀名是m 所以又称m文件)</span>A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>C<span class="token operator">=</span>A<span class="token operator">*</span>B<span class="token comment">%命令行窗口运行脚本文件</span>f1C<span class="token operator">=</span><span class="token number">22</span> <span class="token number">28</span><span class="token number">49</span> <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">%函数文件f2.mfunction C=f2(A,B)C=A*B%命令行窗口调用函数文件A=[1,2,3;4,5,6]B=[1,2;3,4;5,6]C=22 2849 64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h2><ul><li><p>数据输入 </p><p>**input(提示信息，选项) **提示信息是字符串型</p></li><li><p>数据输出</p><p><strong>disp()</strong></p></li><li><p>程序暂停</p><p>pause(延迟秒数)</p><p>强制退出Ctrl+C</p></li></ul><h2 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h2><h3 id="2-1-if-else-语句"><a href="#2-1-if-else-语句" class="headerlink" title="2.1 if-else 语句"></a>2.1 if-else 语句</h3><ul><li><p>条件结果是标量时，非零为true ，零为false(建议标量作为条件)</p></li><li><p>条件结过是矩阵时，矩阵非空矩阵，且元素不为零，则成立；否则不成立</p><pre class="line-numbers language-none"><code class="language-none">x=input("请输入x的值:")if rem(x,2)==1y=sqrt(x);elsey=x^(1/3);end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-2-switch语句"><a href="#2-2-switch语句" class="headerlink" title="2.2 switch语句"></a>2.2 switch语句</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'输入x=?'</span><span class="token punctuation">)</span><span class="token comment">%跟C语言类似的switch语句</span><span class="token keyword">switch</span> <span class="token function">fix</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>    <span class="token keyword">otherwise</span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">c<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个单词:'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token function">findstr</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'AEIOUaeiou'</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">,</span><span class="token string">'以元音字母开头'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">,</span><span class="token string">'以辅音字母开头'</span><span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3. 循环结构"></a>3. 循环结构</h2><ul><li>for</li><li>while</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">for</span> k<span class="token operator">=</span> 表达式<span class="token number">1</span><span class="token operator">:</span>表示<span class="token number">2</span><span class="token operator">:</span>表达式<span class="token number">3</span> 初值 步长 终值循环语句<span class="token keyword">end</span><span class="token keyword">for</span> k<span class="token operator">=</span>矩阵表达式<span class="token keyword">for</span> k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 循环四次<span class="token keyword">for</span> k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">]</span> 循环一次<span class="token keyword">while</span> k：n<span class="token comment">%执行n遍</span>循环语句<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-函数文件"><a href="#4-函数文件" class="headerlink" title="4. 函数文件"></a>4. 函数文件</h2><h3 id="4-1-创建函数"><a href="#4-1-创建函数" class="headerlink" title="4.1 创建函数"></a>4.1 创建函数</h3><p>函数文件建议与文件名保持一致</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 举例子</span><span class="token keyword">function</span> <span class="token punctuation">[</span>s<span class="token punctuation">,</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fcircle</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">%函数名 fcircle [s,p]为计算结果对应的值</span>s<span class="token operator">=</span>p1<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>p1<span class="token operator">*</span>r<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-函数调用"><a href="#4-2-函数调用" class="headerlink" title="4.2 函数调用"></a>4.2 函数调用</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>s<span class="token punctuation">,</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fcircle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token number">314.1593</span>p<span class="token operator">=</span><span class="token number">62.8319</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-匿名函数"><a href="#4-3-匿名函数" class="headerlink" title="4.3 匿名函数"></a>4.3 匿名函数</h3><ol><li>基本格式: 函数句柄变量=@(匿名函数输入参数) 匿名函数表达式</li></ol><pre class="line-numbers language-none"><code class="language-none">f=@(x,y) x^2+y^2f=(3,4)ans=25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>函数句柄变量=@函数名(可以是自定义函数 也可以内置函数)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">h<span class="token operator">=</span><span class="token operator">@</span>sin<span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>h<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-4-函数参数的可调性"><a href="#4-4-函数参数的可调性" class="headerlink" title="4.4 函数参数的可调性"></a>4.4 函数参数的可调性</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> fout<span class="token operator">=</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">if</span> nargin<span class="token operator">==</span><span class="token number">1</span>fout<span class="token operator">=</span>a<span class="token keyword">elseif</span> nargin<span class="token operator">==</span><span class="token number">2</span> fout<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token keyword">elseif</span> nargin<span class="token operator">==</span><span class="token number">3</span>fout<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token keyword">end</span><span class="token comment">%有点类似java中重载方法或者传入了可变参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-作用域"><a href="#5-作用域" class="headerlink" title="5. 作用域"></a>5. 作用域</h2><h3 id="5-1-全局变量"><a href="#5-1-全局变量" class="headerlink" title="5.1 全局变量"></a>5.1 全局变量</h3><p>global 变量名</p><h3 id="5-2-局部变量"><a href="#5-2-局部变量" class="headerlink" title="5.2 局部变量"></a>5.2 局部变量</h3><p>函数内的变量都是局部变量</p><pre class="line-numbers language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">%建立函数文件wad.mfunction f=wad(x,y)global ALPHA BETAf=ALPHA*x+BETA*y%命令行窗口输入语句 命令行写入global变量名 可以动态改变函数文件中参数值global ALPHA BETAALPHA=1BETA=2;s=wad(1,2)s=5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章——MATLAB-绘图"><a href="#第四章——MATLAB-绘图" class="headerlink" title="第四章——MATLAB 绘图"></a>第四章——MATLAB 绘图</h1><h2 id="0-绘制图形辅助"><a href="#0-绘制图形辅助" class="headerlink" title="0. 绘制图形辅助"></a>0. 绘制图形辅助</h2><ul><li><p>图形标注</p><ol><li><p>title (图形标题)</p><p>1.1 参数是字符串 ‘ ‘单引号表示</p><p>1.2 多个参数用 花括号 </p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'MATLAB'</span><span class="token punctuation">,</span><span class="token string">'y=sin(x)'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3 LaTeX表示</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107232557594.png" alt="image-20221107232557594"></p><p>1.4 属性设置</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107232724160.png" alt="image-20221107232724160"></p></li><li><p>xlabel(x轴说明)同上</p></li><li><p>ylabel(y轴说明)同上</p></li><li><p>text(x,y,图形说明)</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107233153487.png" alt="image-20221107233153487"></p></li><li><p>legend(图例1，图例2，……)</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107233344273.png" alt="image-20221107233344273"></p></li></ol></li><li><p>坐标控制</p><ol><li><p>axis函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">axis</span><span class="token punctuation">(</span>xmin<span class="token punctuation">,</span>xmax<span class="token punctuation">,</span>ymin<span class="token punctuation">,</span>ymax<span class="token punctuation">,</span>zmin<span class="token punctuation">,</span>zmax<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>网格</p><p>2.1 grid off</p><p>2.2 grid on</p></li></ol></li><li><p>边框</p><p>3.1 box on</p><p>3.2 box off</p></li></ol></li></ul><p>​综合运用</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107234001839.png" alt="image-20221107234001839"></p><ul><li><p>图形保持——在原有图形继续叠加 防止matlab刷新覆盖原有的图形</p><ol><li>hold on</li><li>hold off</li></ol></li><li><p>图形窗口分割</p><p>subplot函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">subplot</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token comment">%其中，m和n指定将图形窗口分成m*n个绘图区，p指定当前活动区——所有图形编辑操作都作用于p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="1-二维曲线"><a href="#1-二维曲线" class="headerlink" title="1. 二维曲线"></a>1. 二维曲线</h2><ul><li><p>plot函数 </p><ol><li><p>plot(x) 下标为序号 1,2,3……</p></li><li><p>plot(x,y) x横坐标 y纵坐标</p><p>2.1 若 x和y是向量时，长度要保持一致</p><p>2.2 若 x 是向量 y是矩阵 根据线代的知识 </p><p>2.3 允许多个参数 不一定是两个</p></li><li><p>plot(x,y,选项)</p><ul><li><p>线型</p><ol><li>实线 “_”</li><li>虚线” ：”</li><li>点划线“-.”</li><li>双画线 “–”</li></ol></li><li><p>颜色</p><ol><li>“r” 红色</li><li>“g” 绿色</li><li>“b” 蓝色</li><li>“w” 白色</li><li>“k” 黑色</li></ol></li><li><p>数据点标记</p><ol><li>“*” 星号</li><li>“o”圆圈</li><li>“s”方块</li><li>“p”五角星</li><li>“^” 朝上三角符号</li></ol></li></ul></li></ol><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如图所示 二维曲线</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221107215127747.png" alt="image-20221107215127747"></p></li><li><p>fplot函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">fplot</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>lims<span class="token punctuation">,</span>选项<span class="token punctuation">)</span><span class="token function">fplot</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1.</span><span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment">%min=0 max=0.2</span><span class="token function">fplot</span><span class="token punctuation">(</span>funx<span class="token punctuation">,</span>funy<span class="token punctuation">,</span>tlims<span class="token punctuation">,</span>选项<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-其他形式的二维曲线和统计图形函数"><a href="#2-其他形式的二维曲线和统计图形函数" class="headerlink" title="2. 其他形式的二维曲线和统计图形函数"></a>2. 其他形式的二维曲线和统计图形函数</h2><h3 id="2-1-对数坐标图"><a href="#2-1-对数坐标图" class="headerlink" title="2.1 对数坐标图"></a>2.1 对数坐标图</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">semilogx</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2</span>……<span class="token punctuation">)</span><span class="token comment">%半对数 x轴为常用对数刻度而y轴人保持线性刻度</span><span class="token function">semilogx</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2</span>……<span class="token punctuation">)</span><span class="token comment">% 半对数 y轴为常用对数刻度而x轴人保持线性刻度</span><span class="token function">loglog</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2</span>……<span class="token punctuation">)</span><span class="token comment">%全对数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-极点坐标图"><a href="#2-2-极点坐标图" class="headerlink" title="2.2 极点坐标图"></a>2.2 极点坐标图</h3><pre class="line-numbers language-none"><code class="language-none">polar(旋转角度,极径)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-统计图"><a href="#2-3-统计图" class="headerlink" title="2.3 统计图"></a>2.3 统计图</h3><ul><li><p>条形类</p><ol><li>柱状图</li></ol><pre class="line-numbers language-none"><code class="language-none">bar函数bar(y,style)y是数据 style是用于指定分组排列模式style:     1. grouped 簇状分布     2. stacked 堆积分布bar(x,y,style)x是向量 存储横坐标y是矩阵 存储数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221108204631066.png" alt="image-20221108204631066"></p><pre><code>           2. 直方图</code></pre><pre class="line-numbers language-none"><code class="language-none">hist函数hist(y)hist(x,y)其中y是要统计的数据，x是用于指定区间的划分方式 默认x=10 相当于有x个柱子rose函数 极坐标的直方图rose(theta,x)其中，参数theta用于确定每一区间与圆点的角度，选项x用于指定区间的划分方式x默认为20 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>面积类图形</p><ol><li><p>扇形</p><p>pie函数</p><pre class="line-numbers language-none"><code class="language-none">pie(x,explode)x为存储待统计数据选项explode控制图块显示模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221108205857179.png" alt="image-20221108205857179"></p></li><li><p>面积图</p><p>area函数</p></li></ol></li><li><p>散点类图形</p><ol><li>scatter函数:散点图</li></ol><pre class="line-numbers language-none"><code class="language-none">scatter(x,y,选项,'filled')x,y确认点filled表示是否空心选项用于指定线型，颜色，数据点标记t=0:pi/50:2*pix=16*sin(t).^3y=13cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)scatter(x,y,'rd','filled')画出一个爱心<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>stairs函数:阶梯图</p></li><li><p>stem函数:杆图</p></li></ol></li><li><p>矢量类图形</p><ol><li>compass函数</li><li>feather函数</li><li>quiver函数</li></ol><pre class="line-numbers language-none"><code class="language-none">quiver(x,y,u,v)x,y矢量起点u,v矢量终点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-三维曲线"><a href="#3-三维曲线" class="headerlink" title="3. 三维曲线"></a>3. 三维曲线</h2><h3 id="3-1-绘制曲线"><a href="#3-1-绘制曲线" class="headerlink" title="3.1 绘制曲线"></a>3.1 绘制曲线</h3><ul><li>plot3函数</li></ul><pre class="line-numbers language-\" data-language="\"><code class="language-\">plot(x,y,z,选项)x轴，y轴，z轴 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221108211633840.png" alt="image-20221108211633840"></p><ul><li><p>fplot3函数</p><pre class="line-numbers language-none"><code class="language-none">fplot3(funx,funy,funz,tlims,选项)采用函数句柄的形式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-2-绘制曲面"><a href="#3-2-绘制曲面" class="headerlink" title="3.2 绘制曲面"></a>3.2 绘制曲面</h3><ol><li><p>生成平面网格数据</p><ul><li>利用矩阵运算生成</li></ul></li><li><p>利用meshgrid函数</p><pre class="line-numbers language-none"><code class="language-none">[X,Y]=meshgrid(x,y)x,y为向量x=2:6y=(3:8)[X,Y]=meshgrid(x,y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>绘制曲线函数</p><ul><li><p>mesh(x,y,z,c)网格图</p><p>meshc函数 等高线的曲面网格</p><p>meshz函数 带有底座的三维网格曲面</p></li><li><p>surf(x,y,z,c)曲面图</p><p>surfc函数 具有等高线的曲面函数</p><p>surfl函数 具有光照效果</p></li></ul><p>c为高度不同的颜色渐变参数</p></li><li><p>标准三维曲面</p><ul><li><p>sphere函数</p><pre class="line-numbers language-none"><code class="language-none">球面[x,y,z]=sphere(n)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>cylinder函数</p><pre class="line-numbers language-none"><code class="language-none">[x,y,z]=cylinder(R,n)(r,n)默认就会生成二列二十一行的网格坐标矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>其他函数</p><ul><li>fsurf(funx,funy,funz,uvlims)</li><li>fmesh(funx,funy,funz,uvlims)</li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111190813790.png" alt="image-20221111190813790"></p></li></ol><h2 id="4-图形修饰处理"><a href="#4-图形修饰处理" class="headerlink" title="4. 图形修饰处理"></a>4. 图形修饰处理</h2><h3 id="4-1-视点处理"><a href="#4-1-视点处理" class="headerlink" title="4.1 视点处理"></a>4.1 视点处理</h3><ul><li>方位角</li><li>仰角</li></ul><p>函数 view()</p><pre class="line-numbers language-none"><code class="language-none">view(az,el)az为方位角 el为仰角 默认方位角-37.5° 仰角30°view(x,y,z)view(2)设置为二维平面 仰角90° 方位角0°view(3)设置三维空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-颜色处理"><a href="#4-2-颜色处理" class="headerlink" title="4.2 颜色处理"></a>4.2 颜色处理</h3><ul><li><p>颜色的向量表示</p><p>[R,G,B]</p></li><li><p>色图(Colormap)</p><ul><li>色图矩阵</li><li>内建色图<ol><li>冷暖色图</li><li>四季色图</li><li>灰度色图</li><li>…</li></ol></li></ul></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111191704301.png" alt="image-20221111191704301"></p><p>by the way 可以用内建色图 grey(6)来表示</p><ul><li><p>三维图形表面的着色</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111191916348.png" alt="image-20221111191916348"></p></li><li><p>图形的剪裁</p><p>可以将图形中需要剪裁部分对应的函数设置成NaN，这样在绘制图形是，函数值为NaN的部分将不显示出来，从而达到对图形进行剪裁的目的。</p><ol><li>二维平面剪裁</li></ol></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111192828133.png" alt="image-20221111192828133"></p><ol start="2"><li>三维空间图形的剪裁</li></ol><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111192930529.png" alt="image-20221111192930529"></p><h2 id="5-交互式绘图工具"><a href="#5-交互式绘图工具" class="headerlink" title="5. 交互式绘图工具"></a>5. 交互式绘图工具</h2><h3 id="5-1绘图选项卡"><a href="#5-1绘图选项卡" class="headerlink" title="5.1绘图选项卡"></a>5.1绘图选项卡</h3><h3 id="5-2-图形窗口绘图工具"><a href="#5-2-图形窗口绘图工具" class="headerlink" title="5.2 图形窗口绘图工具"></a>5.2 图形窗口绘图工具</h3><h3 id="5-3-图形窗口菜单和工具栏"><a href="#5-3-图形窗口菜单和工具栏" class="headerlink" title="5.3 图形窗口菜单和工具栏"></a>5.3 图形窗口菜单和工具栏</h3><h1 id="第五章-——数据分析和统计"><a href="#第五章-——数据分析和统计" class="headerlink" title="第五章 ——数据分析和统计"></a>第五章 ——数据分析和统计</h1><h2 id="1-数据分析常用方法"><a href="#1-数据分析常用方法" class="headerlink" title="1.  数据分析常用方法"></a>1.  数据分析常用方法</h2><h3 id="1-求极值"><a href="#1-求极值" class="headerlink" title="1.  求极值"></a>1.  求极值</h3><ul><li>参数是向量</li></ul><pre class="line-numbers language-none"><code class="language-none">max()min()x=[1,2,3,5,6,8][y,k]=max(x)y是返回最大值k是返回最大值的下标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>参数是矩阵</p><pre class="line-numbers language-none"><code class="language-none">A=[13,-56,78;25,63,-235;87,25,563;1,0,-1]max(A)ans= （求的是每列的最大元素，并以行向量的形式输出） 78 63 563 max(A,[],2)“2”表示取矩阵每行的最大值 并以列向量的形式输出 ans= 78 63 563 1 max(max(A)) ans= 563 求矩阵的最大元素 调用两次max函数(我认为哈，每行每行列都进行检查 所以要调用两次的max函数) max(A(:))将A矩阵堆叠成列向量就可以只调用一次max函数啦 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-求平均和中值"><a href="#2-求平均和中值" class="headerlink" title="2. 求平均和中值"></a>2. 求平均和中值</h3><ul><li>mean() 平均值</li><li>median() 中值</li></ul><h3 id="3-求和和求积"><a href="#3-求和和求积" class="headerlink" title="3 . 求和和求积"></a>3 . 求和和求积</h3><ul><li>sum()</li><li>prod()</li></ul><h3 id="4-累加和与累乘积"><a href="#4-累加和与累乘积" class="headerlink" title="4.  累加和与累乘积"></a>4.  累加和与累乘积</h3><ul><li><p>cumsum()</p><p>结果是一个数值</p></li><li><p>cumprod()</p><p>结果是向量</p></li></ul><h3 id="5-求标准差与相关系数"><a href="#5-求标准差与相关系数" class="headerlink" title="5.  求标准差与相关系数"></a>5.  求标准差与相关系数</h3><ul><li><p>std(X) 计算向量X的标准差</p></li><li><p>std(A) 计算矩阵A的各列的标准差</p></li><li><p>std(A,flag,dim)</p><ol><li>flag =0 取s1的公式计算样本标准差</li><li>flag=1 取s2的公式计算样本标准差</li></ol><p>默认flag=0 dim=1(按列计算)</p></li><li><p>相关系数r 取值在[-1,1]之间</p><p>用于描述 两组数据序列之间的相互关系的指标，r越接近于0，两组数据关联越差，反之亦然。</p></li></ul><h3 id="6-排序"><a href="#6-排序" class="headerlink" title="6.  排序"></a>6.  排序</h3><ul><li>sort函数</li></ul><pre class="line-numbers language-none"><code class="language-none">sort(x)1. 默认对向量x进行升序排列2. 默认对矩阵的列进行升序排列[x,i]=sort(A)[y,i]=sort(A,dim,mode)   mode=descend/ascend（降序/升序）返回的答案是 ans=矩阵dim=1/2（1是列数，2是行数）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-多项式计算"><a href="#2-多项式计算" class="headerlink" title="2. 多项式计算"></a>2. 多项式计算</h2><ul><li><p>多项式表示</p><p>p(x)表示为向量形式：[a<del>n</del>,a<del>n-1</del>,……，a<del>0</del>]</p><p>标准格式三点要求</p><ol><li>系数向量的顺序是==从高到低==</li><li>多项式系数向量包含0次项系数，所以其长度为多项式最高次数加1</li><li>如果有的项没有，系数向量相应的位置用0来补足</li></ol></li><li><p>多项式的四则运算</p><ol><li><p>加减(相应向量对应相加减)</p></li><li><p>乘法 conv（p1，p2）</p></li><li><p>除法 [Q,r] =deconv（p1，p2）</p><p>tip:conv（Q，p2）+r=p1</p></li></ol></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111203303723.png" alt="image-20221111203303723"></p><ul><li><p>多项式的求导</p><p>polyder()</p><pre class="line-numbers language-none"><code class="language-none">p=polyder(P)p=polyder(P,Q)求的是P*Q的导函数[p,q]=polyder(P,Q)求的是P/Q的导函数 导函数的分母存入q 分子存入p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>多项式的求值</p><ol><li><p>polyval（p，x）代数多项式求值</p><p>p是多项式系数向量；x可以是标量，向量或矩阵。若x为标量，则求多项式在<strong>该点的值</strong>；</p><p>若x为向量或矩阵，则对向量或矩阵中的<strong>每个元素</strong>求多项式的值。</p></li><li><p>polyvalm（p，x）矩阵多项式求值</p><p>要求x是方阵</p></li></ol><p>tip:但参数x是标量时，两者的方法求得值是相同的。因为是标量也是特殊形式的方阵。</p></li><li><p>多项式的求根</p><p>函数roots()直接搞定</p><pre class="line-numbers language-none"><code class="language-none">ans=roots(A)传入的参数是向量Apoly(ans)=A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例题</p><pre class="line-numbers language-none"><code class="language-none">p=[-38.89,126.11,-3.42]q=polyder(p)q=-77.7800 126.1100roots(q)//二次函数求导 该点即为极值点ans=1.6214（该极值点的横坐标）polyval(p,1.6214)ans=98.8154x=0:0.1:2plot(x,polyval(p,x),1.6214,98.8154,'rp')画出二维曲线 红色五角星<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-数据插值"><a href="#3-数据插值" class="headerlink" title="3. 数据插值"></a>3. 数据插值</h2><h3 id="3-1-一维插值-interp1"><a href="#3-1-一维插值-interp1" class="headerlink" title="3.1 一维插值(interp1)"></a>3.1 一维插值(interp1)</h3><ul><li><p>作用:可以根据有限个点的取值状况，合力估算出附近其他点的取值。</p></li><li><p>函数interp1(x,y,x1,method)</p><ol><li><p>x,y是两个等长的一直向量，分别表示采样点和采样值</p></li><li><p>x1是一个向量或标量，表示要插值的点</p></li><li><p>method</p><p>3.1 linear:线性插值(默认方法) </p><p>3.2 nearest：最近点插值 </p><p>3.3 pchip:分段3次埃尔米特插值 采用分段<strong>三次多项式</strong>，除满足插值条件，还需满足在若干个结点处相领段插值函数的<strong>一阶导数相等</strong></p><p>3.4 每个分段内构造一个<strong>三次多项式</strong>，使其插值函数除满足插值条件外，还要求在各节点处具<strong>有连续的一阶和二阶导数</strong> 提高光滑性</p></li></ol></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111210458154.png" alt="image-20221111210458154"></p><p>四种方法的比较</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111211447924.png" alt="image-20221111211447924"></p><p>比较:</p><ol><li>线性插值和最近点插值方法比较简单。其中线性插值方法的计算量与样本点n无关 n越大，误差越小</li><li>3次埃尔米特插值和3次燕条插值都能保证曲线的光滑性。相比较而言，前者具有保形性，后者性态更好，因为要去二阶导数也连续！</li></ol><h3 id="3-2-interp2-二维插值"><a href="#3-2-interp2-二维插值" class="headerlink" title="3.2 interp2()二维插值"></a>3.2 interp2()二维插值</h3><p>跟一维插值函数传参类似</p><pre class="line-numbers language-none"><code class="language-none">Z1=interp2(x,y,z,x1,y1,method)x,y是两个向量，表示两个参数的采样点z是参样点对应的函数值x1，y1是两个标量或者是向量，表示是要插值的点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例题</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111212352892.png" alt="image-20221111212352892"></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111212411796.png" alt="image-20221111212411796"></p><h3 id="3-3-插值应用"><a href="#3-3-插值应用" class="headerlink" title="3.3 插值应用"></a>3.3 插值应用</h3><ul><li>刹车距离</li><li>军事沙盘</li></ul><h2 id="4-曲线拟合"><a href="#4-曲线拟合" class="headerlink" title="4. 曲线拟合"></a>4. 曲线拟合</h2><ul><li>函数polyfit</li></ul><pre class="line-numbers language-none"><code class="language-none">P=polyfit(x,y,m)样本数据x，y 多项式向量次数[P,S]=polyfit(x,y,m)S是误差数据[P,S,mu]=polyfit(x,y,m) mu是二元向量，mu1是mean(X)平均数据 mu2是std(X)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221111214417514.png" alt="image-20221111214417514"></p><p>上图是数据插值图，下图则是曲线拟合图</p><p>两者都是依靠函数逼近的方式，求出未知函数。</p><p>拟合方法都是依靠多项式函数，原理是最小二乘法。</p><ul><li><p>功能</p><ol><li>估算数据</li><li>预测趋势</li><li>总结规律</li></ol></li><li><p>应用</p><ol><li><p>股票预测问题</p><p>类似这种跳动，随机性太大 所以曲线拟合不是“万能钥匙”</p></li><li><p>算法优化</p></li></ol></li><li><p>选择</p><p>数据插值适合数据精确</p><p>曲线拟合适合有误差的数据分析</p></li></ul><h1 id="第六章——数值微积分与方程求解"><a href="#第六章——数值微积分与方程求解" class="headerlink" title="第六章——数值微积分与方程求解"></a>第六章——数值微积分与方程求解</h1><h2 id="1-数值微分"><a href="#1-数值微分" class="headerlink" title="1. 数值微分"></a>1. 数值微分</h2><ul><li><p>函数表示</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">dx<span class="token operator">=</span><span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">%计算向量x的一阶向前差分</span>dx<span class="token operator">=</span><span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">%计算向量x的n阶向前差分</span>dx<span class="token operator">=</span><span class="token function">diff</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>n<span class="token punctuation">,</span>dim<span class="token punctuation">)</span><span class="token comment">% 计算矩阵A的n阶差分 dim=1时 改为默认值 按列进行差分 dim=2 按照行差分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-数值积分"><a href="#2-数值积分" class="headerlink" title="2. 数值积分"></a>2. 数值积分</h2><p>根据定积分常用公式 牛顿莱布尼兹公式  求得原函数</p><p>可是会遇到求不出原函数的情况</p><p>所以转换一个思路</p><p>将积分区间分成n个小区间 这样求定积分 就转变成求和问题</p><h3 id="1-函数"><a href="#1-函数" class="headerlink" title="1. 函数"></a>1. 函数</h3><ul><li>quad函数</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>l<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">quad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>tol<span class="token punctuation">,</span>trace<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">quadl</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>tol<span class="token punctuation">,</span>trace<span class="token punctuation">)</span><span class="token comment">%filename 是被积函数名</span><span class="token comment">% a，b是定积分上下限</span><span class="token comment">% tol 被积分的精度</span><span class="token comment">% trace是否展现被积分过程 默认为零 正无穷+inf 负无穷 -inf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>高斯——克朗罗德方法</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>l<span class="token punctuation">,</span>err<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">quadgk</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>err 返回近似误差范围 a，b上下限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112194310920.png" alt="image-20221112194310920"></p><ul><li><p>trapz函数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">trapz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">%两者等价</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多重积分函数</p><ol><li>二重积分</li></ol><pre class="line-numbers language-none"><code class="language-none">I=integral2(filename,a,b,c,d)从里到外的上下限值 从右到左I=quad2d(filename,a,b,c,d)I=dblquad(filename,a,b,c,d,tol)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>三重积分</li></ol><pre class="line-numbers language-none"><code class="language-none">I=integral3(filename,a,b,c,d,e,f)I=triplequad(filename,a,b,c,d,e,f,tol)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="3-线性方程组"><a href="#3-线性方程组" class="headerlink" title="3. 线性方程组"></a>3. 线性方程组</h2><h3 id="3-1-直接法"><a href="#3-1-直接法" class="headerlink" title="3.1 直接法"></a>3.1 直接法</h3><p>以矩阵出等变换为基础 可以求得方程组的精确值 占用内存空间大 程序实现较为复杂 一般适合求解低阶稠密线性方程组</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112195344891.png" alt="image-20221112195344891"></p><ul><li><p>高斯消去法</p><p>线代中 增广矩阵 求解 多组线性方程</p></li><li><p>列主元消去法</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>L<span class="token punctuation">,</span>U<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lu</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%产生一个上三角阵U和一个变化形式的下三角阵L，使之满足A=LU A必须是方阵</span><span class="token punctuation">[</span>L<span class="token punctuation">,</span>U<span class="token punctuation">,</span>P<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lu</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%产生一个上三角阵U和一个下三角阵L以及一个置换矩阵P 使之满足PA=LU 同样A是方阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112200159535.png" alt="image-20221112200159535"></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112200338660.png" alt="image-20221112200338660"></p><ul><li>矩阵的三角分解法</li></ul><h3 id="3-2-迭代法"><a href="#3-2-迭代法" class="headerlink" title="3.2 迭代法"></a>3.2 迭代法</h3><p>直接法的缺点反过来就是迭代法的优点 值得注意的一点就是 要考虑算法的收敛性</p><ul><li>雅克比迭代法</li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112200643020.png" alt="image-20221112200643020"></p><ul><li><p>高斯——赛德尔迭代法</p><p> <img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112200834095.png" alt="image-20221112200834095"></p></li></ul><h2 id="4-非线性方程"><a href="#4-非线性方程" class="headerlink" title="4. 非线性方程"></a>4. 非线性方程</h2><h3 id="4-1-求解方程"><a href="#4-1-求解方程" class="headerlink" title="4.1 求解方程"></a>4.1 求解方程</h3><pre class="line-numbers language-none"><code class="language-none">fzero(filename,x0)fsolve(filename,x0,option)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-函数极值计算"><a href="#4-2-函数极值计算" class="headerlink" title="4.2 函数极值计算"></a>4.2 函数极值计算</h3><ul><li><p>极大值</p></li><li><p>极小值</p><ol><li>无约束最优化问题</li></ol><pre class="line-numbers language-none"><code class="language-none">[xmin,fmin]=fminbnd(filename,x1,x2,option)x1，x2为左右边界[xmin,fmin]=fminsearch(filename,x0,option)x0为输入函数的初值[xmin,fmin]=fminunc(filename,x0,option)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112202706479.png" alt="image-20221112202706479"></p><ol start="2"><li><p>有约束最优化问题</p><pre class="line-numbers language-none"><code class="language-none">[xmin,fmin]=fmincon()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112202910524.png" alt="image-20221112202910524"></p></li></ol></li></ul><h2 id="5-常微分方程"><a href="#5-常微分方程" class="headerlink" title="5. 常微分方程"></a>5. 常微分方程</h2><h3 id="5-1-方法"><a href="#5-1-方法" class="headerlink" title="5.1 方法"></a>5.1 方法</h3><ul><li><p>单步法</p><p>龙格-库塔法</p></li><li><p>多步法</p><p>亚当斯法</p></li></ul><pre class="line-numbers language-none"><code class="language-none">[t,y]=solver(filename,tspan,y0,option)tspan形式是[t0,tf]y0是初始状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常微分方程数值求解函数的统一命名格式</p><p>odennxx nn指的是方法的阶数 xx是字母 用于标注方法的专门特征</p><p>如果字母是“s”则适合刚性问题</p><h3 id="5-1刚性问题Stiff"><a href="#5-1刚性问题Stiff" class="headerlink" title="5.1刚性问题Stiff"></a>5.1刚性问题Stiff</h3><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112205255772.png" alt="image-20221112205255772"></p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221112205355887.png" alt="image-20221112205355887"></p><h1 id="第七章——非数值计算"><a href="#第七章——非数值计算" class="headerlink" title="第七章——非数值计算"></a>第七章——非数值计算</h1><h2 id="7-1-符号对象建立"><a href="#7-1-符号对象建立" class="headerlink" title="7.1 符号对象建立"></a>7.1 符号对象建立</h2>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb学习笔记</title>
      <link href="/2022/10/25/javaweb-bi-ji/"/>
      <url>/2022/10/25/javaweb-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Javaweb笔记"><a href="#Javaweb笔记" class="headerlink" title="Javaweb笔记"></a>Javaweb笔记</h1><h2 id="一、jsp页面"><a href="#一、jsp页面" class="headerlink" title="一、jsp页面"></a>一、jsp页面</h2><ol><li><p>jsp全称——java server pages 是java 的服务器页面</p></li><li><p>jsp的主要功能是<strong>代替servlet程序</strong>回传的html页面的数据</p><p>引出jsp技术的原因在于servlet程序回传html页面数据时一件非常繁琐的事情，开发成本和维护成本会很高(面对复杂庞大的html页面的情况)</p></li><li><p>本质——是<strong>servlet程序</strong> 继承了Httpservlet</p><p>第一次访问jsp页面是，<strong>Tomcat</strong>服务器会将其翻译成一个<strong>java源文件</strong>和一个<strong>后缀名.class</strong>字节码程序。</p><p>==注意==：因此要注意tomcat的版本号要与jdk的版本要相对应，否则无法编译jsp文件，从而页面无法跳转。如:  <em>tomcat（8.0.50）和jdk(1.8)</em> </p><p>jsp结合了<strong>HTML</strong> 和<strong>Java</strong>代码！</p></li><li><p>jsp的头部的page指令 （属性）</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8"language="java"%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>language 属性</p><p>表示jsp翻译后世什么语言文件 目前支持<strong>java</strong></p></li><li><p>contentType属性</p><p>表示jsp返回的数据类型 </p></li><li><p>pageEncoding属性</p><p>jsp本身文件的字符集 比如:”UTF-8”</p></li><li><p>import属性</p><p>跟java源代码的一样，用导包和导类</p></li><li><p>autoFlush</p><p>当输出out缓冲区满了之后，是否表示<strong>自动刷新缓冲区</strong>，默认值是true</p></li><li><p>buffer</p><p>设置out缓冲区的大小，默认是<strong>8kb</strong></p></li><li><p>errorPage</p><p>设置jsp<strong>运行错误自动跳转</strong>到提前设置好的页面路径</p></li><li><p>isErrorPage</p><p>设置当前jsp页面是否是错误信息页面。<strong>默认值是false</strong> 如果是true 可以获取异常信息</p></li><li><p>session</p><p>设置访问当前jsp页面，是否会创建HttpSession对象。<strong>默认值是true</strong></p></li><li><p>extends</p><p>设置jsp翻译出来的<strong>Java类</strong>默认继承者（一般不修改extends属性信息）</p></li></ul><p>==注意==：jsp的指令中的多个属性可以写在一个page里面，也可以写在多个指令中。</p><p>但是！无论在哪个page指令属性中，任何page允许的属性都只能出现一次(否则编译错误)，除了import(导包可以多个！)</p></li><li><p>jsp脚本种类</p><ol><li><strong>声明脚本</strong>（将jsp翻译出来的java文件定义<strong>类属性</strong>，<strong>方法</strong>和<strong>静态代码块</strong>）(极少用到)</li></ol><ul><li>书写格式</li></ul><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!    //定义属性    private int id=2123;private String a="abc" %&gt;&lt;%!  //定义方法    public void a(){    .....} %&gt;&lt;%!    //静态代码块    static {    map=new HashMap&lt;String ,Object&gt;();    map.put("key1","value1");     map.put("key2","value2");     map.put("key3","value3");}    %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p><strong>表达式脚本</strong>(常用)</p><ul><li><p>作用：</p><p>在jsp页面上<strong>输出数据</strong></p></li><li><p>书写格式</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%=        .... %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特点</p><ol><li>所有的表达式脚本被翻译到_jspService()方法中（这方法其实就在jsp<strong>翻译</strong>出来的java文件可以中找到）</li><li><strong>表达式脚本</strong>都会被翻译成为<strong>out.print()语句输出</strong>到jsp页面上 支持多种数据类型转化成字符串输出在jsp页面上</li><li>由于表达式脚本翻译的内容都在_jspService()方法中，所以_jspService方法中的对象可以直接使用</li><li>表达式脚本中的语句==不能==以分号(<strong>;</strong>)结束</li></ol></li><li><p>代码演示</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%=    //输出具有某一数据类型的数字    12  %&gt;&lt;%=    //输出字符串    "我是字符串"%&gt;&lt;%=    resq.getParameter("username")%&gt;&lt;%=   //输出对象         map%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>代码脚本</strong></p><ul><li><p>书写格式</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%....（Java语句）%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>作用</p><p>可以在jsp页面中，编写我们自己需要的功能(用<strong>Java语句</strong>实现)</p></li><li><p>特点</p><ol><li>代码脚本翻译之后都在_jspService方法中</li><li>代码脚本由于翻译到_jspService方法中，所以可以在_jspService方法中的现有对象都可以直接使用</li><li>还可以有多个代码脚本组合一个完整的由java语言实现的功能</li><li>代码脚本和表达式脚本组合 在jsp页面输出内容(数据)</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;table border="1"&gt;    &lt;%    for (int i = 0; i &lt; 5; i++) {    %&gt;    &lt;tr&gt;        &lt;td&gt;第&lt;%=i+1%&gt;行&lt;/td&gt;&lt;%--多行单列--%&gt;    &lt;/tr&gt;        &lt;%=i%&gt;        &lt;br&gt;&lt;%        //System.out.println(i);    }%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li><li><p>jsp注释</p><ul><li>html注释       <!----></li><li>java注释      **//*<em>（单行注释）/</em>   */(多行注释)</li><li>jsp注释       可以涵盖上面两种注释（即注释jsp所有代码）   &lt;%–注释内容–%&gt;</li></ul></li><li><p>jsp的<strong>九大内置对象</strong></p><ul><li>request</li></ul><p>  请求对象</p><ul><li><p>response</p><p>响应对象response是服务器对客户端的请求作出的动态响应，并且通过response对象将数据发送到客户端浏览器中。如Cookie，http文件头文件信息。</p></li><li><p>pageContext</p><p>jsp上下文对象</p></li><li><p>session</p><p>会话对象</p></li><li><p>application</p><p>ServletContext对象</p></li><li><p>config</p><p>ServletConfig对象</p></li><li><p>out</p><p>jsp输出对象</p></li><li><p>page</p><p>指向当前jsp对象</p></li><li><p>exception</p><p>异常对象</p></li></ul></li><li><p><strong>四大域对象</strong></p><ul><li><p>pageContaxt(PageContextImpl类)</p><p>作用域在当前页面，也就是说跳转到其他页面时，pageContext=null</p></li><li><p>request(HttpServletRequest类)</p><p>只允许请求一次，无法进行下一次请求(这个请求和上一个请求是不一样的，如果是相同的请求，则视为一次请求)</p><p>作用:内置的request对象代表客户端向服务器发起请求，主要是通过HTTP协议将数据传递给服务器</p></li><li><p>session(HttpSession类)</p><p>关掉页面时，session=null </p><p>作用:会话对象session是一种服务器<strong>个别处理与记录用户端上网使用者信息</strong>的技术。</p></li><li><p>application(ServletContext类)</p><p>重启服务器或者是重新部署都会使得 application=null</p></li></ul><p>域对象都可以像<strong>Map</strong>一样存取数据的<strong>对象</strong>。四个域对象功能一样，不同是他们对数据的的存取范围。（可以直接拿来用）</p><h3 id="tip：-（优先级）pageContext-gt-gt-request-gt-gt-session-gt-gt-application"><a href="#tip：-（优先级）pageContext-gt-gt-request-gt-gt-session-gt-gt-application" class="headerlink" title="tip： （优先级）pageContext>> request>>session>>application"></a>tip： （优先级）pageContext&gt;&gt; request&gt;&gt;session&gt;&gt;application</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%&lt;%--假设这文件是:scope.jsp--%&gt;        pageContext.setAttribute("key","pageContext");        request.setAttribute("key","request");&lt;!--类似Map的存储方式:键(key)值(value)对--&gt;        session.setAttribute("key","session");        application.setAttribute("key","application");        %&gt;&lt;!--对当前页面数据的储存(setAttribute)和提取(getAttribute)--&gt;        pageContext域是否有值:&lt;%=pageContext.getAttribute("key")%&gt;&lt;br&gt;        request:&lt;%=request.getAttribute("key")%&gt;&lt;br&gt;        session:&lt;%=session.getAttribute("key")%&gt;&lt;br&gt;        application:&lt;%=application.getAttribute("key")%&gt;&lt;br&gt;resquest.getRequestDispatcher("/scope2.jsp")&lt;!--跳转页面请求resq--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>out输出和response.getWriter输出的区别</p><ul><li><p>response和out的作用:</p><p>都是用于设置返回值给客户端内容(输出)</p></li><li><p>区别:</p><p>out有自己的缓冲区，response也有缓冲区。不过<strong>response会直接</strong>把输出内容直接送到response缓冲区，而out先送到自个的out缓冲区，然后等到jsp文件读完并执行完所有代码时，最后<strong>执行两个步骤</strong>  </p><ol><li>执行out.flush()操作，将out缓冲区的内容传到response缓冲区里，<strong>插入队尾</strong></li><li>最后执行response的刷新操作，把全部数据写给客户端(浏览器) 呈现在页面上(输出)</li></ol></li><li><p>常用</p><p>根据jsp最终还是会执行<strong>out.flush()操作</strong>和<strong>response的刷新操作</strong>，故我们还是会采用<strong>out的输出</strong> 当然**源码也是 **才用out的代码进行输出的</p><ol><li><p>out.write()</p><p>只能写入<strong>字符串数据</strong>的实参</p></li><li><p>out.print()</p><p>任意的数据类型都可以被out.print()转换成字符串类型</p></li></ol></li></ul></li><li><p>jsp常用标签</p><ul><li><p>静态包含</p><ul><li><p>特点：</p><ol><li>不会把被包含的jsp文件进行翻译成java文件和class文件(也就调用的jsp文件)，若被包含文件有Java语句则无法在浏览器进行识别编译compile</li></ol><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221012213927830.png" alt="image-20221012213927830"></p><ol start="2"><li>将<strong>被包含的文件</strong>拷贝在<strong>包含文件</strong>中打印输出</li></ol></li><li><p>作用：</p><p>调用文本jsp文件，修改页面文本内容。</p></li><li><p>格式:</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ include file="文件路径"%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>动态包含</p><ul><li><p>特点:</p><ol><li><p>可以将被包含的jsp文件翻译成java代码</p></li><li><p>动态包含底层采用如下代码调用被包含jsp文件执行输出</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">JspRuntimeLibrary.include(request,response,"/include/被包含的文件名.jsp",out,false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>动态包含还可以进行传递参数</p></li></ol></li><li><p>格式</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:include page="文件路径"&gt;    &lt;jsp:param name="username" value="zxc"/&gt;    &lt;jsp:param name="password" value="root"/&gt;&lt;/jsp:include&gt;&lt;%--在被包含的.jsp文件中调用--%&gt;&lt;%=request.getParameter("username")%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>请求转发</p><ul><li><p>代码演示</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:forward page="路径"&gt;&lt;/jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>练习</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">//你会发现代码标签降低代码的可阅读性&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align="center"&gt;九九乘法表&lt;/h1&gt;&lt;table align="center"&gt;    &lt;%        for(int i=1;i&lt;=9;i++){    %&gt;&lt;%--tr表示行数--%&gt;    &lt;tr&gt;       &lt;%     for(int j=1;j&lt;=i;j++){       %&gt;              &lt;td&gt; &lt;%=j+"x"+i+"="+i*j%&gt;&lt;/td&gt;&lt;%--td表示列数--%&gt;    &lt;%}%&gt;    &lt;/tr&gt;        &lt;%}%&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二、EL-表达式"><a href="#二、EL-表达式" class="headerlink" title="二、EL 表达式"></a>二、EL 表达式</h2><ol><li><p>概述</p><p>EL表达式全称是:Expression Language,是表达式语言。</p></li><li><p>作用：<br>用来代替表达式脚本，使代码更加简洁，同样是可以在jsp页面中进行数据的输出</p></li><li><p>代码演示</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;body&gt;    &lt;%    request.setAttribute("key","值");    %&gt;    &lt;%=request.getAttribute("key")%&gt;//在jsp页面输出    //EL表达式 "$ {}"    ${key};//同样可以在jsp页面输出&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="EL_JSTL.Person" %&gt;&lt;%@ page import="java.util.List" %&gt;&lt;%@ page import="java.util.ArrayList" %&gt;&lt;%@ page import="java.util.Map" %&gt;&lt;%@ page import="java.util.HashMap" %&gt;&lt;%--  导包import  Created by IntelliJ IDEA.  User: de'l'l  Date: 2022/10/16  Time: 22:28  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%  Person person = new Person();  person.setName("hjy");  person.setPhones(new String []{"1111111","123465","4659879"});  List&lt;String&gt; cities=new ArrayList&lt;&gt;();//创建ArrayList  cities.add("南京");  cities.add("广州");  cities.add("梅州");  cities.add("新余");  person.setCities(cities);    Map&lt;String ,Object&gt;map=new HashMap&lt;&gt;();//创建HashMap 特点:键值对    map.put("key1","value1");    map.put("key2","value2");    map.put("key3","value3");    map.put("key4","value4");    person.setMap(map);    //四个域都可以 pageContext request session application    pageContext.setAttribute("person",person);    //key="person" value=person(对象)或者(值)%&gt;${person.cities[1]}${person.name}${person.map}${person.map.key1}&lt;%--直接搜索下标索引--%&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> EL_JSTL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>phones<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>map<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> phones<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phones <span class="token operator">=</span> phones<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cities <span class="token operator">=</span> cities<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPhones</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> phones<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhones</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> phones<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phones <span class="token operator">=</span> phones<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCities</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cities <span class="token operator">=</span> cities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", phones="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>phones<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", cities="</span> <span class="token operator">+</span> cities <span class="token operator">+</span>                <span class="token string">", map="</span> <span class="token operator">+</span> map <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运算符</p><ul><li>算术运算符 </li><li>逻辑运算符 </li><li>点运算、中括号  </li><li>empty </li><li>三元运算符  </li><li>关系运算符</li></ul></li><li><p>EL 表达式的11个隐含对象</p><table><thead><tr><th>变量</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContextImpl</td><td>获取jsp九大内置对象</td></tr><tr><td>pageScope</td><td>Map&lt;String,Object&gt;</td><td>获取pageContext域中的额数据</td></tr><tr><td>requestScope</td><td>Map&lt;String,Object&gt;</td><td>获取request域中的数据</td></tr><tr><td>sessionScope</td><td>Map&lt;String,Object&gt;</td><td>获取session域中的数据</td></tr><tr><td>applicationScope</td><td>Map&lt;String,Object&gt;</td><td>获取application域中的数据</td></tr><tr><td>param</td><td>Map&lt;String,String&gt;</td><td>请求参数的值</td></tr><tr><td>paramValues</td><td>Map&lt;String,String&gt;</td><td>请求多个参数的值</td></tr><tr><td>header</td><td>Map&lt;String,String[ ]&gt;</td><td>获取请求头的值</td></tr><tr><td>headerValues</td><td>Map&lt;String,String[ ]&gt;</td><td>获取多个请求头的值</td></tr></tbody></table><table><thead><tr><th>cookie</th><th>Map&lt;String,Cookie&gt;</th><th>获取当前请求的Cookie信息</th></tr></thead><tbody><tr><td>initParam</td><td>Map&lt;String,String&gt;</td><td>获取数据web.xml配置中上下文参数</td></tr></tbody></table></li></ol><h2 id="三、JSTL标签库-JSP-Standard-Tag-Libray"><a href="#三、JSTL标签库-JSP-Standard-Tag-Libray" class="headerlink" title="三、JSTL标签库(JSP Standard  Tag Libray)"></a>三、JSTL标签库(JSP Standard  Tag Libray)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>==EL表达式==是为了==替换jsp中表达式脚本(&lt;%=…%&gt;)==,而==标签库==是为了==替换代码脚本(&lt;%…%&gt;)==,这样使得整个jsp页面变得更加简洁，提高可读性。</p><p>下列代码介绍了核心标签库的基本语法</p><ul><li>循环遍历</li><li>条件判断</li></ul><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="java.util.Map" %&gt;&lt;%@ page import="java.util.HashMap" %&gt;&lt;%@ page import="java.util.List" %&gt;&lt;%@ page import="EL_JSTL.Student" %&gt;&lt;%@ page import="java.util.ArrayList" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;%--  Created by IntelliJ IDEA.  User: de'l'l  Date: 2022/10/23  Time: 0:10  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;%--对已有的html标签自定义--%&gt;    &lt;style type="text/css"&gt;        table{            width: 500px;            border: 1px solid red;            border-collapse: collapse;        }        th,td{            border: 1px solid red;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;%--      &lt;c:forEach end=""&gt;&lt;/c:forEach&gt;--%&gt;&lt;%--      page对应的是pageContext          session对应的是session域          application对应的是pageContext          request对应的是request域--%&gt;&lt;%--核心库标签&lt;c:/&gt;--%&gt;      保存之前:${requestScope.abc}&lt;br&gt;        &lt;c:set scope="request" var="abc" value="abcValue"/&gt;      保存之后:${requestScope.abc}&lt;br&gt;&lt;%--调取key名 输出key对应的值--%&gt;        &lt;c:if test="${12==12}"&gt;            &lt;h1&gt;加油，你一定可以！&lt;/h1&gt;        &lt;/c:if&gt;&lt;%--无else语句 只有条件语句的if--%&gt;&lt;%--引出多路判断--%&gt;        &lt;%            request.setAttribute("height",178);        %&gt;&lt;%--相当于switch case default--%&gt;&lt;%--when 相当于每一种if语句 choose是提供多种选择--%&gt;&lt;%--    1. when标签的父标签一定是choose (在嵌套的时候）    2. jstl标签当中不允许出现html标签注释 用jsp注释标签就OK——说明jstl标签无法包含html标签    3. html标签可以内嵌jstl标签--%&gt;        &lt;c:choose&gt;            &lt;c:when test="${requestScope.height&gt;190}"&gt;                &lt;h2&gt;小巨人&lt;/h2&gt;            &lt;/c:when&gt;            &lt;c:when test="${requestScope.height&gt;180}"&gt;                &lt;h1&gt;很高&lt;/h1&gt;            &lt;/c:when&gt;            &lt;c:when test="${requestScope.height&gt;170}"&gt;                &lt;h2&gt;还可以&lt;/h2&gt;            &lt;/c:when&gt;            &lt;c:otherwise&gt;                &lt;h2&gt;剩下的是小于170的情况&lt;/h2&gt;            &lt;/c:otherwise&gt;        &lt;/c:choose&gt;&lt;hr&gt;&lt;%--遍历单个输出--%&gt;    &lt;c:forEach begin="1" end="10" var="i"&gt;        ${i}    &lt;/c:forEach&gt;&lt;hr&gt;&lt;%--遍历Object数组--%&gt;&lt;%    request.setAttribute("arr",            new String[]{"14754856065",                    "14754856075",                    "13723613445",                    "18319310418"});%&gt;&lt;%--    相当于java 中的 for(Object item:arr)--%&gt;&lt;c:forEach items="${requestScope.arr}" var="item"&gt;    &lt;h1&gt;        ${item}    &lt;/h1&gt;&lt;/c:forEach&gt;&lt;%        Map&lt;String ,Object&gt; map=new HashMap&lt;String ,Object&gt;();        map.put("key1","value1");        map.put("key2","value2");        map.put("key3","value3");        map.put("key4","value4");        request.setAttribute("map",map);%&gt;&lt;c:forEach items="${requestScope.map}" var="entry"&gt;    &lt;h1&gt;${entry.value}&lt;/h1&gt;&lt;/c:forEach&gt;&lt;%    List&lt;Student&gt;studentList=new ArrayList&lt;Student&gt;();    for (int i = 1; i &lt;=10; i++) {        studentList.add(new Student(i,"name"+i,"pass"+i,i,"phone"+i));    }    request.setAttribute("stusList",studentList);%&gt;&lt;%--打印一行表头--%&gt;&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;id&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;密码&lt;/th&gt;        &lt;th&gt;年龄&lt;/th&gt;        &lt;th&gt;手机号码&lt;/th&gt;    &lt;/tr&gt;&lt;%--遍历循环输出--%&gt;&lt;%--    核心标签中forEach标签的属性        1. begin 起点        2. end  终点        3. step 默认步长1        4. items(遍历的对象数据源(可以是map 也可以是list)        5. var (元素对象        6. varStatus--%&gt;&lt;c:forEach begin="2" end="8" step="2"  varStatus="status" items="${requestScope.stusList}" var="stu"&gt;&lt;%--对象stu--%&gt;    &lt;tr&gt;遍历一次stu对象的信息输出        &lt;td&gt;${stu.id}&lt;/td&gt;        &lt;td&gt;${stu.name}&lt;/td&gt;        &lt;td&gt;${stu.password}&lt;/td&gt;        &lt;td&gt;${stu.age}&lt;/td&gt;        &lt;td&gt;${stu.phone}&lt;/td&gt;        &lt;td&gt;${status.last}&lt;/td&gt;&lt;%--status implements LoopTagStatus()status 实现 LoopTagStatus接口中的抽象函数如下:        1. getLast（） getEnd（） getBegin（）        2. getCurrent——String 类型        3. getCount——String 类型        4. getIndex——String 类型        5. isFirst——boolean类型        6. isLast——boolean类型--%&gt;    &lt;/tr&gt;&lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、文件上传"><a href="#四、文件上传" class="headerlink" title="四、文件上传"></a>四、文件上传</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>要有一个form标签 ，method=post(请求方式是post)</p><p>原因 ：文件上传数据比较大，get请求装不了这么多</p></li><li><p>form标签中encType属性值必须是<strong>multipart/form-data值</strong></p><p>encType=multiple/form-data表示提交的数据是以<strong>多段</strong>（每一个表单项一个数据段)形式进行拼接，然后以<strong>二进制的形式</strong>发送给服务器</p></li><li><p>在form标签中使用input type=“file” 添加上传文件</p></li><li><p>编写服务器代码 (Servlet程序)接受，处理上传数据(doPost) 同时配置好xml文件</p></li></ol><h3 id="服务器接收"><a href="#服务器接收" class="headerlink" title="服务器接收"></a>服务器接收</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//System.out.println("文件上传过来了");</span>        <span class="token comment">//以流的形式传送</span>        <span class="token class-name">ServletInputStream</span> inputStream<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>buffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token operator">=</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收如下图所示:</p><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221023135644413.png" alt="image-20221023135644413"></p><p>（乱码的形式展现)</p><h3 id="解析文件乱码"><a href="#解析文件乱码" class="headerlink" title="解析文件乱码"></a>解析文件乱码</h3><ol><li><p>导包（第三方库的API）</p><ul><li><p>comments-fileupload.jar</p></li><li><p>commons-io-jar</p></li></ul></li><li><p>常用类</p><ul><li><p>ServletFileUpload</p><ul><li><p>boolean ServletFileUpload.isMultipartContend(HttpServletRequest request)</p><p>用于判断当前上传的数据格式是否是多段的格式</p></li><li><p>public List<fileitem> parseRequest(HttpSerlvetRequest request)</fileitem></p><p>解析上传的数据(比如上传的文件)</p></li><li><p>boolean FileItem.isFormField()</p><p>判断当前这表单项，是否是<strong>普通的表单项</strong>(如：用户相关信息以表格的形式)——true，还是<strong>上传的文件类型</strong>（可以是图片，视频，文档……）——false。</p></li><li><p>String FileItem.getFilelName()</p><p>获取表单项<strong>name 属性值</strong></p></li><li><p>String FileItem.getString()</p><p>获取当前表单项的值(value)</p></li><li><p>String FileItem.getName()</p><p>获取上传的文件名</p></li><li><p>void FileItem.write(file)</p><p>将上传的文件写到参数file所指向的硬盘的位置</p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//判断上传的数据是否是多段数据(只要多段数据，才是文件上传的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">FileItemFactory</span> fileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//用于解析上传的数据 new一个 ServletFileUpload</span>            <span class="token class-name">ServletFileUpload</span> servletFileUpload<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>fileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//解析上传的数据，得到每一个表单项FileItem 然后存到list数组里面</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span>servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//循环遍历数组list 判断解析的文件哪些是普通的表单还是上传的文件</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">//打印普通表单项</span>                        <span class="token comment">// 属性名对应的值</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的name属性值:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//解决乱码问题</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的value值:"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token comment">//上传的文件</span>                        <span class="token comment">//获取普通表单属性名</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件名</span>                        <span class="token comment">//需要将上传的文件存放在文件夹里面 故需要执行存放路径</span>                        fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"G:\\"</span><span class="token operator">+</span>fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五、文件下载"><a href="#五、文件下载" class="headerlink" title="五、文件下载"></a>五、文件下载</h2><h3 id="客户端-浏览器"><a href="#客户端-浏览器" class="headerlink" title="客户端(浏览器)"></a>客户端(浏览器)</h3><ol><li>向服务器发送请求(request)，告诉服务器我要下载什么文件</li></ol><h3 id="服务器-Tomcat"><a href="#服务器-Tomcat" class="headerlink" title="服务器(Tomcat)"></a>服务器(Tomcat)</h3><ol><li>获取要下载的文件名</li><li>读取要下载的文件内容</li><li>把下载的文件内容回传到客户端</li><li>在回传前，通过<strong>响应头</strong>告诉客户端返回的数据类型</li><li>还要告诉客户端收到的数据是用于下载使用（还是<strong>通过响应头</strong>）</li></ol><p>==注意(坑)==：获取文件的路径要写对，否则会出现空指针(NullPointerException)说明按照你值得路径下无对应需要的路径。文件内容:可以是图片，视频，文档，压缩包…. </p><p>如这次：需要获取下载文件的类型(mimeType)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">//        1. 获取要下载的文件名</span>        <span class="token class-name">String</span> downLoadFileName<span class="token operator">=</span><span class="token string">"picture01.jpeg"</span><span class="token punctuation">;</span><span class="token comment">//        2. 读取要下载的文件内容（通过ServletContext对象可以获取)</span>        <span class="token class-name">ServletContext</span> servletContext<span class="token operator">=</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取要下载的文件类型</span>        <span class="token comment">//指明好文件路径 否则空指针！！java.lang.NullPointerException</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downLoadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要下载的文件类型:"</span><span class="token operator">+</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        4. 在回传前，通过**响应头**告诉客户端返回的数据类型</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        5. 还要告诉客户端收到的数据是用于下载使用（还是**通过响应头**）</span>        <span class="token comment">//Content-Disposition 响应头 表示收到的数据怎么处理</span>        <span class="token comment">// attachment 表示附件 表示下载使用</span>        <span class="token comment">// filename=表示指定下载的文件名</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span> downLoadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//"/"表示http://ip:port(端口好)/工程名 还有一个"/"表示file文件目录下的文件</span>        <span class="token comment">//否则回报——空指针(也就是路径不对) java.lang.NullPointerException！！！</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downLoadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> outputStream<span class="token operator">=</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        3. 把下载的文件内容回传到客户端</span>        <span class="token comment">// 读取输入流中该全部的数据，复制输出流 输出给客户端</span>          <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221023160644085.png" alt="image-20221023160644085"></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题解</title>
      <link href="/2022/10/20/shu-zhuang-shu-zu/"/>
      <url>/2022/10/20/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="算法思考"><a href="#算法思考" class="headerlink" title="算法思考"></a>算法思考</h1><h2 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h2><ul><li><h3 id="add-使原数组a-不断加入到tree-树状数组里头"><a href="#add-使原数组a-不断加入到tree-树状数组里头" class="headerlink" title="add()使原数组a[]不断加入到tree[]树状数组里头"></a>add()使原数组a[]不断加入到tree[]树状数组里头</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int add(){    for(int i=1;i&lt;=n;i+=i&amp;(-i)){        tree[i]+=1;//每每将数组a[]的元素加入到tree[],就可以出现一对逆序对(前提的已经离散化)    }//在add()不关心a[]元素的大小，只关心进来的a[]元素的个数 因为已经将a[]进行离散化(里面就有对大小的判断)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h3 id="ask-查询有多少个逆序对"><a href="#ask-查询有多少个逆序对" class="headerlink" title="ask() 查询有多少个逆序对"></a>ask() 查询有多少个逆序对</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//查询的结点x 然后向下找树节点求和 从而达到求得区间的数字之和int ask(int x){    for(int i=x;i&gt;0;i-=i&amp;(-i)){        sum+=tree[i];    }return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h3 id="理解什么是逆序对"><a href="#理解什么是逆序对" class="headerlink" title="理解什么是逆序对"></a>理解什么是逆序对</h3><ul><li>就是比当前数字大的数字在当前数字之前 (效果就是:一杂乱无章的一串数字转变为从大到小排列)</li><li>数学表达: ai&gt;aj,i&lt;j</li></ul></li><li><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>枚举并记录在当前数字之前的数字且比他大的个数，然后逐个累加即可求出逆序对。</p><ul><li><p>那如何求出当前比当前数字大且在他的前面呢？说装逼点就是离散化 直白点就是用结构体纪录a[]每个元素的下标 然后进行从大到小排序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//对a[]数组的结构化struct node{  int value;  int index;}a[100];int cmp(node a,node b){    if(a.value==b.value){        return a.index&gt;b.index;    }else{        return a.value&gt;b.value;//就是将大的数字放到最前面，也就是从大到小排列    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i=1;i&lt;=n;i++){    scanf("%d",a[i].value);    a[i].index=i;}sort(a+1,a+1+n);//离散化操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>然后将离散化后的数组a[]一个一个add进去tree[] 接着ask()求出区间数字之和</p><ul><li><p>那tree[]是如何实现前缀和(也就是区间之和) 其实:利用了<strong>二进制作为节点降低查找次数</strong>   用到的函数时是owbit</p></li><li><p>突然想到 你用lowbit函数运算 你会发现一堆数据会变得很少 下标为奇数的数据变成树节点t[] 你看这就让数据少了一半！！！</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int lowbit(int i){    return i&amp;(-i);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li><li><h3 id="树状数组模型"><a href="#树状数组模型" class="headerlink" title="树状数组模型"></a>树状数组模型</h3><p><img src="F:\20210703105626218.png" alt="Alt"></p><ul><li><p>函数lowbit(）我们可以知道  </p><ul><li>lowbit(1)=1</li><li>lowbit(3)=1</li><li>lowbit(5)=1</li><li>lowbit(7)=1</li></ul><p><strong>tip：补充一下&amp;(此为按位与运算符) 运算规则:同为1则为1 其他情况则为0 如:6的二进制数:110，(-6)的二进制数:110 那么(-6)&amp;6==2 再补充一下 负数的二进制是正数的反码+1</strong></p><p>结合上图也可以知道 下标为<strong>奇数</strong>成为树节点t [  ]</p><p>结合此题(逆序对) 所以循环一次add数组a[]中的每一个元素，都只能由下标为奇数的元素成为第一层的树节点 </p><p>也就是如上图所示 t[1]  t[3]   t[5]  t[7]奇数树节点</p><p>由树状数组的结构可以看出 运用双重for循环即可   add内部一个for循环 还一个是main函数中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i=1;i&lt;=n;i++){    add();    ans+=ask(a[i].index);}//双重循环一层层堆叠成树状数组！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>此总结感悟灵感来源于下面博客链接</p><p><a href="https://blog.csdn.net/TheWayForDream/article/details/118436732">树状数组</a></p><p>反思:</p><ol><li>为什么这道题逆序对可以跟树状数组联系在一起？<ul><li>你仔细想想 这道题就是让我们在从大到小的数组里面找逆序对 只要纪录当前数字有几个与他成为逆序对==<strong>a[ i ] .index</strong>(可通过<strong>离散化</strong>得出有多个比当前数字大且在他的前面)</li><li>然后靠树状数组（阉割版的二叉树）的特性 直接累加即可 得出答案</li></ul></li></ol><h1 id="【模板】快速幂-取余运算"><a href="#【模板】快速幂-取余运算" class="headerlink" title="【模板】快速幂||取余运算"></a>【模板】快速幂||取余运算</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你三个整数 $a,b,p$，求 $a^b \bmod p$。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行三个整数，分别代表 $a,b,p$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个字符串 <code>a^b mod p=s</code>，其中 $a,b,p$ 分别为题目给定的值， $s$ 为运算结果。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><pre class="line-numbers language-none"><code class="language-none">2 10 9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><pre class="line-numbers language-none"><code class="language-none">2^10 mod 9=7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>样例解释</strong></p><p>$2^{10} = 1024$，$1024 \bmod 9 = 7$。</p><p><strong>数据规模与约定</strong></p><p>对于 $100%$ 的数据，保证 $0\le a,b &lt; 2^{31}$，$a+b&gt;0$，$2 \leq p \lt 2^{31}$。</p><hr><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="1-暴力解法-蒟蒻的我第一时间想到"><a href="#1-暴力解法-蒟蒻的我第一时间想到" class="headerlink" title="1. 暴力解法(蒟蒻的我第一时间想到)"></a>1. 暴力解法(蒟蒻的我第一时间想到)</h2><ul><li><h3 id="时间复杂度-O-N"><a href="#时间复杂度-O-N" class="headerlink" title="时间复杂度(O(N))"></a>时间复杂度(O(N))</h3><p>当数据一大时，直接TLE</p></li><li><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;int a,b,p;int main(){    long long ans=1;    scanf("%d%d%d",&amp;a,&amp;b,&amp;p);    //一个一个遍历 超时的根本原因所在    for(int i=1;i&lt;=b;i++){       ans=(ans*a)%p;    }ans=ans%p;    printf("%d^%d mod %d=%lld",a,b,p,ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h3></li></ul><p><img src="C:\Users\de'l'l\AppData\Roaming\Typora\typora-user-images\image-20221005120450411.png" alt="image-20221005120450411"></p><p>故意引出==快速幂方法==</p><h2 id="2-快速幂"><a href="#2-快速幂" class="headerlink" title="2. 快速幂"></a>2. 快速幂</h2><ul><li><h3 id="时间复杂度-log2N"><a href="#时间复杂度-log2N" class="headerlink" title="时间复杂度(log2N)"></a>时间复杂度(log<del>2</del>N)</h3><p>直接就降维打击了好吧 快的一批(doge)</p></li><li><h3 id="代码呈现"><a href="#代码呈现" class="headerlink" title="代码呈现"></a>代码呈现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;int a,b,p;long long quickPower(int a,int b){    //int ans=1;    long long ans=1;    long long base=a;//底数是a    while(b&gt;0){        //二进制的按位与运算符(&amp;)        if(b&amp;1){//            ans*=base;//            ans%=p;            ans=(ans%p*base%p)%p;        }//        base*=base;//        base%=p;        base=(base%p*base%p)%p;        b=b&gt;&gt;1;//位运算，b右移一位(也可以这么写 b&gt;&gt;=1)    }    return ans;}int main(){    long long ans=1;    scanf("%d%d%d",&amp;a,&amp;b,&amp;p);    ans=(quickPower(a,b))%p;//    for(int i=1;i&lt;=b;i++){//        ans*=a;//    }ans=ans%p;    printf("%d^%d mod %d=%lld",a,b,p,ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>为什么可以降到对数级别的时间复杂度？</p></li><li><p>为什么要用按或与(&amp;)运算符合位运算(&gt;&gt;)?</p></li><li><p>这道题和上一道的题都运用到了二进制数 有什么联系吗？</p><ul><li><p>解决问题</p><ol><li><p>首先看看两者的运算过程 举个例子</p><p>前者暴力算法 如果要计算 2^11^ 就得要一次一次遍历 一共遍历11次</p><p>后者就利用了二进制的巧妙  将 2^11^=2^8^<em>2^2^</em>2^1^(2^0^)     你看这就直接将11次变成了3+1次(包括2^0^)</p></li><li><p>其实看时间复杂度 是以2为底的对数运算 说明这是以二进制进行运算的</p></li><li><p>那如何判断是否有这些指数呢(8,2,1) 那就根据11的二进制数来决定的</p><ul><li><p>(11)<del>10</del>=(1011)<del>2</del> 快数计算二进制数转十进制 依靠”8421”法则</p><table><thead><tr><th align="center">二进制数:</th><th>1</th><th>0</th><th>1</th><th>1</th></tr></thead><tbody><tr><td align="center"><strong>十进制数:</strong> 8+2+1=11</td><td><strong>8</strong></td><td><strong>4</strong></td><td><strong>2</strong></td><td><strong>1</strong></td></tr></tbody></table></li><li><p>压力就给到了如何判断有无零一了 有请出 <strong>按位与</strong>运算</p><p>按位与运算规则 举例</p><p>(1)<del>10</del>=(0001)<del>2</del></p><p>(11)<del>10</del>=(1011)<del>2</del></p><p>0 0 0 1</p><p>1 0 1 1</p><p>————</p><p>0 0 0 1</p><p>规则:同一为一，其余情况均为零</p><p>那如何继续判断下一位的二进制数呢？这就靠位运算</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int b;//b是指数if(b&amp;1){    ....}//结果要么是1要么是0    //判断结束当前二进制数位置时，进军下一位b&gt;&gt;=1;//二进制数向右移一位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>核心代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long long quickPower(int a,int b){//底数a 指数b    long long ans=1;    int base=a;    while(b!=0){        if(b&amp;1)        ans*=base;//取模运算我就先不写 就先这样写        else{            base*=base;//自乘            b&gt;&gt;=1;        }    }return ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul></li></ol></li></ul><h2 id="KMP算法——菜鸟思考版"><a href="#KMP算法——菜鸟思考版" class="headerlink" title="KMP算法——菜鸟思考版"></a>KMP算法——菜鸟思考版</h2><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>来自于两个字符串之间的匹配问题，一个是主串s1，另一个是模式串s2</p><h3 id="解题方法-一-暴力求解"><a href="#解题方法-一-暴力求解" class="headerlink" title="解题方法(一):暴力求解"></a>解题方法(一):暴力求解</h3><ul><li>指针i指向主串，j指向模式串，各自在自个的串中从零开始进行配对，即是判断s1[i]是否与s2[j]配对，当发生不匹配时，<strong>j要得回溯</strong>(即从零开始)，i则变为回溯的次数(就比如:<strong>第一次</strong>发生不匹配，也就是<strong>第一次</strong>往前跳，那么i从发生不匹配的下标数变为<strong>1</strong>)。</li><li>暴力就在于每发生一次不匹配，j就得回溯，指向模式串的开头，使得<strong>时间复杂度为O(M*N)</strong>[假如s1长度为M，s2的长度为N]</li></ul><p>==思考==：有没有一种可以让j不用一步一步（就是担心走好几步会错过与主串匹配，所以才一步一步）往后走，可以让j走好几步，同时又不会错过与主串(s1)匹配的方法，这就要引进kmp算法啦！</p><h3 id="解题方法-二-kmp算法"><a href="#解题方法-二-kmp算法" class="headerlink" title="解题方法(二):kmp算法"></a>解题方法(二):kmp算法</h3><p>kmp算法可以让模式串不用每次都是“往前走一步”，而是可以“往前走好几步”，这就需要借助==next数组==。前提我们已经知道next数组，所以这里先讲讲kmp算法的匹配原理。</p><ul><li><p>首先，我们想想使用kmp算法是什么时候，是不是模式串和主串发生了不匹配的时候？那么在当前发生不匹配的位置的前面不就是已经匹配成功了的字符串。这时，按照暴力算法，j就得回溯，从零开始。而这时，按照kmp算法，j就可以按照next数组进行往前”跳”。<strong>j</strong>“往前跳到”模式串最长公共前后缀的下一位，就是**next[j]**。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> MainString<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> TestString <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>MainString<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>MainString<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>TestString<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>是不是就有一个疑问，为什么模式串往后移几步，不怕遗漏可以匹配的位置呢？</p><p>答：我们借助<strong>反证法</strong></p><p><img src="https://img-blog.csdnimg.cn/5fb53820037f4252b8542bd3b1902c08.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a6H5pm65rOi6Jek5Y6f,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li></ul><p>i表示公共前缀的第一个元素，j表示公共后缀的第一个元素，假如我跟你说模式串跳到下标为k的位置，就可以完成匹配。</p><p><strong>因为假设告诉你，从k开始可以实现s2的匹配，所以必然有</strong>k~x-1的长度的内容必然和S2中从0开始等长度的内容是一致的(如果这一段都不一致，后面怎么可能是匹配的嘛)，也就是黄色框内的内容。即<strong>S1黄=S2黄</strong>。这样会出现什么问题？因为绿色的内容是表示匹配，所以会出现：</p><p><img src="https://img-blog.csdnimg.cn/4d17a26e08ab44d086676d531d30eddf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a6H5pm65rOi6Jek5Y6f,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>从原先最长公共前后缀(三个)变成了五个，明显矛盾了！所以这就说明下标i~j中不可能出现某个位置实现S1对S2的匹配，那么自然为什么可以直接从j位置开始匹配的原因。</p><h3 id="如何求解next数组捏？"><a href="#如何求解next数组捏？" class="headerlink" title="如何求解next数组捏？"></a>如何求解next数组捏？</h3><p>本质:就是求出当前位置的前面长度为几的公共前后缀。</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">a</th><th align="center">c</th><th align="center">a</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">1</td></tr></tbody></table><p>认为设定next[1]=0,next数组从零1始</p><p>next[2]=1表示当前下标为2的数组<strong>前</strong>有长度为<strong>零</strong>(1-1)的公共前后缀。</p><p>next[3]=1同理。</p><p>next[4]=2表示当前下标为4的数组<strong>前</strong>有长度为<strong>一</strong>(2-1)的公共前后缀。</p><ul><li>上代码演示</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> TestString <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//因为i是不断往前走，不受影响的，故用i来表示目前匹配长度(包括已经匹配好的和为匹配成功的)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>TestString<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>TestString<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//i是不断往前走，不受影响的</span>            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//j会受到不匹配而受到波动，变化是通过next数组来的</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//遇到当前位置不匹配</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//往前跳，而不是回溯</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汇总:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> TestString<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>TestString<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>TestString<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> MainStirng<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> TestString<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>MainString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>MainString<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>TestString<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span>TestString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的正则表达式集合</title>
      <link href="/2022/08/25/dai-ma-kuai-yan-shi/chang-yong-zheng-ze-biao-da-shi/"/>
      <url>/2022/08/25/dai-ma-kuai-yan-shi/chang-yong-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整数或者小数：^[0-9]+.{0,1}[0-9]{0,2}$<br>只能输入数字：”^[0-9]<em>$”<br>只能输入n位的数字：”^\d{n}$”<br>只能输入至少n位的数字：”^\d{n,}$”<br>只能输入m~n位的数字：”^\d{m,n}$”<br>只能输入零和非零开头的数字：”^(0|[1-9][0-9]</em>)$”。<br>只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。<br>只能输入有1<del>3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。<br>只能输入非零的正整数：”^+?[1-9][0-9]<em>$”。<br>只能输入非零的负整数：”^-[1-9][]0-9″</em>$。<br>只能输入长度为3的字符：”^.{3}$”。<br>只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>只能输入由数字和26个英文字母组成的字符串：”^[A-Za-z0-9]+$”。<br>只能输入由数字、26个英文字母或者下划线组成的字符串：”^\w+$”。<br>验证用户密码：”^[a-zA-Z]\w{5,17}$”<br>正确格式为：以字母开头，长度在6</del>18之间，只能包含字符、数字和下划线。验证是否含有^%&amp;’,;=?$\”等字符：”[^%&amp;’,;=?$\x22]+”。<br>只能输入汉字：”^[\u4e00-\u9fa5]{0,}$”<br>验证Email地址：”^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$”。<br>验证InternetURL：”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]</em>)?$”。<br>验证电话号码：”^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$”<br>正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。<br>验证身份证号（15位或18位数字）：”^\d{15}|\d{18}$”。<br>验证一年的12个月：”^(0?[1-9]|1[0-2])$”<br>正确格式为：”01″～”09″和”1″～”12″。<br>验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”<br>正确格式为；”01″～”09″和”1″～”31″。<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）String.prototype.len=function(){return this.replace(/[^\x00-\xff]/g,”aa”).length;}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配html标签的正则表达式：&lt;(.*)&gt;(.</em>)&lt;/(.<em>)&gt;|&lt;(.*)/&gt;<br>匹配首尾空格的正则表达式：(^\s</em>)|(\s*$)<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>利用正则表达式分解和转换IP地址：<br>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：<br>function IP2V(ip){re=/(\d+).(\d+).(\d+).(\d+)/g //匹配IP地址的正则表达式<br>if(re.test(ip)){return RegExp.$1<em>Math.pow(255,3))+RegExp.$2</em>Math.pow(255,2))+RegExp.$3<em>255+RegExp.$4</em>1}else{throw new Error(“Not a valid IP address!”)}}</p><p>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：<br>var ip=”10.100.20.168″ip=ip.split(“.”)alert(“IP值是：”+(ip[0]<em>255</em>255<em>255+ip[1]<em>255</em>255+ip[2]<em>255+ip[3]<em>1))<br>匹配Email地址的正则表达式：\w+([-+.]\w+)</em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]</em>)?<br>利用正则表达式限制网页表单里的文本框输入内容：<br>用正则表达式限制只能输入中文：onkeyup=”value=value.replace(/[^\u4E00-\u9FA5]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\u4E00-\u9FA5]/g,”))”<br>用正则表达式限制只能输入全角字符： onkeyup=”value=value.replace(/[^\uFF00-\uFFFF]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\uFF00-\uFFFF]/g,”))”<br>用正则表达式限制只能输入数字：onkeyup=”value=value.replace(/[^\d]/g,”) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>用正则表达式限制只能输入数字和英文：onkeyup=”value=value.replace(/[\W]/g,”) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>评注：匹配中文还真是个头疼的事，有了这个表达式就好办了匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）匹配空白行的正则表达式：\n\s</em>\r<br>评注：可以用来删除空白行匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?|&lt;.<em>? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力匹配首尾空白字符的正则表达式：^\s</em>|\s*$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>评注：表单验证时很实用匹配网址URL的正则表达式：[a-zA-z]+://[^\s]</em><br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}评注：匹配形式如 0511-4405222 或 021-87888822匹配腾讯QQ号：[1-9][0-9]{4,}<br>评注：腾讯QQ号从10000开始匹配中国邮政编码：[1-9]\d{5}(?!\d)<br>评注：中国邮政编码为6位数字匹配身份证：\d{15}|\d{18}<br>评注：中国的身份证为15位或18位匹配ip地址：\d+.\d+.\d+.\d+<br>评注：提取ip地址时有用匹配特定数字：^[1-9]\d*$<br>//匹配正整数^-[1-9]\d*$<br>//匹配负整数^-?[1-9]\d*$<br>//匹配整数^[1-9]\d*|0$<br>//匹配非负整数（正整数 + 0）^-[1-9]\d*|0$<br>//匹配非正整数（负整数 + 0）^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$<br>//匹配正浮点数^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$<br>//匹配负浮点数^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$<br>//匹配浮点数^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$<br>//匹配非负浮点数（正浮点数 + 0）^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）评注：处理大量数据时有用，具体应用时注意修正匹配特定字符串：^[A-Za-z]+$<br>//匹配由26个英文字母组成的字符串^[A-Z]+$<br>//匹配由26个英文字母的大写组成的字符串^[a-z]+$<br>//匹配由26个英文字母的小写组成的字符串^[A-Za-z0-9]+$<br>//匹配由数字和26个英文字母组成的字符串^\w+$<br>//匹配由数字、26个英文字母或者下划线组成的字符串评注：最基本也是最常用的一些表达式整理出来的一些常用的正则表达式 所属分类: JScript<br>(三)<br>Email : /^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$/<br>isEmail1 : /^\w+([.-]\w+)<em>@\w+([.-]\w+)<em>.\w+$/;<br>isEmail2 : /^.</em>@[^_]</em>$/;<br>Phone : /^(((\d{3}))|(\d{3}-))?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}$/<br>Mobile : /^(((\d{3}))|(\d{3}-))?13\d{9}$/<br>Url : /^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;_~`@[]\’:+!]</em>([^&lt;&gt;""])<em>$/<br>IdCard : /^\d{15}(\d{2}[A-Za-z0-9])?$/<br>Currency : /^\d+(.\d+)?$/<br>Number : /^\d+$/<br>Code : /^[1-9]\d{5}$/<br>QQ : /^[1-9]\d{4,8}$/<br>Integer : /^[-+]?\d+$/<br>Double : /^[-+]?\d+(.\d+)?$/<br>English : /^[A-Za-z]+$/<br>Chinese : /^[\u0391-\uFFE5]+$/<br>UnSafe : /^(([A-Z]</em>|[a-z]<em>|\d</em>|[-_~!@#$%^&amp;*.()[]{}&lt;&gt;?\/\’\”]*)|.{0,5})$|\s/<br>PassWord :^[\w]{6,12}$<br>ZipCode : ^[\d]{6}/^(+\d+ )?((\d+) )?[\d ]+$/;</p><p>//这个是国际通用的电话号码判断/^(1[0-2]\d|\d{1,2})$/;<br>//这个是年龄的判断/^\d+.\d{2}$/;<br>//这个是判断输入的是否为货币值<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）String.prototype.len=function(){return this.replace([^\x00-\xff]/g,”aa”).length;}<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配HTML标记的正则表达式：/&lt;(.*)&gt;.</em>&lt;/\1&gt;|&lt;(.<em>) /&gt;/<br>匹配首尾空格的正则表达式：(^\s</em>)|(\s*$)<br>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]</em>)?^\d+$　　//<br>匹配非负整数（正整数 + 0）^[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配正整数^((-\d+)|(0+))$　　//<br>匹配非正整数（负整数 + 0）^-[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配负整数^-?\d+$　　　　//<br>匹配整数^\d+(.\d+)?$　　//<br>匹配非负浮点数（正浮点数 + 0）^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$　//<br>匹配正浮点数^((-\d+(.\d+)?)|(0+(.0+)?))$　　//<br>匹配非正浮点数（负浮点数 + 0）^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$ //<br>匹配负浮点数^(-?\d+)(.\d+)?$</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb学习笔记</title>
      <link href="/2022/08/18/javaweb-xue-xi-bi-ji/"/>
      <url>/2022/08/18/javaweb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JAVA-WEB"><a href="#JAVA-WEB" class="headerlink" title="JAVA WEB"></a>JAVA WEB</h1><ul><li><h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><ol><li>概念：Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web<strong>服务端</strong>和web<strong>客户端</strong>两部分。(B/S或者C/S)</li><li>WEB分类：<strong>动态WEB资源</strong>(指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同。);<strong>静态WEB资源</strong>(指web页面中供人们浏览的数据始终是不变。)。</li><li>开发技术: <strong>HTML、CSS</strong>(静态web资源开发)；<strong>JavaScript</strong>、JSP/Servlet、ASP、PHP(动态web资源开发)。</li></ol></li><li><h1 id="前端开发三件套"><a href="#前端开发三件套" class="headerlink" title="前端开发三件套"></a>前端开发三件套</h1><blockquote><h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h2><ol><li><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍 "></a>介绍 <br></h3>   <pre class="line-numbers language-none"><code class="language-none">用于处理文字，画面排版，图片显示等作用的标记性语言<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h3 id="HTML文件固定书写格式"><a href="#HTML文件固定书写格式" class="headerlink" title="HTML文件固定书写格式"></a>HTML文件固定书写格式</h3></li></ol></blockquote> <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;!--html页面的开始--&gt;   &lt;head&gt;&lt;!--头标题的开始--&gt;      &lt;title&gt;标签&lt;/title&gt;   &lt;/head&gt;&lt;!--头标题的结束--&gt;   &lt;body&gt;&lt;!--主题内容的开始--&gt;      .....&lt;!--页面主题内容--&gt;   &lt;/body&gt;&lt;!--主题内容的结束--&gt;&lt;/html&gt;&lt;!--html页面的结束--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="3"><li><h3 id="HTML标签介绍"><a href="#HTML标签介绍" class="headerlink" title="HTML标签介绍"></a>HTML标签介绍</h3><blockquote><ul><li>标签格式 <blockquote><p>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</p></blockquote></li><li>标签名对大小写不敏感</li><li>标签属性<blockquote><ol><li>基本属性 如：&lt; body bgcolor=”red”&gt;&lt; /body&gt;</li><li>事件属性 如：&lt; button onclick=”alert(‘hello,world’)”&gt;&lt; /button&gt;</li></ol></blockquote></li><li>标签种类<blockquote><ol><li>单标签：&lt;标签名/&gt; 如：&lt; br/&gt;换行 &lt; hr/&gt;分隔符</li><li>双标签：&lt;标签名&gt;封装数据&lt;/标签名&gt; 如：&lt; body &gt;&lt; /body &gt;</li></ol></blockquote></li><li>标签语法<blockquote><ol><li>标签不能交叉嵌套</li><li>标签必须完整(双标签必须成对出现,单标签必须完整(&lt; br/&gt;))</li><li>属性赋值必须要带双引号 “”</li></ol></blockquote></li></ul></blockquote></li><li><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><blockquote><ul><li>font标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;font color="red" face="宋体" size=5&gt;我是字体标签&lt;/font&gt;&lt;!--   &gt;&gt; 1. font标签(基本属性)       1. size (1~7)       2. face (字体样式)       3. color   --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>标题标签(&lt; h1&gt;标题内容&lt; /h&gt;)<blockquote><ol><li>h1~h6</li><li>align=”left”/“right”/“center”(对齐属性)</li></ol></blockquote></li><li>超链接标签(<a></a>) <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;a href="https://www.baidu.com"&gt;百度&lt;/a&gt;         &lt;!--             基本属性               1. href 存放地址 如:https://www.baidu.com               2. target: _shelf / _blank               3. 列表标签(无序列表/有序列表)         --&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>(无序/有序)列表标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;ul&gt;&lt;!--无序列表的标签 u表示乱序--&gt;            &lt;li&gt;小文&lt;/li&gt;&lt;!--li表示list item--&gt;&lt;!--li表示列表项--&gt;            &lt;li&gt;小红&lt;/li&gt;            &lt;li&gt;小君&lt;/li&gt;            &lt;li&gt;小名&lt;/li&gt;         &lt;/ul&gt;         &lt;ol&gt;&lt;!--有序列表的标签--&gt;&lt;!--o表示order--&gt;            &lt;li&gt;小文&lt;/li&gt;&lt;!--li表示list item--&gt;            &lt;li&gt;小红&lt;/li&gt;            &lt;li&gt;小君&lt;/li&gt;            &lt;li&gt;小名&lt;/li&gt;         &lt;/ol&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>图片标签  (单标签) <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;!--         基本属性            1.src=""设置图片路径            2.width            3.height            4.boder(边框)         web接受路径有两个            1.相对路径：               . 表示当前文件所在的目录               .. 表示当前文件夹上一级的目录               文件名 表示当前文件所在目录的文件 .文件名/ (可以省略)            2.绝对路径               正确格式:https://ip:port/工程名/资源路径         --&gt;         &lt;img src="../img/landscape_sky2.jpg" width="100" height="200" boder="1"/&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>表格标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;!--            table 是表格标签               1.align 对齐属性               2.width               3.height               4.boder                 5.ceilspacing 单元格间距            tr 表示行标签            th 表示头标签 默认居中               1.colspan 跨行               2.rowspan 跨列            td 表示单元格标签               1.colspan 跨行               2.rowspan 跨列         --&gt;         &lt;table border="1" width="500" height="500" ceilspacing="0"&gt;            &lt;tr&gt;               &lt;th colspan="2"&gt;1.1&lt;/th&gt;                              &lt;th&gt;1.3&lt;/th&gt;               &lt;th&gt;1.4&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;               &lt;th&gt;2.1&lt;/th&gt;               &lt;th&gt;2.2&lt;/th&gt;               &lt;th&gt;2.3&lt;/th&gt;               &lt;th&gt;2.4&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;               &lt;th&gt;3.1&lt;/th&gt;               &lt;th&gt;3.2&lt;/th&gt;               &lt;th&gt;3.3&lt;/th&gt;               &lt;th&gt;3.4&lt;/th&gt;            &lt;/tr&gt;         &lt;/table&gt;      &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>iframe标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;      &lt;head&gt;         &lt;title&gt;百度&lt;/title&gt;         &lt;body&gt;            &lt;!--iframe独立生成一个页面--&gt;            &lt;!--iframe和a标签的应用--&gt;            &lt;!--               1.给iframe命名，给静态资源链接(src)               2.给超文本(href)标签a提供跳转目标target，target与name同名               --&gt;            &lt;iframe src="../img/landscape.jmg" width="500" height="500" name="..."&gt;&lt;/iframe&gt;               &lt;ul&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;               &lt;/ul&gt;         &lt;/body&gt;      &lt;/head&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>其他标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--    1.div标签 用来“独占一行”   2.span标签 用来“封装数据的长度”   3.p标签 用来“默认在段落的上方或下方空出一行”--&gt;   &lt;div&gt;标签1&lt;/div&gt;   &lt;span&gt;标签2&lt;/span&gt;   &lt;p&gt;标签3&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></li></ol><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h2><blockquote><ul><li><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍 "></a>介绍 <br></h3><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 层叠样式表（CSS）是一种用来表现HTML或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。2. CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。3. 简单来说：css可以更好地丰富网页设计，常常和HTML一起“合作”，增添页面的表现力，同时告诉浏览器，这段样式将应用到哪个对象.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre></li><li><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构 "></a>语法结构 <br></h3> <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">选择器名{   属性：值;//类似于字典键值对,一一对应的映射属性}选择器：浏览器根据选择器决定受css样式影响HTML元素(标签)属性：是你要改变的样式名 被花括号包围 用冒号':'来连接属性和值 形成类似于字典的映射结构多个声明：用分号隔开(便于代码阅读)h1 {  color : red ;  font-size : 16px ;/*px表示像素*/  width : 150px ;  height : 50px ;  border-bottom :  1px  solid  #333 ;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-CSS与HTML的结合方式"><a href="#3-CSS与HTML的结合方式" class="headerlink" title="3. CSS与HTML的结合方式"></a>3. CSS与HTML的结合方式</h3><blockquote><ul><li>内连样式 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;body&gt;&lt;img src="..." width="250" height="163" alt="..."style="border: 4px solid red" /&gt;&lt;/body&gt;/*  1. 一旦标签和样式多了起来，代码冗长且不宜阅读 2. 复用性差      */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>嵌入样式 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;   &lt;head&gt;      &lt;meta charset="utf-8" /&gt;      &lt;title&gt;页面的标题&lt;/title&gt;      /*用style标签定义内部样式块对象*/      /*type="text/css"表示书写内容为css代码*/      &lt;style type="text/css"&gt;         /*下面的style是重点！！！*/         /*在head标签中，用style标签定义自己所需要的css样式 然后在body标签内直接调用 从而提高了代码的复用性*/         /*            缺点：只能在同一个页面进行复用，依然复用性不高         */         /*标签选择器*/         img{            border: 4px solid red;         }      &lt;/style&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外连样式(首选) <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">/* 独立创建一个.css文件 然后在HTML文件中用link标签进行调用*/&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;   &lt;head&gt;      &lt;meta charset="utf-8" /&gt;      &lt;title&gt;页面的标题&lt;/title&gt;      /*下面这行是重点！！！*/      /* 专门一个css文件 然后根据文件路径进行调用*/      &lt;link rel="stylesheet" type="text/css" href="自定义css文件名.css" /&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><h3 id="选择器种类"><a href="#选择器种类" class="headerlink" title="选择器种类"></a>选择器种类</h3></li></ol><ul><li>标签名选择器(应用于内嵌样式和外联样式) <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;      /*类似于java中的重写override方法*/         div{            border: 1px solid yellow ;            font-size: 18;            color: blue;         }/*标签名选择器 div*/      &lt;/style&gt;   &lt;/head&gt;   &lt;body&gt;      ...      &lt;div&gt;title one&lt;/div&gt;   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>id选择器 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         #id001{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div id="id001"&gt;标题&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>class类型选择器 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         .class01{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div class="class01"&gt;标题&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></blockquote></blockquote><h4 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:<br></h4><p> <strong>ID选择器</strong>和<strong>CLASS选择器</strong>的区别：<br></p><ol><li>一个HTML标签只能应用于一个ID选择器(唯一性)</li><li>一个HTML标签可以应用多个CLASS选择器</li><li>ID选择器是以“#”开头，并且只能在单个元素使用</li><li>CLASS选择器是以“.”开头，可以多个元素应用，中间用“，”隔开</li></ol><blockquote><blockquote><blockquote><ul><li>组合选择器<br><br> 废话不多说直接上代码演示<br> <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         #id001,.class01{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div class="class01"&gt;标题&lt;/div&gt;         &lt;div id="id001"&gt;标题2&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></blockquote><h2 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3. JavaScript"></a>3. JavaScript</h2><blockquote><ul><li><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍<br></h3>  <pre class="line-numbers language-none"><code class="language-none">1. JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言，也是一门事件驱动型的编程语言，依靠事件驱动，然后执行对应的程序。2. 它是作为开发Web页面的脚本语言.3. JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><h3 id="JavaScript与HTML结合方式"><a href="#JavaScript与HTML结合方式" class="headerlink" title="JavaScript与HTML结合方式"></a>JavaScript与HTML结合方式</h3><blockquote><ol><li>嵌入样式 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;script type="text/javascript"&gt;      alert("hello JavaScript");//JavaScript提供的一个警告框函数，可以接受任意参数      &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外连样式 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;script type="text/javascript"src="文件名.js"&gt;//提高代码复用率      &lt;/script&gt;//单独创建一个.js文件 同理于css外连样式写法   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote></li></ul></blockquote></blockquote><h4 id="tips：-外连样式和嵌入样式可以组合使用，但不能嵌套使用。"><a href="#tips：-外连样式和嵌入样式可以组合使用，但不能嵌套使用。" class="headerlink" title="tips： 外连样式和嵌入样式可以组合使用，但不能嵌套使用。"></a>tips： 外连样式和嵌入样式可以组合使用，但不能嵌套使用。</h4><blockquote><blockquote><ul><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法<br></h3><blockquote><h4 id="1-变量-类型-x2F-值-x2F-定义格式"><a href="#1-变量-类型-x2F-值-x2F-定义格式" class="headerlink" title="1. 变量(类型/值/定义格式)"></a>1. 变量(类型/值/定义格式)</h4><pre><code> <pre class="line-numbers language-none"><code class="language-none">         1. 数值类型          number         2. 字符串类型        string         3. 对象类型          object         4. 布尔类型          boolean         5. 函数类型          function---         1. undefined         为初始化赋值的变量         2. null              空值         3. NAN(Not a Number) 非数值，非数字---         var 变量名;         变量名=值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;    &lt;script type="text/javascript"&gt;      var i;      i=12;      alert(typeof(i));//typeof()是JavaScript提供的一个检验类型的函数   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   ....   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h4><blockquote><ul><li>关系运算符<br><br> 使用 <strong>==</strong> 来做相等运算时，当使用==来比较两个值时，<strong>如果值的类型不同，则会自动进行类型转换</strong>，将其转换为相同的类型，然后在比较<br> 使用 <strong>===</strong> 来做全等运算<br> 用来判断两个值<strong>是否全等</strong>，它和相等类似，<strong>不同的是它不会做自动的类型转换</strong>，如果两个值的类型不同，直接返回false</li><li>逻辑运算符<br><ol><li>且运算            &amp;&amp;</li><li>或运算            ||</li><li>取反运算          ！<br>  遵循短路原则(即在且运算中，双真才真;在或运算中,一真即真)</li></ol></li></ul></blockquote><h4 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h4></blockquote></li></ul></blockquote></blockquote><ul><li>定义格式<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;    &lt;head&gt;    &lt;title&gt;标题&lt;/title&gt;     &lt;script type="text/javascript"&gt;       var arr=[];//定义一个空数组 故arr.length的数值为0       arr[0]=123;       alert(arr.length);//数值为1       arr[2]="afdsa";       alert(arr.length);//数值为3       //以上JavaScript代码结果说明数组会根据最大的下标进行自动扩容    &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;    ....    &lt;/body&gt; &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><blockquote><h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4></blockquote></blockquote></blockquote></li><li>定义格式(两种) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;function 函数名(形参列表){//关键字function构建函数   函数体;}函数名();//函数调用function 函数名2(a,b){//形参列表中的形参不需要带var，直接变量名即可   return a+b;}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;var 函数名=function(形参列表){   函数体;}函数名();//调用&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="tips-在js中不允许重载-后一项函数会覆盖前一项的函数。"><a href="#tips-在js中不允许重载-后一项函数会覆盖前一项的函数。" class="headerlink" title="tips:在js中不允许重载,后一项函数会覆盖前一项的函数。"></a>tips:在js中不允许重载,后一项函数会覆盖前一项的函数。</h4><ul><li><p>函数的隐形参数——arguments<br><br>  在function函数中不需要定义，但却可以直接获取所有参数的变量</p> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function fun1()   {      for(var i=0;i&lt;arguments.length;i++){         alert(arguments[i]);      }   }   fun1(1,2,"abs");   function sum(){      var result=0;      for(var j=0;j&lt;arguments.length;j++){         result+=arguments[j];      }return result;   }   sum(1,2,3,4,5,6,7,70);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><blockquote><blockquote><h4 id="5-对象"><a href="#5-对象" class="headerlink" title="5. 对象"></a>5. 对象</h4></blockquote></blockquote></blockquote><ul><li>定义格式(两种) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;   &lt;script type="text/javascript"&gt;      var obj=new Object();//对象=属性+方法      obj.age=20;//属性      obj.name="hjy";      obj.fun=funtion(){//方法      alert("年龄："+this.age+"姓名："+this.name);      }      alert(obj.name);      //alert(obj.fun());      obj.fun();   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   &lt;/body&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;   &lt;script type="text/javascript"&gt;      var obj={//obj对象名         name: "hjy",//用逗号隔开！！！         age: 20,         fun1:funtion(){//fun1函数名            alert("what the fuck?!")         }//最后一个不用标点      }   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   &lt;/body&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><blockquote><h4 id="6-js的事件"><a href="#6-js的事件" class="headerlink" title="6. js的事件"></a>6. js的事件</h4><p> 事件：电脑输入设备与页面进行交互响应，我们称之为事件。</p></blockquote></blockquote></blockquote></li><li>常用事件 <br><ol><li>onload 加载完成事件</li><li>onclick 单击事件</li><li>onblur 失去焦点事件</li><li>onchange 内容发生改变事件</li><li>onsubmit 表单提交事件</li></ol></li><li>事件注册<ol><li>静态注册<br><br>通过HTML标签的事件属性直接赋予事件响应后的代码</li><li>动态注册<br><br>通过js代码得到<strong>标签的dom对象</strong>，然后在通过**dom对象.事件名=funtion(){}**这种形式赋予事件响应的代码 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;title&gt;&lt;script type="text/javascript"&gt;   funtion sum(a,b){      return a+b;   }&lt;/script&gt;&lt;/head&gt;&lt;body onclick="sum(1,2)"&gt;//静态注册(绑定)&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;title&gt;&lt;script type="text/javascript"&gt;   window.onload=funtion(){      alert("动态绑定事件onload");//动态注册(绑定)   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li>onclick事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   funtion onclickFun(){      alert("what the hell?!");   }   window.onload=funtion(){      var hjyObj=document.getElementById("hjy16");//js创建dom对象hjyObj      hjyObj.onclick=funtion(){//然后hjyObj.事件名=funtion(){代码块}         alert("动态绑定事件");      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;button onclick="onclickFun()"&gt;按钮1&lt;/button&gt;//调用函数 提高复用率 静态注册   &lt;button id="hjy16"&gt;按钮2&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onblur事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onblurFun(){      alert("静态事件onblur");   }   window.onload=function(){      var obj1=document.getElementById("awsl");      obj1.onclick=function(){         console.log("动态事件onblur绑定");//console是javascript提供的控制台对象,专门用来控制浏览器的控制器打印输出，用于测试      }//log()是打印方法   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   用户名:&lt;input type="text" onblur="onblurFun();"/&gt;&lt;br/&gt;   用户密码: &lt;input type="password" id="awsl"/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onchange事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onchangeFun(){      alert ("女神已经改变了");   }   window.onload=function(){      var sel1=document.getElementById("sel01");      sel1.onchange=function(){       alert("男神已经改变了") ; //事件onchange的响应的代码块      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;select&gt;   &lt;option&gt;白敬亭&lt;/option&gt;   &lt;option&gt;杨洋&lt;/option&gt;   &lt;option&gt;彭于晏&lt;/option&gt;   &lt;/select&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onsubmit事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onsubmitFun(){      alert("发现不合法");      return false;   }   window.onload=function(){      var sub1=document.getElementById("sub01");      sub1.onsubmit=function(){       alert("发现不合法");       return false; //事件onsubmit的响应的代码块      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;form action="网址..." method="get" onsubmit="return onsubmitFun()"&gt;//记得return！！！   &lt;input type="submit" value="静态注册"/&gt;   &lt;/form&gt;   &lt;form action="网址..." id="sub01"&gt;   &lt;input type="submit" value="动态注册"/&gt;   &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><ul><li><h3 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h3></li></ul></blockquote></blockquote></li></ul><ol><li>概述<br>HTML <strong>DOM</strong> 模型被结构化为 <strong>对象树</strong> : <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;文档标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="..."&gt;我的链接&lt;/a&gt;&lt;h1&gt;我的标题&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="/./../img/dom.png" alt="图片"></li><li>作用<br></li></ol></li><li><p>Javascript可以创建<strong>动态</strong>的HTML</p></li><li><p>JavaScript 能改变页面中的所有 <strong>HTML 元素</strong></p></li><li><p>JavaScript 能改变页面中的所有 <strong>HTML 属性</strong></p></li><li><p>JavaScript 能改变页面中的所有 <strong>CSS 样式</strong></p></li><li><p>JavaScript 能<strong>删除</strong>已有的 HTML 元素和属性</p></li><li><p>JavaScript 能<strong>添加</strong>新的 HTML 元素和属性</p></li><li><p>JavaScript 能对页面中所有已有的 HTML 事件<strong>作出反应</strong></p></li><li><p>JavaScript 能在页面中<strong>创建新的 HTML 事件</strong></p><ol start="3"><li>代码演示 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function cliclkFun(){      var usernameObj=document.getElementById("username");      var usernameText=usernameObj.value;      var patt=/^\w(5,12)&amp;/;//正则表达式(要求字符串只能是由数字，字母和下划线构成且长度在5-12之间)      if(patt.test(usernameText)){         alert("用户名合法");      }else{         alert("用户名不合法");      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;用户名：&lt;input type="text" id="username" value="hjy"/&gt;&lt;button onclick="clickFun()"&gt;校验&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><ul><li><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   var str="alskfhal";   var patt=/e/;   if(patt.test(str)){      alert("字符串正确");   }else{      alert("字符串错误");   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></blockquote></li></ol><p> 常用正则表达式看下一篇博客文章(doge)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单制作</title>
      <link href="/2022/08/18/biao-dan-zhi-zuo/"/>
      <url>/2022/08/18/biao-dan-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="制作一个表单页面"><a href="#制作一个表单页面" class="headerlink" title="制作一个表单页面"></a>制作一个表单页面</h1><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;表单&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;                &lt;form&gt;            &lt;h1 align="center"&gt;登录首页&lt;/h1&gt;            &lt;input type="hidden" name="action" value="login"/&gt;            &lt;table align="center"&gt;                &lt;tr&gt;                    &lt;td&gt;                        用户名称:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;input name="username"type="text" value="默认值"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        用户密码:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input name="password"type="password" value="abc"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        确认密码:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input name="password"type="password" value="abc"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        性别:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input type="radio" name="sex" checked="checked"/&gt;男&lt;input type="radio"name="sex"/&gt;女&lt;br/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        兴趣爱好:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;input name="hobby"type="checkbox"checked="check"/&gt;唱歌                        &lt;input name="hobby" type="checkbox"/&gt;跳舞                        &lt;input name="hobby"type="checkbox"/&gt;rap                        &lt;input name="hobby" type="checkbox"/&gt;篮球                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        国籍:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;select name="country"&gt;                        &lt;option value="none"&gt;--请选择国籍&lt;/option&gt;                        &lt;option selected="selected" value="cn"&gt;中国&lt;/option&gt;                        &lt;option value="usa"&gt;美佬&lt;/option&gt;                        &lt;option value="jap"&gt;小日本&lt;/option&gt;                        &lt;/select&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        自我评价:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;textarea rows="10" cols="20"&gt;请输入自我评价信息&lt;/textarea&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        &lt;input type="reset" value="重置"&gt;                        &lt;input type="submit" value="提交"&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;!--action=login                &amp;username=默认值                &amp;password=123456                &amp;password=123456                &amp;sex=on                &amp;hobby=on                &amp;country=中国                --&gt;            &lt;/table&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端三件套</title>
      <link href="/2022/08/18/qian-duan-san-jian-tao/"/>
      <url>/2022/08/18/qian-duan-san-jian-tao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>基本标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片存放在本地路径<span class="token punctuation">"</span></span><span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--bgcolor默认值为white--&gt;</span>        <span class="token comment">&lt;!--图片标签--&gt;</span>        <span class="token comment">&lt;!--src值为路径 alt表示报错返回值--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片在本地的路径<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片未找到<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>            标题1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--color默认值为黑色(black)--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--换行--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--水平线，独目标签(起到分隔的作用)--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            远离喧嚣，沉淀自己，成为更好的自己！<span class="token comment">&lt;!--分段标签，另起一段--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--字体展示效果(1)--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>粗体效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>斜体效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--字体展示效果(2)--&gt;</span>        <span class="token comment">&lt;!--运用字体标签font--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>            我喜欢你，粥粥！        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--注释标签--&gt;</span>        <span class="token comment">&lt;!-- 表格标签--&gt;</span>        <span class="token comment">&lt;!--表格居中--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--属性介绍--&gt;</span>            <span class="token comment">&lt;!--1px 表示一个像素border表示设置边框的宽度--&gt;</span>            <span class="token comment">&lt;!--第一行--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>第一个单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--第一列--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>第二个单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--第二列--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>第三个单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--第三列--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--第二行--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!--标签&lt;th&gt;可以代替&lt;td&gt;--&gt;</span>                    <span class="token comment">&lt;!--额外的效果可以是单元格内容字体自动加粗和居中--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>员工编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>员工姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>员工性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--热链接--&gt;</span>            <span class="token comment">&lt;!--href值为跳转其他页面的网址链接--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>htttp://www.jd.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                京东商城            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--列表标签--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>北京        <span class="token comment">&lt;!--&lt;ul&gt;标签的呈现样式跟&lt;li&gt;标签是一样的--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--&lt;li&gt;标签呈现形式是一个小实心的黑点--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>东城区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>西城区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>朝阳区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>海淀区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>梅州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>南京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>新余<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>            茶            <span class="token comment">&lt;!--罗马数字I标识顺序--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>I<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>绿茶                    <span class="token comment">&lt;!--阿拉伯数字标识顺序--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>西红柿茶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>龙井<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>龙尖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>红茶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">登录表单制作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>hehe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--表单作用(form标签)1. 需要用户进行填写数据才可以向服务器发送请求2. 与超链接的区别在于 超链接只需要用户点击就可以向服务器发送请求--&gt;</span>              用户名        <span class="token comment">&lt;!--输入框input--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        密码        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userpwd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        性别        <span class="token comment">&lt;!--checked 表示默认值radio 表示 圆点选项框--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>男         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>女        兴趣        <span class="token comment">&lt;!--下拉列表多选--&gt;</span>        <span class="token comment">&lt;!--size 表示最多选几个mutiple 表示多选--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>兴趣<span class="token punctuation">"</span></span><span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">mutiple</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c++<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!--类似mapname      =     value--&gt;</span>                   c++                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                   java                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavaScript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!--相当于 兴趣=JavaScript (一一对应)--&gt;</span>                   JavaScript                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文本域--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">col</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--checkbox 展现形式是方点选项框--&gt;</span>        兴趣            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>兴趣<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c++<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>c++            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>兴趣<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c++<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>java            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>兴趣<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c++<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>javascript            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>选择样式</p><ol><li><p>type=”radio” 圆点选择</p></li><li><p>type=”checkbox” 方点选择</p></li><li><p>下拉输入框</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>输入样式</p><ol><li>输入框 <input></li><li>文本输入框<input type="text"></li></ol></li><li><p>注释方式</p><ol><li>HTML <!-- 注释内容--></li><li>CSS / ** 注释内容 ** /</li><li>JavaScript  // 单行注释内容  /* 多行注释内容  */</li></ol></li><li><p>HTML常用标签</p></li><li><p>单标签</p><ol><li><input></li><li><link href=".../"></li><li><br></li><li><!--分隔符<hr/>--></li></ol></li><li><p>双标签</p><ol><li><title>标题标签</title></li><li><h1>标题大小</h1></li><li><div>独居一行</div></li><li><p>列表(加上无序和有序)</p></li><li><ul>可以继续嵌套</ul></li>  <li><ol></ol></li><p></p><li><p>表单</p><form action="..."></form>（类似于超链接标签<a></a>）<p></p></li><li><p>热链接<a href="...">l链接标题</a></p></li><li><p>关于form有关联的标签</p><ul><li><p><input type="radio">（type还可以有checkbox）</p></li><li><p><select> <option></option></select></p></li></ul></li><li><p>HTML固定的标签</p><ul><li></li><li></li><li><title></title></li><li></li></ul></li><li><p>CSS用的标签</p><ul><li><style type="text/css"></style></li></ul></li><li><p>JavaScript用的标签</p><ul><li><script type="text/javascipt"><script></li></ul></li></ol></li></ul></script></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记一</title>
      <link href="/2022/08/17/suan-fa-bi-ji-yi/"/>
      <url>/2022/08/17/suan-fa-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><ul><li><h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><ol><li>概念：二分查找又称折半查找，通过不断改变两端边界的值，从而在一维数据中快速查找目标值。</li><li>使用前提：在具有<strong>单调</strong>(递增/递减)的一维数据(数组)。</li><li>思想：二分的过程就是不断微分的过程。</li></ol></li><li><h2 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h2><strong>细节</strong>：数组下标都是从零开始，故存进数组的数据也是从下标零开始。</li></ul><ol><li><p>搜索区间<strong>左闭右闭</strong>[l,r]—&gt;寻找<strong>一个数</strong></p><p> l=0;<br> r=数组长度-1;</p><table><thead><tr><th align="center">l</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center">r</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">…</td><td align="center">n-1</td></tr></tbody></table></li></ol>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BinarySearch(int arr[],int target){    int l=0;//初始化搜索边界    int r=n-1;//数组长度减一//下标为n-1未数组越界        while(l&lt;=r){//终止条件是(l==r+1)表示搜索区间是[r+1,r],此区间为开(不存在)            int mid=l+(r-l)/2;//防止数据溢出            if(a[mid]&gt;target){                r=mid-1;//[l,r]--&gt;[l,mid-1]            }            else if(a[mid]&lt;target){                l=mid+1;//[l,r]--&gt;[mid+1,r]            }else{                return l;//return r也可以            }        }        return -1;//搜索区间为空,即找不到target则return-1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><ol><li>问题1：为什么while的循环条件是l &lt;= r,而不是l &lt; r?<br>解: 因为前者的终止条件是l==r+1,搜索区间为[r+1,r]，此区间为空;后者终止条件是l==r,搜索区间为[r,r]，此区间不为空。当只有区间为空时，才可以退出while循环，表示未找到target值。</li><li>问题2：为什么称这搜索区间为左闭右闭?<br>解：因为初始的左右下标边界都是可以取的，r=0;l=n-1(未越界)。</li><li>问题3：为什么r=mid-1,l=mid+1?<br>解：因为已经检测到mid不是我们要找的target，故将mid除去。mid将初始化的搜索区间拆分为[l,mid-1],[mid+1,r];</li></ol></li><li><p>搜索区间<strong>左闭右开</strong>[l,r)—&gt;寻找<strong>左右侧边界</strong></p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void left_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            r=mid;//改变右侧边界r，向左靠拢        }    }return l;//return r也可以}void right_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            l=mid+1;//改变右侧边界l，向右靠拢        }    }return l-1;//return r-1也可以}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><ol><li>问题1：为什么while的循环条件是l &lt; r,而不是l &lt;= r?<br> 解：初始化的搜索边界l=0；r=n;此时的右边界r=n是已经数组下标越界了，故将while循环的终止条件设置为l==r,即搜索区间为[r,r)，很明显此区间为空。</li><li>问题2.为什么l=mid+1，r=mid，而不是l=mid+1,r=mid-1?<br> 解：还是根据搜索区间置空的原理解释。检测mid不符合我们要找的target，所以将mid去掉，即mid将搜索区间分成两部分[l,mid),[mid+1,r)。</li><li>问题3：当target值为小于数组所有值或大于所有值或者介于端点值但不存在，那返回什么？<br> 解：问得好！当target小于任何数时，return 0；当target大于任何数时，return n；当target介于两端点值时，返回第一个大于target值的下标。</li><li>问题4：要想实现如果找不到target值就返回-1，怎么改？ <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    void left_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            r=mid;//改变右侧边界r，向左靠拢        }    }    if(l==n)return -1;//当target大于任何数组的所有数时，返回-1，也就是说右侧边界r无法向左进行靠拢。//换成if(r==n)return -1也可以return a[l]==target?l:-1;//换成return a[r]==target?r:-1也可以}void right_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            l=mid+1;//改变左侧边界l，向右靠拢        }    }    if(l==0)return -1;//当target小于任何数组的所有数时，返回-1，也就是说左侧边界无法向右靠拢。//换成r==0也可以return a[l-1]==target?(l-1):-1;//换成a[r-1]=target?(r-1):-1也可以}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><ul><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>理解清楚while循环退出的条件(终止条件)</li><li>理解清楚搜索区间为空的作用</li><li>理解上面两条，你就明白如何确定二分的边界了！</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/08/14/dai-ma-kuai-yan-shi/first/"/>
      <url>/2022/08/14/dai-ma-kuai-yan-shi/first/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><blockquote><p>“引用语法&gt;”</p><blockquote><p>二级应用</p></blockquote></blockquote><p>谈恋爱：</p><ol><li>物色女孩</li><li>相处聊天</li><li>准备惊喜</li><li>最后表白冲击</li></ol><p>无序列表：</p><ul><li>我不道哇</li><li>我记到鸟</li></ul><ul><li>也可以无序标记</li><li>好像跟-的不一样</li></ul><p>日计划:</p><ul><li><input checked="" disabled="" type="checkbox"> 刷洛谷题</li><li><input checked="" disabled="" type="checkbox"> 后端知识(javaweb java jdbc)</li><li><input checked="" disabled="" type="checkbox"> 前端三件套(javascript css html)</li><li><input checked="" disabled="" type="checkbox"> 练琴 英语背单词</li></ul><p>代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"what the hell?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表格</p><table><thead><tr><th align="center">学生</th><th align="center">数学成绩</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">93</td></tr><tr><td align="center">李四</td><td align="center">69</td></tr><tr><td align="center">脚注：</td><td align="center"></td></tr></tbody></table><p>hjy<a href="21%E5%8C%BB%E5%B7%A5%E5%AD%A6%E7%94%9F">^学生</a></p><pre class="line-numbers language-none"><code class="language-none">浅浅地学Markdown语法*斜体***加粗**H~2~OX^2==这是一段高亮文字====这是高亮文字吗==//vscode不支持高亮文字标记==what the hell==语法展示:* 可以吗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法展示：</p><ul><li>又可以了(要得有空格)</li><li>呦吼</li></ul><p><em>斜体</em><br><del>HELLO WORLD</del>(删除)<br><strong>何名杨</strong></p><p><strong>欢迎学习Markdown语法</strong>(一对双星)<br><strong>欢迎学习Markdown语法</strong>(下划线)加粗</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/12/hello-world/"/>
      <url>/2022/08/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
