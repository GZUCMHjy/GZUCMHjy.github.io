<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>研发部大作业展示</title>
      <link href="/2022/09/18/show/"/>
      <url>/2022/09/18/show/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="展示内容"><a href="#展示内容" class="headerlink" title="展示内容"></a>展示内容</h1><h2 id="1-暑假学习内容"><a href="#1-暑假学习内容" class="headerlink" title="1. 暑假学习内容"></a>1. 暑假学习内容</h2><ul><li>java进度 见韩顺平java教程视频讲解P400(<strong>接口</strong>开始)<br></li><li>github的使用(部署和创建仓库)和git命令行(说实话有点忘了T_T)<br></li><li>初次接触框架并完成搭建(博客常用框架——hexo)<br></li><li>java前端三件套(html css 和JavaScript)<br></li><li>javaweb中的servlet部署<br></li><li>sql语句中增删查改操作以及jdbc连接数据池操作(别问，问就是忘了)<br></li><li>同时八月份开始打卡在洛谷平台上训练算法能力(二分，快排，贪心，递归)</li><li>在学习c++的函数库(栈，图)</li></ul><h2 id="2-成果展示"><a href="#2-成果展示" class="headerlink" title="2. 成果展示"></a>2. 成果展示</h2><ul><li>博客(当然是我心爱滴博客mua！)</li><li>研发部大作业(惨不忍睹,看了就知道T_T)</li></ul><h2 id="3-心得体会"><a href="#3-心得体会" class="headerlink" title="3. 心得体会"></a>3. 心得体会</h2><ul><li>学到到越多，越感觉自己知道的太少，学的太少…</li><li>在完成项目时，路径是我的一生之敌，无论是博客制作还是制作作业中的页面跳转，都是需要精准的路径设置，不得有丝毫的闪失。</li><li>同时学会了思考和搜索的能力，还有坚持不倒的心！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> SHOW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SHOW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构题解(一)</title>
      <link href="/2022/09/18/shu-ju-jie-gou-ti-jie/"/>
      <url>/2022/09/18/shu-ju-jie-gou-ti-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-题目-顺序表删除元素"><a href="#1-题目-顺序表删除元素" class="headerlink" title="1. 题目: 顺序表删除元素"></a>1. 题目: 顺序表删除元素</h1><h2 id="1-1-Description-：已知线性表La存放数值，现需要删除指定下标为i的元素，并把删除元素后的La输出"><a href="#1-1-Description-：已知线性表La存放数值，现需要删除指定下标为i的元素，并把删除元素后的La输出" class="headerlink" title="1.1 Description ：已知线性表La存放数值，现需要删除指定下标为i的元素，并把删除元素后的La输出"></a>1.1 Description ：已知线性表La存放数值，现需要删除指定下标为i的元素，并把删除元素后的La输出</h2><h2 id="1-2-Input：测试数据占两行，第一行为线性表La的元素，元素间以空格隔开，元素数量不超过100个。第二行为需要删除的小标i"><a href="#1-2-Input：测试数据占两行，第一行为线性表La的元素，元素间以空格隔开，元素数量不超过100个。第二行为需要删除的小标i" class="headerlink" title="1.2 Input：测试数据占两行，第一行为线性表La的元素，元素间以空格隔开，元素数量不超过100个。第二行为需要删除的小标i"></a>1.2 Input：测试数据占两行，第一行为线性表La的元素，元素间以空格隔开，元素数量不超过100个。第二行为需要删除的小标i</h2><h2 id="1-3-Output-输出删除指定下标为i的顺序表"><a href="#1-3-Output-输出删除指定下标为i的顺序表" class="headerlink" title="1.3 Output: 输出删除指定下标为i的顺序表"></a>1.3 Output: 输出删除指定下标为i的顺序表</h2><ul><li>如图所示</li></ul><p><img src="/./../img/%E9%A2%98%E8%A7%A3(%E4%B8%80).jpg" alt="图片"></p><ul><li>tip：1.算法无难点，删除算法就是将后一项的元素<em>逐一提前</em>即可<ol start="2"><li>难点在于对于顺序表的结构定义(废话不多说，开始上代码！！！)<pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#define MaxSize 100//默认顺序表内存大小为100#include&lt;stdlib.h&gt;typedef int ElemType;/*定义线性表*/typedef struct{    ElemType list[MaxSize];//顺序表中用于存储的成员——数组list    int last;            //用于纪录当前顺序表的长度的成员last}SeqList;/*创建空表*/SeqList InitList(){    SeqList l;    l.last=0;//初始化顺序表为空表,即元素个数为零,长度为零    return l;}/*输入递增有序顺序表*/int ListInsert(SeqList *L,int i,ElemType x) //i指的是要插入的元素的位置{    int j;    if(L-&gt;last&gt;=MaxSize)    {        printf("顺序表已经无法插入！\n");        return 0;    }    else if(i&lt;0||i&gt;L-&gt;last)    {        printf("参数i不合法！\n");        return 0;    }    else    {    for(j=L-&gt;last;j&gt;=i;j--){        L-&gt;list[j]=L-&gt;list[j-1];    }        L-&gt;list[i-1]=x;//空出来的位置插入目标数字x        L-&gt;last++;//数组长度加一        return 0;    }}int ListaDelete(SeqList *L,int i){    int j;    if(L-&gt;last&lt;=0)    {        printf("顺序表已经无空数据可删！\n");        return 0;    }    else if(i&lt;0||i&gt;L-&gt;last-1)    {    //printf("参数i不合法");        return -1;    }    else    {    //*x=L-&gt;list[i];    for(j=i;j&lt;=L-&gt;last;j++)    {        L-&gt;list[j]=L-&gt;list[j+1];//删除算法的核心就在这里！！！    }    L-&gt;last--;    return 0;    }}//输出元素int OutputSeqList(SeqList *L){    int i;    //printf("输出结果为：");    for(i=0;i&lt;L-&gt;last;i++)    {        printf("%d ",L-&gt;list[i]);    //return(L-&gt;list[i]);    }    return 0;}int main(){    SeqList l;    l=InitList();//初始化空顺序表    int pos;    int i;    for(i=0;i&lt;5;i++){        scanf("%d",&amp;l.list[i]);        l.last++;    }    scanf("%d",&amp;pos);    //ListInsert(&amp;l,pos);    ListaDelete(&amp;l,pos);    OutputSeqList(&amp;l);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h2 id="感悟-抛开此题-应熟练书写顺序表的结构，并掌握crud的操作-即增删查改！给大家一个参考，我的顺序表结构的书写"><a href="#感悟-抛开此题-应熟练书写顺序表的结构，并掌握crud的操作-即增删查改！给大家一个参考，我的顺序表结构的书写" class="headerlink" title="感悟: 抛开此题,应熟练书写顺序表的结构，并掌握crud的操作,即增删查改！给大家一个参考，我的顺序表结构的书写."></a>感悟: 抛开此题,应熟练书写顺序表的结构，并掌握crud的操作,即增删查改！给大家一个参考，我的顺序表结构的书写.</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">    #include&lt;stdio.h&gt;#include&lt;malloc.h&gt;#define Size 5struct List//线性表List{    int *elem;//数组;    int length;//元素个数;    int size;};typedef struct List SqList;SqList  IniList()//创建并初始化顺序表;{    SqList l;    l.elem=(int*)malloc(Size*sizeof(int));//申请连续的动态内存空间;    l.length=0;//初始化:元素个数为零;    l.size=Size;//初始化:内存空间为Size;    return l;//创建完毕,回到t;}int printList(SqList list)//遍历顺序表;{    int i;    //printf("%d ",list.length);    for(i=0;i&lt;list.length;i++)        printf("%d ",list.elem[i]);        printf("\n");        return 0;}int insert(SqList *t1,int elem,int pos)//特定位置插入数据;{    int *old_data=t1-&gt;elem;    int i;    if(pos&lt;1||pos&gt;t1-&gt;length)return -1;//printf("error.");//return false;//    if(t1-&gt;length&gt;=t1-&gt;size)//"==也可以"    {        t1-&gt;size*=2;;//printf("")        t1-&gt;elem=(int *)malloc((t1-&gt;size)*sizeof(int));//数组(类型:int)申请内存空间扩大;        //相应的size也要扩大;不一定加一;        for(i=0;i&lt;t1-&gt;length;i++)            t1-&gt;elem[i]=old_data[i];    }  for(i=t1-&gt;length;i&gt;=pos;i--)//pos决定于for要进行几次循环;length-pos=循环次数;    {        t1-&gt;elem[i]=t1-&gt;elem[i-1];    }    t1-&gt;elem[pos-1]=elem;    t1-&gt;length++;//插入元素,自增;    //printf("%d ",t1-&gt;length);    //printList(&amp;t1);    return 0;}void delete (SqList *list,int pos)//指定位置删除;{    SqList *t1;    t1=list;    int i;    for(i=pos-1;i&lt;=t1-&gt;length;i++)    {        t1-&gt;elem[i]=t1-&gt;elem[i+1];    }    t1-&gt;length--;//删除元素,自减;    //printList(&amp;t1);}int main(){    int i;    SqList la=IniList();    //SqList *lb=IniList();    for(i=0;i&lt;5;i++)    {        scanf("%d",&amp;la.elem[i]);        la.length++;    }    printList(la);//printList(lb);    insert(&amp;la,95,3);    printList(la);    insert(&amp;la,95,4);    printList(la);    insert(&amp;la,95,5);    printList(la);    //insert(&amp;lb,99,2);    delete(&amp;la,1);    printList(la);    delete(&amp;la,3);    printList(la);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记(一)</title>
      <link href="/2022/09/11/shu-ju-jie-gou-di-er-zhou-bi-ji-xian-xing-jie-gou-mu-ke-zhe-da-ban-ben-xiaoyu/"/>
      <url>/2022/09/11/shu-ju-jie-gou-di-er-zhou-bi-ji-xian-xing-jie-gou-mu-ke-zhe-da-ban-ben-xiaoyu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构第二周笔记——线性结构-慕课浙大版本–XiaoYu"><a href="#数据结构第二周笔记——线性结构-慕课浙大版本–XiaoYu" class="headerlink" title="数据结构第二周笔记——线性结构(慕课浙大版本–XiaoYu)"></a>数据结构第二周笔记——线性结构(慕课浙大版本–XiaoYu)</h1><h3 id="2-1-1-引子：多项式表示"><a href="#2-1-1-引子：多项式表示" class="headerlink" title="2.1.1 引子：多项式表示"></a>2.1.1 引子：多项式表示</h3><h4 id="例子：一元多项式及其运算"><a href="#例子：一元多项式及其运算" class="headerlink" title="例子：一元多项式及其运算"></a>例子：一元多项式及其运算</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627134344443.png" alt="image-20220627134344443" style="zoom:50%;"><p>主要运算：多项式相加、相减、相乘等</p><p><strong>分析</strong>–<strong>如何表示多项式</strong></p><p>多项式的关键数据：</p><ol><li><p>多项式项数n</p></li><li><p>各项系数ai以及指数i(这里的ai的i是指a的下标)</p><p><strong>方法1</strong>：顺序存储结构直接表示</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627134953388.png" alt="image-20220627134953388" style="zoom:50%;"></li></ol><p>注解：其实这个的意思就是从头加到尾，不管中间的答案有没有像0这种可以直接省略掉的值都会占一个位置。</p><p>所以上方那个问题中如何表示多项式的答案是：需要占2001个位置，首选他是顺序存储结构，然后下标从0开始，所以是2001而不是2000</p><p><strong>方法2</strong>：顺序存储结构表示非零项(按照指数大小有序存储，比如说指数大的排在前面，指数小的排在后面)</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627140021075.png" alt="image-20220627140021075" style="zoom:50%;"><p>多项式相加过程：从头开始，比较两个多项式当前对应项的的指数  =&gt;这样就能够做到指数递降运算</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627140719716.png" alt="image-20220627140719716" style="zoom:50%;"><p>这里的(11，8)是(15，8)与(-4，8)的结合结果，因为指数一样，所以可以结合为一个</p><p>这种方法可以有效节省空间，操作效率也不算差</p><p><strong>方法3</strong>：链表结构存储非零项</p><ol><li>链表中每个节点存储多项式中的一个非零项，包括系数和指数两个数据域以及一个指针域</li><li>coef：指数  expon：系数  link：指针域</li><li>用指针域将不同的项串起来，同样可以做到指数递降的顺序进行排序</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//代码演示</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token operator">*</span>Polynomial<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> coef<span class="token punctuation">;</span>    <span class="token keyword">int</span> expon<span class="token punctuation">;</span>    Polynomial link<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627141534773.png" alt="image-20220627141534773" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627141555193.png" alt="image-20220627141555193" style="zoom:50%;"><p>分别指向多项式的头，然后比较指数大小，大的输出；相等的话，系数相加</p><h3 id="2-1-2-线性表及顺序存储"><a href="#2-1-2-线性表及顺序存储" class="headerlink" title="2.1.2 线性表及顺序存储"></a>2.1.2 线性表及顺序存储</h3><p><strong>什么是线性表</strong>:由同类型数据元素构成有序列表的线性结构</p><ol><li>表中元素个数称为线性表的长度</li><li>线性表没有元素的时候，称为空表</li><li>表起始位置称表头，表结束位置称表尾</li></ol><p>多项式表示问题的启示：</p><ol><li>同一个问题可以有不同的表示(存储)方法  =&gt;通常来说的话是使用链表或者数组来进行存储</li><li>有一类共性问题：有序线性序列的组织和管理</li></ol><p><strong>线性表的抽象数据类型描述</strong></p><p>类型名称：线性表(List)</p><p>数据对象集：线性表是n(&gt;=0)个元素构成的有序列表(a1,a2,…,an)</p><p>操作集：线性表L属于List，整数i表示位置，元素X属于ElementType(这个类型可以是整型也可以是实型又或者是个结构，这里统称ElementType)</p><ol><li>List MakeEmpty()：初始化一个空线性表L</li><li>ElementType FindKth(int K,ListL)：根据位序K，返回相应元素;</li><li>int Find(ElementType X,int i, List L)：在线性表L中查找X的第一次出现位置;</li><li>void Insert(ElementType X,int i,List L)：在位序i前插入一个新元素X;</li><li>void Delete(int i,List L)：删除指定位序i的元素;</li><li>int Length(List L)：返回线性表L的长度n</li></ol><h4 id="线性表的顺序存储实现"><a href="#线性表的顺序存储实现" class="headerlink" title="线性表的顺序存储实现"></a>线性表的顺序存储实现</h4><p>利用数组的连续存储空间顺序存放线性表的各元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token operator">*</span>List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">{</span>    ElementType Data <span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义了一个数组，数组的分类类型是ElementType</span>    <span class="token keyword">int</span> List<span class="token punctuation">;</span><span class="token comment">//代表线性表的最后一个元素，这样的一个结构就可以抽象的实现一个线性表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> L<span class="token punctuation">;</span><span class="token comment">//定义一个变量L</span>List PtrL<span class="token punctuation">;</span><span class="token comment">//还有一个变量PtrL</span><span class="token comment">//访问下标为i的元素：L.Data[i]或PtrL-&gt;Data[i]</span><span class="token comment">//线性表的长度：L.Last+1或PtrL-&gt;Last+1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627191654197.png" alt="image-20220627191654197" style="zoom:50%;"><p>“-&gt;”是一个整体，它是用于指向[结构体]子数据的指针，用来取子数据。</p><p>换种说法，如果我们在C语言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到“-&gt;”。</p><p><strong>主要操作的实现</strong></p><ol><li><p>初始化MakeEmpty(建立空的顺序表)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">MakeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>List PtrL<span class="token punctuation">;</span>PtrL <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过malloc申请这样子一个结构</span>PtrL<span class="token operator">-&gt;</span>Last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//Last设置为-1，因为Last是代表最后一个元素。Last为0是代表这个表有一个元素放在第一个位置，没元素就设置为-1，然后把这个结构的指针返还回来</span><span class="token keyword">return</span> PtrL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//科普小知识</span>find函数用于查找数组中的某一个指定元素的位置。比如：有一个数组<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>；问：元素<span class="token number">5</span>的在什么位置，find函数 返回值 为 <span class="token number">2</span>；find （数组名 <span class="token operator">+</span> 起始查找元素的位置， 数组名 <span class="token operator">+</span> 结束查找的元素位置， 想要查找的元素）<span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token comment">//List PtrL是线性表结构的指针</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> PtrL <span class="token operator">-&gt;</span>Last <span class="token operator">&amp;&amp;</span> PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!</span> <span class="token operator">=</span> X <span class="token punctuation">)</span>        i<span class="token operator">++</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果没找到，返回-1</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token comment">//找到后返回的是存储位置</span><span class="token punctuation">}</span>查找成功的平均比较次数为<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>平均时间性能为<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3顺序存储的插入和删除"><a href="#2-1-3顺序存储的插入和删除" class="headerlink" title="2.1.3顺序存储的插入和删除"></a>2.1.3顺序存储的插入和删除</h3><p>插入(第i(1&lt;=i&lt;=n+1)个位置上插入一个值为X的新元素)   其实就是决定什么时候插入线性表</p></li><li><p>下标是从0开始的，所以新插入的元素X放到i-1这个位置的话，首先需要把i-1之后的元素往后挪一位给i-1留出位置</p></li><li><p>也就是先移动再插入，每个元素往后挪使用一个循环就可以解决了</p></li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627200204195.png" alt="image-20220627200204195" style="zoom:50%;"></li><li><p>从后往前算(挪)，如果从前往后的话算法是不对的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//插入操作实现</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PtrL<span class="token operator">-&gt;</span>Last <span class="token operator">==</span> MAXSIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//表空间已满，不能插入</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;</span> PtrL <span class="token operator">-&gt;</span> Last <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//检查插入的位置的合法性。超出这个范围就不行噢</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"位置不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token punctuation">;</span> j<span class="token operator">&gt;=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//List是最后一个元素的位置</span>        PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将a1~an倒序向后移动</span>    PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">;</span><span class="token comment">//新元素插入</span>    PtrL<span class="token operator">-&gt;</span>Last<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//Last仍指向最后元素</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//平均移动次数为n/2，平均时间性能为O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">接下来我们来介绍一下另外一个操作：删除如果把后移数组元素的循环   <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span>       PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>改为   <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>       PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>那会是什么后果？    分量Data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>到Data<span class="token punctuation">[</span>Ptrl<span class="token operator">-&gt;</span>Last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>都是同一个值，即移之前Data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除(删除表中的第i(1 &lt;= i &lt;= n)个位置上的元素)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除掉这个元素后就空出来一个位置了，这种时候就需要从左往右的顺序往前挪</span><span class="token comment">//删除操作实现</span><span class="token keyword">void</span> <span class="token function">Detele</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token comment">//已知PtrL这个线性表</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">&gt;</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不存在第%d个元素"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> PtrL<span class="token operator">-&gt;</span>Last<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PtrL<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将a的下标(i+1)~an顺序往前移动</span>    PtrL<span class="token operator">-&gt;</span>Last<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//Last仍指向最后元素</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//平均移动次数为(n-1)/2,平均时间性能为O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-1-4-链式存储及查找"><a href="#2-1-4-链式存储及查找" class="headerlink" title="2.1.4 链式存储及查找"></a>2.1.4 链式存储及查找</h3><h4 id="线性表的链式存储实现"><a href="#线性表的链式存储实现" class="headerlink" title="线性表的链式存储实现"></a><strong>线性表的链式存储实现</strong></h4><ol><li><strong>不要求逻辑上相邻的两个元素物理上也相邻</strong>;通过”链”建立起数据元素之间的逻辑关系<ol><li>插入、删除不需要移动数据元素，只需要修改”链”</li></ol></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">{</span>    ElementType Data<span class="token punctuation">;</span>    List Next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> L<span class="token punctuation">;</span>List PtrL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220627234839331.png" alt="image-20220627234839331" style="zoom:50%;"><p><strong>主要操作的实现</strong></p><ol><li><p>求表长</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span>List PtrL<span class="token punctuation">)</span><span class="token comment">//链表的头指针，并且是单向链表</span><span class="token punctuation">{</span>    List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token comment">//p指向表的第一个结点</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span><span class="token comment">//这步操作相当于让指针往后挪一位</span>        j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当前p指向的是第j个结点</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//时间性能为O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//(1)按序号查找：FindKth;采用类似链表的遍历方法</span>List <span class="token function">FindKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">{</span>    List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token comment">//首先把p这个临时变量设置为链表的表头</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span><span class="token comment">//让指针往后挪一位</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> K <span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token comment">//找到第K个，返回指针</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//否则返回空</span><span class="token punctuation">}</span><span class="token comment">//(2)按值查找：Find</span>List <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">{</span>    List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">-&gt;</span> Data <span class="token operator">!=</span> X<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//返回的是两种结果，不是p就是NULL，调用Find函数，发现它返回值等于NULL，就说明没找着</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-5链式存储的插入和删除"><a href="#2-1-5链式存储的插入和删除" class="headerlink" title="2.1.5链式存储的插入和删除"></a>2.1.5链式存储的插入和删除</h3></li><li><p>插入(在第i-1(1 &lt;=  i &lt;= n+1)个结点后插入一个值为X的新结点)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//(1)先构造一个新结点，用s指向;  这个时候可以用malloc这个函数来申请一块空间</span><span class="token comment">//(2)再找到链表的第i-1个结点，用p指向;</span><span class="token comment">//(3)然后修改指针，插入结点(p之后插入新结点是s)</span><span class="token comment">//下图中的操作步骤：让s指向下一个结点，p的Next附给s的Next</span><span class="token comment">//如果修改指针的两个步骤交换了一下哎，会发生什么？(语句执行顺序为：(1) p-&gt;Next=s;  (2) s-&gt;Next=p-&gt;Next;)</span><span class="token comment">//答案：s-&gt;Next指向s,从而不能正确完成插入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628002106165.png" alt="image-20220628002106165" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//malloc复习区域</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;malloc.h&gt;</span><span class="token expression">或者#include<span class="token operator">&lt;</span>alloc<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span><span class="token comment">//两者的内容是完全一样的</span></span>如果分配成功：则返回指向被分配内存空间的指针不然返回指针<span class="token constant">NULL</span>同时，当内存不再使用的时候，应使用<span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数将内存块释放掉。关于：<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span>表示未确定类型的指针，c<span class="token punctuation">,</span>c<span class="token operator">++</span>规定<span class="token keyword">void</span><span class="token operator">*</span>可以强转为任何其他类型的指针，关于<span class="token keyword">void</span>还有一种说法就是其他任何类型都可以直接赋值给它，无需进行强转，但是反过来不可以malloc<span class="token operator">:</span>malloc分配的内存大小至少为参数所指定的字节数malloc的返回值是一个指针，指向一段可用内存的起始位置，指向一段可用内存的起始地址，多次调用malloc所分配的地址不能有重叠部分，除非某次malloc所分配的地址被释放掉malloc应该尽快完成内存分配并返回（不能使用NP<span class="token operator">-</span>hard的内存分配算法）实现malloc时应同时实现内存大小调整和内存释放函数（realloc和free）malloc和free是配对的，如果申请后不释放就是内存泄露，如果无故释放那就是什么也没做，释放只能释放一次，如果一块空间释放两次或者两次以上会出现错误（但是释放空指针例外，释放空指针也等于什么也没做，所以释放多少次都是可以的。）<span class="token number">2</span>、malloc和newnew返回指定类型的指针，并且可以自动计算所需要的大小。    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">//返回类型为int* ，分配的大小是sizeof(int)</span>p <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回类型是int*类型，分配的大小为sizeof(int)*100</span>而malloc需要我们自己计算字节数，并且返回的时候要强转成指定类型的指针。    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span>）malloc的返回是<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span>如果我们写成了：p<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>间接的说明了（将<span class="token keyword">void</span>转化给了<span class="token keyword">int</span><span class="token operator">*</span>，这不合理）（<span class="token number">2</span>）malloc的实参是<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>，用于指明一个整型数据需要的大小，如果我们写成p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>那么可以看出：只是申请了一个一个字节大小的空间。（<span class="token number">3</span>）malloc只管分配内存，并不能对其进行初始化，所以得到的一片新内存中，其值将是随机的。一般意义上：我们习惯性的将其初始化为<span class="token constant">NULL</span>，当然也可以使用memset函数。简单的说：malloc函数其实就是在内存中找一片指定大小的空间，然后将这个空间的首地址给一个指针变量，这里的指针变量可以是一个单独的指针，也可以是一个数组的首地址，这要看malloc函数中参数size的具体内容。我们这里malloc分配的内存空间在逻辑上是连续的，而在物理上可以不连续。我们作为程序员，关注的是逻辑上的连续，其他的操作系统会帮着我们处理。下面就来看看malloc具体是怎么实现的。首先要了解操作系统相关的知识：虚拟内存地址和物理内存地址为了简单，现代操作系统在处理物理内存地址时，普遍采用虚拟内存地址技术。即在汇编程序层面，当涉及内存地址时，都是使用的虚拟内存地址。采用这种技术时，每个进程仿佛自己独享一片<span class="token number">2</span>N字节的内存，其中N是机器位数。例如在<span class="token number">64</span>位CPU和<span class="token number">64</span>位操作系统下每个进程的虚拟地址空间为<span class="token number">264</span>Byte。这种虚拟地址空间的作用主要是简化程序的编写及方便操作系统对进程间内存的隔离管理，真实中的进程不太可能如此大的空间，实际能用到的空间大小取决于物理内存的大小。由于在机器语言层面都是采用虚拟地址，当实际的机器码程序涉及到内存操作时，需要根据当前进程运行的实际上下文将虚拟地址转化为物理内存地址，才能实现对内存数据的操作。这个转换一般由一个叫MMU的硬件完成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入实现操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Insert</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">{</span>    List p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//新结点插入在表头</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请、填装结点</span>        s <span class="token operator">-&gt;</span> Data <span class="token operator">=</span> X<span class="token punctuation">;</span>        s <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> PtrL<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token comment">//返回新表头指针</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1.</span>PtrL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找第i-1个结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第i-1个不存在，不能插入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"参数i错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请、填装结点</span>        s <span class="token operator">-&gt;</span> Data <span class="token operator">=</span> X<span class="token punctuation">;</span>        s <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> p <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span><span class="token comment">//新结点插入在第i-1个结点的后面</span>        p <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> PtrL<span class="token punctuation">;</span> <span class="token comment">//这种情况下链表的头指针是不会变的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//平均查找次数是n/2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除(删除链表的第i(1 &lt;=  i  &lt;= n)个位置上的结点)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//(1)先找到链表的第i-1个结点，用p指向;</span><span class="token comment">//(2)再用指针s指向要被删除的结点(p的下一个结点);</span><span class="token comment">//(3)然后修改指针，删除s所指结点;</span><span class="token comment">//(4)删除的结点(s)的空间要记得free释放掉(重要)，这样内存空间才不会泄漏</span>List <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">{</span>    List p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若要删除的是表的第一个结点</span>        s <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token comment">//s指向第一个结点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PtrL <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> PtrL <span class="token operator">=</span> PtrL <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放掉被删除结点</span>        <span class="token keyword">return</span> PtrL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>PtrL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查找第i-1个结点，就是要删除结点的前一个结点在哪里</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个结点不存在"</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> Next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个结点不存在"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        s <span class="token operator">=</span> p <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span><span class="token comment">//s指向第i个结点</span>        p <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> s <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span><span class="token comment">//从链表中删除</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放被删除结点</span>        <span class="token keyword">return</span> PtrL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//平均时间复杂度也是n/2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628010648646.png" alt="image-20220628010648646" style="zoom:50%;"></li></ol><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628010948589.png" alt="image-20220628010948589" style="zoom:50%;"><h3 id="2-1-6-广义表与多重链表"><a href="#2-1-6-广义表与多重链表" class="headerlink" title="2.1.6 广义表与多重链表"></a>2.1.6 广义表与多重链表</h3><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628012708073.png" alt="image-20220628012708073" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628012841252.png" alt="image-20220628012841252" style="zoom:50%;"><p>原本a,b,c所在的位置变成了指针，指向另一个一元多项式。这种就是广义表</p><h3 id="广义表-Generalized-List"><a href="#广义表-Generalized-List" class="headerlink" title="广义表(Generalized List)"></a>广义表(Generalized List)</h3><ol><li><p>广义表是线性表的推广</p></li><li><p>对于线性表而言，n个元素都是基本的单元素;</p></li><li><p>广义表中，这些元素不仅可以是单元素也可以是另一个广义表</p></li><li><p>广义表可能会碰到的问题：一个域有可能不能分解的单元，有可能是一个指针(C语言的解决方法是使用union(联合))</p></li><li><p>union(联合)：可以把不同类型的数据组合在一起，可以把这个空间理解成某种类型，也可以理解为另外一种类型</p></li><li><p>区分类型的方法：再弄个标记</p></li><li><p>```c<br>typedef struct GNode *GList;<br>struct GNode{<br>int Tag;//标志域：0表示结点时单元素，1表示结点是广义表   这个Tag就是标志<br>union{//子表指针域Sublist与单元素数据域Data复用，即共同存储空间<br>    ElementType Data;<br>    GList SubList;<br>}URegion;<br>GList Next;//指向后续结点<br>};</p><pre class="line-numbers language-none"><code class="language-none">   &lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628013451554.png" alt="image-20220628013451554" style="zoom:50%;" /&gt;### 多重链表**多重链表**：链表中的节点可能同时隶属于多个链1. 多重链表中结点的指针域会有多个，如前面例子包含了Next和SubList两个指针域;2. 但包含两个指针域的链表并不一定是多重链表，比如在双向链表不是多重链表。多重链表有广泛的用途：基本上如树，图这样相对复杂的数据结构都可以采用多重链表的方式实现存储多重链表指的是它里面的这个链表的结点可能同时隶属于多个链表(意思就是表中的指针会有多个)&lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628014523266.png" alt="image-20220628014523266" style="zoom:50%;" /&gt;稀疏矩阵：矩阵中的0很多，会造成空间浪费二维数组可以用来表示选课的一种记录上图中就是用多重链表来表示稀疏矩阵的一种方法&lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628015146123.png" alt="image-20220628015146123" style="zoom:50%;" /&gt;上图中的行与列相互穿插在一起形成十字链表Head是作为行这个链表的头结点，也作为列这个链表的头结点Tem：代表稀疏矩阵里面的非零的项&lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628015420650.png" alt="image-20220628015420650" style="zoom:40%;" /&gt;上图：4代表这个稀疏矩阵共有4行，总共有5列，非零项个数总共有7项通过上图那个指针就可以找到所有列的头节点在矩阵的多重链表表示中，第i行的head和第i列的head实际上是同一个结点(正确)1. 用一个标识域Tag来区分头结点和非0元素结点2. 头节点的标识值为"Head"，矩阵非0元素结点的标识值为"Term"   &lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628015932693.png" alt="image-20220628015932693" style="zoom:50%;" /&gt;经过union的串联在一起，他们共性都是有两个指针：一个Down，一个Right。他们不一样的地方在中间部分。所有我们可以把他们union在一起，形成(a)这个结构以上就是稀疏矩阵用十字链表解决的一种基本思路## 2.2.1 什么是堆栈**计算机如何进行表达式求值？**&lt;img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628024357415.png" alt="image-20220628024357415" style="zoom:50%;" /&gt;由两类对象构成的：1. 运算数，如2、3、42. 运算符号,如+、-、*、/不同运算符号优先度不一样**后缀表达式：**运算符号位于两个运算数之后。如abc*+de/-**中缀表达式：**运算符号位于两个运算数之间。如a+b*c-d/e两个表达式其实是同一个意思还有一种表达式叫“**前缀表达式**”，即运算符号位于运算数之前,比如a+b*c的前缀表达式是+a*bc。你能写出a+b*c-d/e的前缀表达式吗？正确答案：-+a*bc/de【例】6 2 / 3 - 4 2 * + = ？   =&gt;   先遇到6然后2接着是/，组成式子得到3，再遇到3然后再遇到-组成式子3-3=0，0接着遇到4跟2然后是*，4 * 2 = 8，然后目前是有0跟8，接着遇到+，相加为8**后缀表达式求值策略**：从左往右"扫描"，逐个处理运算数和运算符号1. 遇到运算数怎么办？如何"记住"目前还未参与运算的数？2. 遇到运算符号怎么办？对应的运算数是什么？3. 启示：需要有种存储方法，能顺序存储运算数，并在需要时"倒序"输出！4. 先放进去的后拿出来，后放进去的先拿出来做运算  =&gt;这就是**堆栈**5. T(N) = O(N)### 堆栈的抽象数据类型描述**堆栈(Stack):**具有一定操作约束的线性表1. 只在一端(栈顶，Top)做插入、删除2. 插入数据：**入栈(Push)**3. 删除数据：**出栈(Pop)**4. **后入先出**：Last In First Out(LIFO) 这是特点**数据对象集(堆栈)：**一个有0个或者多个元素的有穷线性表**操作集(堆栈)：**长度为MaxSize的堆栈S 属于Stack，堆栈元素item 属于ElementType```c1. Stack CreateStack( int MaxSize)：生成空堆栈，其最大长度为MaxSize;2. int IsFull(Stack S,int MaxSize)：判断堆栈S是否已满;3. void Push(Stack S, ElementType item )：将元素item压入堆栈;(重点)相当于插入操作，需要判别堆栈有没有满或空4. int IsEmpty(Stack S)：判断堆栈S是否为空;5. ElementType Pop(Stack S)：删除并返回栈顶元素;(重点)相当于删除操作，需要判别堆栈有没有满或空。空了就不能删除了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628032111469.png" alt="image-20220628032111469" style="zoom:50%;"><p><strong>Push和Pop可以穿插交替进行</strong>;</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628032222743.png" alt="image-20220628032222743" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628032242421.png" alt="image-20220628032242421" style="zoom:50%;"><p>按ABC顺序入栈，可以产生CAB这样的出栈序列？不可以，是CBA序列</p><p><strong>Push：推(压入)</strong></p><p><strong>Pop：弹出</strong></p><h2 id="2-2-2-堆栈的顺序存储实现"><a href="#2-2-2-堆栈的顺序存储实现" class="headerlink" title="2.2.2 堆栈的顺序存储实现"></a>2.2.2 堆栈的顺序存储实现</h2><h3 id="栈的顺序存储实现"><a href="#栈的顺序存储实现" class="headerlink" title="栈的顺序存储实现"></a>栈的顺序存储实现</h3><pre class="line-numbers language-none"><code class="language-none">栈的顺序存储结构通常由一个一维数组和一个记录栈顶元素位置的变量组成<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token operator">&lt;</span>存储数据元素的最大个数<span class="token operator">&gt;</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span>Stack<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">{</span>    ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Top<span class="token punctuation">;</span><span class="token comment">//用来指示栈顶的位置，Top不是地址而是一个整型变量，代表了栈顶位置它的数组下标在哪里</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//(1)入栈</span><span class="token keyword">void</span> <span class="token function">Push</span> <span class="token punctuation">(</span>Stack PtrS<span class="token punctuation">,</span> ElementType item<span class="token punctuation">)</span><span class="token comment">//包含两个参数，一个是堆栈本身，一个是用指针表示PtrS(Stack类型指针，Stack本身就是堆栈的意思)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> PtrS <span class="token operator">-&gt;</span> Top <span class="token operator">==</span> MaxSize <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//入栈需要判断堆栈满了没有，满了就不能再加了，有极限的。下标从0开始，所以到MaxSize-1就已经满了</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈满"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        PtrS <span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token comment">//item放在Top上面的一个位置，这一个语句实际做了两个事情，一是把item放到Top+1这个位置上，同时把Top值加实现了入栈的操作</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//(2)出栈</span>ElementType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack PtrS<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一样的操作，出栈之前要检查以下是不是空了，空了可就没东西往外掏了</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">//ERROR是ElementType的特殊值，标志错误</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span><span class="token punctuation">(</span>PriS <span class="token operator">-&gt;</span> Top<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">【例】请用一个数组实现两个堆栈，要求最大地利用数组空间，使数组只要有空间入栈操作就可以成功<span class="token comment">//简单将把数组对分的话来做两个堆栈会有一个问题：有一个堆栈满了，但另一个堆栈是空的，还有空余空间</span><span class="token comment">//要求是数组还有空余空间，就允许有入栈操作</span><span class="token comment">//用法就是一个从最左边往里放，另一个从最右边往里放。中间就是空余的大家都可以用</span><span class="token comment">//根据刚才讲的方法，用一个数组来表示双堆栈，如果这两个堆栈的栈顶位置分别是top1和top2，那么可以用top1+top2==MaxSize(数组大小）来判别堆栈是否满？不可以</span><span class="token comment">//因为top1跟top2代表的是数组的下标，所以top1代表的距离是中间空余的位置＋top2，top2也是同理</span><span class="token comment">//正确的分析：使这两个栈分别从数组的两头开始向中间生长；当两个栈的栈顶指针相遇时，表示两个栈都满了</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span><span class="token expression"><span class="token operator">&lt;</span>存储数据元素的最大个数<span class="token operator">&gt;</span></span></span>    <span class="token keyword">struct</span> <span class="token class-name">DStack</span><span class="token punctuation">{</span>        ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Top1<span class="token punctuation">;</span><span class="token comment">//堆栈1的栈顶指针</span>        <span class="token keyword">int</span> Top2<span class="token punctuation">;</span><span class="token comment">//堆栈2的栈顶指针</span>    <span class="token punctuation">}</span>S<span class="token punctuation">;</span>S<span class="token punctuation">.</span>Top1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//这是堆栈1空的位置</span>S<span class="token punctuation">.</span>Top2 <span class="token operator">=</span> MaxSzie<span class="token punctuation">;</span><span class="token comment">//堆栈2空的位置，数组最后一个位置是MaxSize - 1</span><span class="token comment">//Push(弹出)具体操作</span><span class="token keyword">void</span> <span class="token function">Push</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DStack</span> <span class="token operator">*</span>PtrS<span class="token punctuation">,</span>ElementType item<span class="token punctuation">,</span><span class="token keyword">int</span> Tag <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//Tag作为区分两个堆栈的标志，取值为1和2，Tag的值1和2分别代表第一个堆栈跟第二个堆栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> PtrS <span class="token operator">-&gt;</span> Top2 <span class="token operator">-</span> PtrS <span class="token operator">-&gt;</span> Top1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//对第一个堆栈操作</span>        PtrS <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token comment">//Top1后面一个位置</span>    <span class="token keyword">else</span><span class="token comment">//对第二个堆栈进行操作</span>        PtrS <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token comment">//Top2前面一个位置</span><span class="token punctuation">}</span><span class="token comment">//Pop(压入)操作</span>ElementType <span class="token function">Pop</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DStack</span> <span class="token operator">*</span>PtrS<span class="token punctuation">,</span><span class="token keyword">int</span> Tag <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//Tag作为区分两个堆栈的标志，取值为1和2，Tag的值1和2分别代表第一个堆栈跟第二个堆栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//对第一个堆栈进行操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> PtrS <span class="token operator">-&gt;</span> Top1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//堆栈1空</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈1空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> PtrS <span class="token operator">-&gt;</span> Data <span class="token punctuation">[</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top1<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//对第二个堆栈操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> PtrS <span class="token operator">-&gt;</span> Top2 <span class="token operator">==</span> MaxSize<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//堆栈2空</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈2空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> PtrS <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span><span class="token punctuation">(</span>PtrS <span class="token operator">-&gt;</span> Top2<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下部分是百度内容(对堆栈的总结)</p><pre class="line-numbers language-none"><code class="language-none">堆栈严格来说应该叫做栈（stack），先入后出四种类型：满增栈、满减栈、空增栈、空减栈。 满、空栈区别：根据当前指针所在位置是否有东西。满栈（full stack）：栈指针指向最后压入栈的数据，数据入栈时，sp先减一（或加一）再入栈。空栈（empty stack）：栈指针指向下一个将要放入数据的位置，数据入栈时，先入栈sp再减一（或加一）。 增、减栈区别：根据堆栈的生成方向不同。递增堆栈(ascending stack)：堆栈由低地址向高地址生长。递减堆栈(secending stack)：堆栈由高地址向低地址生长。 总结： 满栈进栈是先移动指针再存；满栈出栈是先出数据再移动指针；空栈进栈先存再移动指针；空栈出栈先移动指针再取数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-3-堆栈的链式存储实现"><a href="#2-2-3-堆栈的链式存储实现" class="headerlink" title="2.2.3 堆栈的链式存储实现"></a>2.2.3 堆栈的链式存储实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">栈的链式存储结构实际上就是一个单链表，叫做链栈。插入和删除操作只能再链栈的栈顶进行。栈顶指针Top应该再链表的哪一头？若用单向链表实现一个堆栈，链表的头和尾都可以作为top？只有链表的头才行。链表的尾空余插入，但是删除就有问题，找不到前面的结点了，因为这是单项链表找不到前面的结点        <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span>Stack<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">{</span>        ElementType Data<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span>Next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628045906099.png" alt="image-20220628045906099" style="zoom:50%;"><pre class="line-numbers language-C" data-language="C"><code class="language-C">Stack CreateStack(){//构建一个堆栈的头结点，返回指针    Stack S;    S = (Stack)malloc(sizeof(struct SNode));    s-&gt;Next = NULL;    return S;}int IsEmpty(Stack S){    //判断堆栈s是否为空，若为空函数返回整数1，否则返回0    return (S-&gt;Next == NULL);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628050006254.png" alt="image-20220628050006254" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>ElementType item<span class="token punctuation">,</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将元素item压入堆栈S</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span>TmpCell<span class="token punctuation">;</span>    TmpCell <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TmpCell <span class="token operator">-&gt;</span> Element <span class="token operator">=</span> item<span class="token punctuation">;</span>    TmpCell <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> S <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span>    S <span class="token operator">-&gt;</span> Next <span class="token operator">=</span> TmpCell<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用链表来进行Push操作的时候不用判别堆栈满不满的问题，因为链表通过不断申请结点空间往里面插</p><p>数组实现堆栈的话，数组大小是固定的，存在着满不满的问题</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628050745839.png" alt="image-20220628050745839" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除并返回堆栈s的栈顶元素</span>    <span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span>FirstCell<span class="token punctuation">;</span>    ElementType TopElem<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">IsEmpty</span> <span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"堆栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        FirstCell <span class="token operator">=</span> S <span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>        TopElem <span class="token operator">=</span> FirstCell <span class="token operator">-&gt;</span> Element<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>FirstCell<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> TopElem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-4-堆栈应用：表达式求值"><a href="#2-2-4-堆栈应用：表达式求值" class="headerlink" title="2.2.4 堆栈应用：表达式求值"></a>2.2.4 堆栈应用：表达式求值</h2><h3 id="回忆：应用堆栈实现后缀表达式求值的基本过程："><a href="#回忆：应用堆栈实现后缀表达式求值的基本过程：" class="headerlink" title="回忆：应用堆栈实现后缀表达式求值的基本过程："></a>回忆：应用堆栈实现后缀表达式求值的基本过程：</h3><ol><li>从左到右读入后缀表达式的各项(运算符或运算数);</li></ol><pre class="line-numbers language-none"><code class="language-none">1.运算数：入栈;2.运算符：从堆栈中弹出适当数量的运算数，计算并结果入栈;3.最后，堆栈顶上的元素就是表达式的结果值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中缀表达式求值"><a href="#中缀表达式求值" class="headerlink" title="中缀表达式求值"></a>中缀表达式求值</h3><pre class="line-numbers language-none"><code class="language-none">基本策略：将中缀表达式转化为后缀表达式，然后求值如何将中缀表达式转化为后缀？观察一个简单例子：2+9/3-5  -&gt;  2 9 3 / + 5 -1.运算数相对顺序不变2.运算符号顺序发生改变1.需要存储"等待中"的运算符号2.要将当前运算符号与"等待中"的最后一个运算符号比较(如果前面的一个运算符号的优先级比我来得高，就说明可以拿来计算，如果优先度比我低，那么当前的运算符号还不能说就直接拿来运算，因为后面可能还有优先级比我高的，所以需要保留起来，这个时候我们就需要一种结构来实现我们运算符号的存储，那结构就是堆栈)输出：2 9 3记下：+ /碰到运算数 我们就把它输出碰到运算符号 我们等着有括号怎么办？【例】a*(b+c)/d = ?a b c + * d /当括号被丢进堆栈里面的时候，它的优先级降到最低，优先算括号里的内容算数规则：当遇到同一个优先级的时候，它的顺序是从左到右T(N) = O(N)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628210030460.png" alt="image-20220628210030460" style="zoom:50%;"><p>请试试应用堆栈将中缀表达式2*(6/3+4)-5转换为后缀表达式。在这个转换过程中，堆栈元素最多时元素个数是多少？3个</p><pre class="line-numbers language-none"><code class="language-none">中缀表达式如何转换为后缀表达式从头到尾读取中缀表达式的每个对象，对不同对象按不同的情况处理。1.运算数：直接输出2.左括号：压入堆栈3.右括号：将栈顶的运算符弹出并输出，直到遇到左括号(出栈，不输出);4.运算符：1.若优先级大于栈顶运算符时，则把它压栈;2.若优先级小于等于栈顶运算符时，将栈顶运算符弹出并输出;再比较新的栈顶运算符，直到该运算符大于栈顶运算符优先级为止，然后将该运算符压栈;5.若各对象处理完毕，则把堆栈中存留的运算符一并输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220628215153143.png" alt="image-20220628215153143" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">堆栈的其他应用：函数的调用及递归实现深度优先搜索(图)回溯算法(老鼠走迷宫案例)等等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-队列及实现"><a href="#2-3-队列及实现" class="headerlink" title="2.3 队列及实现"></a>2.3 队列及实现</h2><p>队列跟堆栈一样是一种受限制的线性表</p><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p><strong>队列(Queue)：</strong>具有一定操作约束的线性表</p><ol><li>插入和删除操作：只能一端插入，而在另一端删除(一般的线性表都可以在任何位置进行插入和删除)</li><li>跟堆栈相比：堆栈插入和删除都是只能在一端</li><li>数据插入：<strong>入队列(AddQ)</strong></li><li>数据删除：<strong>出队列</strong>(<strong>DeleteQ</strong>)</li><li>先来先服务(跟堆栈相反)</li><li>先进先出：FIFO</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">队列的抽象数据类型描述    类型名称<span class="token operator">:</span>队列<span class="token punctuation">(</span>Queue<span class="token punctuation">)</span>    数据对象集：一个有<span class="token number">0</span>个或多个元素的有穷线性表    操作集：长度为MaxSize的队列Q属于Queue，队列元素item属于ElementType                <span class="token number">1.</span>Queue <span class="token function">CreateQueue</span><span class="token punctuation">(</span> <span class="token keyword">int</span> MaxSize <span class="token punctuation">)</span>：生成长度为MaxSize的空队列；        <span class="token number">2.</span><span class="token keyword">int</span> <span class="token function">IsFullQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span>：判断队列Q是否已满<span class="token punctuation">;</span><span class="token number">3.</span><span class="token keyword">void</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span>：将数据元素item插入队列Q中        <span class="token number">4.</span><span class="token keyword">int</span> <span class="token function">IsEmptyQ</span><span class="token punctuation">(</span> Queue Q<span class="token punctuation">)</span><span class="token operator">:</span>判断队列Q是否为空<span class="token punctuation">;</span><span class="token number">5.</span>ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span> Queue Q<span class="token punctuation">)</span><span class="token operator">:</span>将队头元素从队列中删除并返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-1-队列的顺序存储实现"><a href="#2-3-1-队列的顺序存储实现" class="headerlink" title="2.3.1 队列的顺序存储实现"></a>2.3.1 队列的顺序存储实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">队列的顺序存储结构通常由一个一维数组和一个记录队列头元素位置的变量front以及一个记录队列尾元素位置的变量rear组成的    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token operator">&lt;</span>储存数据元素的最大个数<span class="token operator">&gt;</span></span></span>    <span class="token keyword">struct</span> <span class="token class-name">QNode</span><span class="token punctuation">{</span>        ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token comment">//指针</span>        <span class="token keyword">int</span> front<span class="token punctuation">;</span><span class="token comment">//指针</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>Queue<span class="token punctuation">;</span>如果空队列开始时front和rear值都是<span class="token operator">-</span><span class="token number">1</span>，当插入<span class="token number">4</span>个元素并删除<span class="token number">2</span>个元素后，front和rear值分别是多少？<span class="token number">1</span>和<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="顺环队列"><a href="#顺环队列" class="headerlink" title="顺环队列"></a>顺环队列</h4><pre class="line-numbers language-none"><code class="language-none">1.这种方案：堆栈空和满的判别条件是什么？根据front rear的相对关系(就是他们的距离)来判别的font rear的取值范围是0 -- n-12.为什么会出现空，满无法区分？根本原因？如果大小是n的话，font跟rear的差距的情况就是n种，队列的装载元素的情况有n+1种解决方案：(1)使用额外标记：Size或者tag域当加入一个元素的时候Szie加1，删除一个元素的时候Size减1，通过Size等于0还是等于n就可以知道空的还是满的使用标记tag 0 1，当我们插入一个元素的时候tag设为1，删除一个元素的时候tag等于0，当front跟rear相等时不清楚空还是满的时候，观察tag，tag就代表了最后一次操作是插入还是删除，就知道是空还是满(2)仅使用n-1个数组空间(最多放n-1个元素，留一个空位出来就可以避免front跟rear相等的情况)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(1)入队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Queue PtrQ<span class="token punctuation">,</span>ElementType item<span class="token punctuation">)</span><span class="token comment">//item放到队列中 队列使用Queue的结构指针PtrQ来进行表示</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize <span class="token operator">==</span> PtrQ <span class="token operator">-&gt;</span> front<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//具体代换：5+1对6求余为0</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PtrQ <span class="token operator">-&gt;</span> rear <span class="token operator">=</span> <span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>    PtrQ <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span>PtrQ <span class="token operator">-&gt;</span> rear<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)出队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span> Queue PtrQ<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">==</span> PtrQ <span class="token operator">-&gt;</span> rear<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">=</span> <span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token keyword">return</span> PtrQ <span class="token operator">-&gt;</span> Data<span class="token punctuation">[</span>PtrQ <span class="token operator">-&gt;</span> front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-队列的链式存储实现"><a href="#2-3-2-队列的链式存储实现" class="headerlink" title="2.3.2 队列的链式存储实现"></a>2.3.2 队列的链式存储实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">队列的链式存储结构也可以用一个单链表实现。插入和删除操作分别在链表的两头进行；队列指针front和rear应该分别指向链表的哪一头？队列的front也可以设在链表的尾？错误，不行的 只能前面做删除<span class="token punctuation">(</span>front<span class="token punctuation">)</span>，后面做加入<span class="token punctuation">(</span>rear<span class="token punctuation">)</span>，如果倒过来的话，删掉了就不知道前面一个在哪里了        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        ElementType Data<span class="token punctuation">;</span><span class="token comment">//结点本身的信息</span>        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>Next<span class="token punctuation">;</span><span class="token comment">//把结点串在一起</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">QNode</span><span class="token punctuation">{</span><span class="token comment">//链队列结构</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token comment">//指向队尾结点</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>front<span class="token punctuation">;</span><span class="token comment">//指向队头结点</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>Queue<span class="token punctuation">;</span>Queue PtrQ<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629041503372.png" alt="image-20220629041503372" style="zoom:50%;"><p><strong>不带头结点的链式队列出队操作的示例</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Queue PtrQ<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>FrontCell<span class="token punctuation">;</span>    ElementType FrontElem<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FrontCell <span class="token operator">=</span> PtrQ <span class="token operator">-&gt;</span> front<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">==</span> PtrQ <span class="token operator">-&gt;</span> rear<span class="token punctuation">)</span><span class="token comment">//若队列只有一个元素</span>        PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">=</span> PtrQ <span class="token operator">-&gt;</span> rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//删除后队列置为空</span>    <span class="token keyword">else</span>        PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">=</span> PtrQ <span class="token operator">-&gt;</span> front <span class="token operator">-&gt;</span> Next<span class="token punctuation">;</span>    FrontElem <span class="token operator">=</span> FrontCell <span class="token operator">-&gt;</span> Data<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>FrontCell<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放被删除结点空间</span>    <span class="token keyword">return</span> FrontElem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-多项式的加法运算实现"><a href="#2-4-多项式的加法运算实现" class="headerlink" title="2.4 多项式的加法运算实现"></a>2.4 多项式的加法运算实现</h2><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629052314628.png" alt="image-20220629052314628" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">采用不带头结点的单项链表，按照指数递减的顺序排列各项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629052450477.png" alt="image-20220629052450477" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c">具体实现代码<span class="token punctuation">(</span>数据结构<span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> coef<span class="token punctuation">;</span><span class="token comment">//系数</span>    <span class="token keyword">int</span> expon<span class="token punctuation">;</span><span class="token comment">//指数</span>    <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span> link<span class="token punctuation">;</span><span class="token comment">//指向下一个节点的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token operator">*</span>Polynomial<span class="token punctuation">;</span>Polynomial P1<span class="token punctuation">,</span>P2<span class="token punctuation">;</span>多项式加法运算<span class="token punctuation">(</span>算法思路<span class="token punctuation">)</span><span class="token operator">:</span>两个指针p1和p2分别指向这两个多项式第一个结点，不断循环：    <span class="token number">1.</span> P1<span class="token operator">-&gt;</span>expon <span class="token operator">==</span> P2 <span class="token operator">-&gt;</span> <span class="token function">expon</span><span class="token punctuation">(</span>这里比较的其实是指数<span class="token punctuation">)</span>：系数相加，若结果不为<span class="token number">0</span>，则作为结果多项式对应项的系数。同时，P1和P2都分别指向下一项    <span class="token number">2.</span> P1<span class="token operator">-&gt;</span>expon <span class="token operator">&gt;</span> P2 <span class="token operator">-&gt;</span> expon：将P1的当前项存入结果多样式，并使P1指向下一项<span class="token punctuation">;</span>    <span class="token number">3.</span> P1<span class="token operator">-&gt;</span>expon <span class="token operator">&lt;</span> P2 <span class="token operator">-&gt;</span> expon：将P2的当前项存入结果多样式，并使P2指向下一项<span class="token punctuation">;</span>当某一多项式处理完时，将另一个多项式的所有结点依次复制到结果多项式中去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629060519985.png" alt="image-20220629060519985" style="zoom:50%;"><p>演变过程————————分割线</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629060715728.png" alt="image-20220629060715728" style="zoom:50%;"><p>接着是=&gt;</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629060827486.png" alt="image-20220629060827486" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c">函数实现Polynomial <span class="token function">PolyAdd</span><span class="token punctuation">(</span>Polynomial P1<span class="token punctuation">.</span>Polynomial P2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial front<span class="token punctuation">,</span>rear<span class="token punctuation">,</span>temp<span class="token punctuation">;</span><span class="token comment">//多项式的头是第一个，尾巴第二个，</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    rear <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时申请一个空结点作为结果多项式的表头</span>    front <span class="token operator">=</span> rear<span class="token punctuation">;</span><span class="token comment">//由front记录结果多项式链表头结点，申请的空间front都指向它</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>P1 <span class="token operator">&amp;&amp;</span> P2<span class="token punctuation">)</span><span class="token comment">//当两个多项式都有非零待处理时(判空)</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">Compare</span><span class="token punctuation">(</span>P1<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span>P2<span class="token operator">-&gt;</span>expon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比较P1P2这两个项的所指向的当前这个项的指数，第一个值大返回1，第二个值大返回-1，两个值相等返回0</span>                case1<span class="token operator">:</span><span class="token comment">//P1大</span>                <span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-&gt;</span>coef<span class="token punctuation">,</span>P1<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两个参数分别代表我要拷贝的这一项的系数和指数</span>                P1 <span class="token operator">=</span> P1 <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//形成的新的项把它接到rear的后面，P1往后挪</span>                <span class="token keyword">case</span><span class="token operator">-</span><span class="token number">1</span>：<span class="token comment">//P2大</span>                    <span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-&gt;</span>coef<span class="token punctuation">,</span>P2<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>                P2 <span class="token operator">=</span> P2 <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                case0<span class="token operator">:</span><span class="token comment">//一样大</span>                        sum <span class="token operator">=</span> P1<span class="token operator">-&gt;</span>coef <span class="token operator">+</span> P2<span class="token operator">-&gt;</span>coef<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token function">Attach</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>P1<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判定，如果为0就不用加到结果多项式里面去，不为零就把sum作为系数跟对于的指数凑在一起，把他接到rear的后面去</span>                P1 <span class="token operator">=</span> P1 <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span>                P2 <span class="token operator">=</span> P2 <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">//将未处理完的另一个多项式的所有节点依次复制到结果多项式中去</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>P1<span class="token punctuation">;</span>P1 <span class="token operator">=</span> P1 <span class="token operator">-&gt;</span> link<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-&gt;</span>coef<span class="token punctuation">,</span>P1<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个for循环处理P1不空，如果不空就是把P1后面的每一项全部Attach(接到结果多项式的后面的意思)，同时把P1往后挪</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>P2<span class="token punctuation">;</span>P2 <span class="token operator">=</span> P2 <span class="token operator">-&gt;</span> link<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-&gt;</span>coef<span class="token punctuation">,</span>P2<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果P1不空的话P2肯定就空了，也就把P2后面的每一项一个一个拷贝到rear的后面去</span>    rear <span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//指向结果多项式的最后一项</span>    temp <span class="token operator">=</span> front<span class="token punctuation">;</span>    front <span class="token operator">=</span> front <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span><span class="token comment">//令front指向结果多项式第一个非零项</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放临时空表头结点  怎么释放？=&gt;将front赋给temp，然后front往后挪，front原来是指向这个临时的表头结点，这个表头结点的下一项就是我们真正的多项式的第一项 </span>    <span class="token keyword">return</span> front<span class="token punctuation">;</span><span class="token comment">//返回结果多样式中这个单项链表的第一个结点</span><span class="token punctuation">}</span>问题：如果当前p1指向项的（系数，指数）为（<span class="token number">2</span>，<span class="token number">4</span>），同时P2指向项为<span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">6</span><span class="token punctuation">)</span>，那么循环中的<span class="token keyword">switch</span>是执行哪个<span class="token keyword">case</span><span class="token operator">?</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">Attach实现<span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>Polynomial<span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token comment">//传进来的是c跟e的系数跟指数。当前最后一个结点的指针位置传进来的是Polynomial这个类型的指针(Polynomial本身也是指针)，所以pRear实际上是指针的指针</span>    <span class="token comment">//C语言是函数常数值传递</span><span class="token punctuation">{</span>Polynomial P<span class="token punctuation">;</span>P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PloyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结点类型是struct PolyNode这个类型</span>P <span class="token operator">-&gt;</span> coef <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//对新结点赋值</span>P <span class="token operator">-&gt;</span> expon <span class="token operator">=</span> e<span class="token punctuation">;</span>P <span class="token operator">-&gt;</span> link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token operator">-&gt;</span>link <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token comment">//把新申请的结点P插到rear的后面</span><span class="token operator">*</span>pRear <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token comment">//修改pRear值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629070700010.png" alt="image-20220629070700010" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629070712967.png" alt="image-20220629070712967" style="zoom:50%;"><h2 id="小白专场"><a href="#小白专场" class="headerlink" title="小白专场"></a>小白专场</h2><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629071856844.png" alt="image-20220629071856844" style="zoom:50%;"><h4 id="多项式的表示"><a href="#多项式的表示" class="headerlink" title="多项式的表示"></a>多项式的表示</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629072141892.png" alt="image-20220629072141892" style="zoom:50%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c">用链表进行表示    数据结构设计    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span> <span class="token operator">*</span>Polynomial<span class="token punctuation">;</span><span class="token comment">//将结构指针定义为一个新的类型叫做Polynomial</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> coef<span class="token punctuation">;</span><span class="token comment">//系数</span>    <span class="token keyword">int</span> expon<span class="token punctuation">;</span><span class="token comment">//指数</span>    Polynomial link<span class="token punctuation">;</span><span class="token comment">//阈，作为指针指向下一个节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="程序框架搭建"><a href="#程序框架搭建" class="headerlink" title="程序框架搭建"></a>程序框架搭建</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    读入多项式<span class="token number">1</span>    读入多项式<span class="token number">2</span>    乘法运算并输出    加法运算并输出                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>需要设计的函数：    <span class="token number">1.</span>读一个多项式    <span class="token number">2.</span>两多项式相乘    <span class="token number">3.</span>两多项式相加    <span class="token number">4.</span>多项式输出       <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial P1<span class="token punctuation">,</span>P2<span class="token punctuation">,</span>PP<span class="token punctuation">,</span>PS<span class="token punctuation">;</span>        P1 <span class="token operator">=</span> <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P2 <span class="token operator">=</span> <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//P1,P2都是链表的结构的指针</span>    PP <span class="token operator">=</span> <span class="token function">Mult</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span>P2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mult是乘法运算，返回的也是一个结构的指针</span>    <span class="token function">PrintPoly</span><span class="token punctuation">(</span>PP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由PrintPoly来输出多项式</span>    PS <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span>P2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加法运算 </span>    <span class="token function">PrintPoly</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>如何读入多项式    Polynomial <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//先读整数再一对一的读入系数跟指数</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这是读入系数跟指数，放到c跟e里面</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Attach</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读的时候是通过指数递降的顺序来读取的，Rear是可以被改变的，Rear是指向目前为止多项式的最后一项</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//注意：我们是从左到右读入的，而且先读的是指数高的一项，要插到一个链表里面去，然后再读一对数再插进去，再形成一个节点</span><span class="token comment">//再读一对系数指数，再插到多项式里面去，在链表里面也是指数递降的，应该插到原来结果的后面</span>Rear初始值是多少？    两种处理方法：    <span class="token number">1.</span>Rear初值为<span class="token constant">NULL</span><span class="token punctuation">(</span>说明是刚开始的一个节点，这个时候需要申请节点，然后把Rear用<span class="token constant">NULL</span>改为指向这个节点<span class="token punctuation">)</span>    在Attach函数中根据Rear是否为<span class="token constant">NULL</span>做不同处理    如果值不为<span class="token constant">NULL</span>，因为从第二项开始Rear值就不为<span class="token constant">NULL</span>了。这个时候直接把新的节点插到Rear的后面。这样的一种处理方式在Attach函数里面他必须判别Rear是<span class="token constant">NULL</span>还是说不是<span class="token constant">NULL</span>，因为这两者处理的程序是不一样的    <span class="token number">2.</span>Rear指向一个空结点<span class="token punctuation">(</span>程序时更简单<span class="token punctuation">)</span>    需要注意在最后的时候记得把这个空结点释放掉        处理方法<span class="token number">2</span>的具体代码：    <span class="token keyword">void</span> <span class="token function">Attach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>Polynomial<span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token comment">//Polynomial本身也是指针，所以这里的pRear实际是指针的指针(为什么这么做是因为C语言是函数常数直传递)</span><span class="token punctuation">{</span>    Polynomial P<span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P <span class="token operator">-&gt;</span> coef <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//对新结点赋值</span>    P <span class="token operator">-&gt;</span> expon <span class="token operator">=</span> e<span class="token punctuation">;</span>    P <span class="token operator">-&gt;</span> link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token operator">-&gt;</span>link <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token comment">//指针指过去了</span>    <span class="token operator">*</span>pRear <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token comment">//修改pRear值，指到P那里去了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629084605937.png" alt="image-20220629084605937" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629084915089.png" alt="image-20220629084915089" style="zoom:50%;"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629085051166.png" alt="image-20220629085051166" style="zoom:50%;"><p><strong>处理方法2</strong></p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629085848083.png" alt="image-20220629085848083" style="zoom:50%;"><h4 id="读入多项式的完整程序"><a href="#读入多项式的完整程序" class="headerlink" title="读入多项式的完整程序"></a>读入多项式的完整程序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">Polynomial <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial P<span class="token punctuation">,</span>Rear<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>N<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链表头空结点</span>    P <span class="token operator">-&gt;</span> link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Attach</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token comment">//将当前项插入多项式尾部</span>    <span class="token punctuation">}</span>    t <span class="token operator">=</span> P<span class="token punctuation">;</span>P <span class="token operator">=</span> P <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除临时生成的头结点  t指向P，P指向P的link  </span>    <span class="token keyword">return</span> P<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629091612698.png" alt="image-20220629091612698" style="zoom:50%;"><h4 id="如何将两个多项式相乘"><a href="#如何将两个多项式相乘" class="headerlink" title="如何将两个多项式相乘"></a>如何将两个多项式相乘</h4><ol><li><strong>将当前乘法运算转换为加法运算</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">将P1当前项<span class="token punctuation">(</span>ci<span class="token punctuation">,</span>ei<span class="token punctuation">)</span>乘P2多项式，再加到结果多项式里t1 <span class="token operator">=</span> P1<span class="token punctuation">;</span>t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P<span class="token operator">-&gt;</span>link<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//指向空结点的操作</span>Rear <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Attach</span><span class="token punctuation">(</span>t1<span class="token operator">-&gt;</span>coef<span class="token operator">*</span>t2<span class="token operator">-&gt;</span>coef<span class="token punctuation">,</span>t1<span class="token operator">-&gt;</span>expon<span class="token operator">+</span>t2<span class="token operator">-&gt;</span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>t2 <span class="token operator">=</span> t2<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.逐项插入</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">将P1当前项<span class="token punctuation">(</span>c1i<span class="token punctuation">,</span>e1i<span class="token punctuation">)</span>乘P2当前项<span class="token punctuation">(</span>c2i<span class="token punctuation">,</span>e2i<span class="token punctuation">)</span>，并插入到结果多项式中。关键是要找到插入位置初始结果多项式可以由P1第一项乘P2获得<span class="token punctuation">(</span>如上<span class="token punctuation">)</span>        具体代码如下    Polynomial <span class="token function">Mult</span><span class="token punctuation">(</span>Polynomial P1<span class="token punctuation">,</span>Polynomial P2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    t1 <span class="token operator">=</span> P1；t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先用P1的第一项乘以P2,得到P</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    t1 <span class="token operator">=</span> t1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">{</span>        t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token operator">=</span>t1<span class="token operator">-&gt;</span>expon <span class="token operator">+</span> t2<span class="token operator">-&gt;</span>expon<span class="token punctuation">;</span><span class="token comment">//指数相加</span>            c<span class="token operator">=</span>t1<span class="token operator">-&gt;</span>coef<span class="token operator">*</span>t2<span class="token operator">-&gt;</span>coef<span class="token punctuation">;</span><span class="token comment">//系数相乘</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            t2<span class="token operator">=</span>t2<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t1<span class="token operator">=</span>t1<span class="token operator">-</span><span class="token operator">&lt;</span>link<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码块中有三项省略号的地方需要解释，单独分别列出来在下方进行标记</p><p><strong>第一处省略</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Polynomial P<span class="token punctuation">,</span>Rear<span class="token punctuation">,</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>P1<span class="token operator">||</span><span class="token operator">!</span>P2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>t1 <span class="token operator">=</span> P1<span class="token punctuation">;</span>t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Rear <span class="token operator">=</span> P<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二处</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">{</span>t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">{</span>        e <span class="token operator">=</span> t1<span class="token operator">-&gt;</span>expon <span class="token operator">+</span> t2<span class="token operator">-&gt;</span>expon<span class="token punctuation">;</span>        c <span class="token operator">=</span> t1<span class="token operator">-&gt;</span>coef<span class="token operator">*</span>t2<span class="token operator">-&gt;</span>coef<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Rear<span class="token operator">-&gt;</span>link <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>expon<span class="token operator">&gt;</span>e<span class="token punctuation">)</span>        Rear <span class="token operator">=</span> Rear<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Rear<span class="token operator">-&gt;</span>link <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>expon <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Rear<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>coef <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token comment">//判别一下加完是否为0，若不为0则直接加进去，若为0就删掉把内存空间释放</span>           Rear<span class="token operator">-&gt;</span>link<span class="token operator">-&gt;</span>coef <span class="token operator">+=</span> c<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> Rear <span class="token operator">-&gt;</span> link<span class="token punctuation">;</span>            Rear<span class="token operator">-&gt;</span>link <span class="token operator">=</span> t <span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//不相等就是小于的情况，就需要申请一个结点，然后把c跟e赋给这个结点</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">-&gt;</span> coef <span class="token operator">=</span> c<span class="token punctuation">;</span>t<span class="token operator">-&gt;</span>expon <span class="token operator">=</span> e<span class="token punctuation">;</span>        t <span class="token operator">-&gt;</span>link <span class="token operator">=</span> Rear<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>        Rear<span class="token operator">-&gt;</span>link<span class="token operator">=</span>t<span class="token punctuation">;</span>Rear <span class="token operator">=</span> Rear<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        t2 <span class="token operator">=</span> t2<span class="token operator">-&gt;</span>link    <span class="token punctuation">}</span>    t1 <span class="token operator">=</span> t1 <span class="token operator">-&gt;</span> link<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/925/image-20220629214627763.png" alt="image-20220629214627763"></p><p><strong>第三处省略</strong></p><pre class="line-numbers language-none"><code class="language-none">t2 = P; P = P-&gt;link;free(t2);return P;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的正则表达式集合</title>
      <link href="/2022/08/25/dai-ma-kuai-yan-shi/chang-yong-zheng-ze-biao-da-shi/"/>
      <url>/2022/08/25/dai-ma-kuai-yan-shi/chang-yong-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整数或者小数：^[0-9]+.{0,1}[0-9]{0,2}$<br>只能输入数字：”^[0-9]<em>$”<br>只能输入n位的数字：”^\d{n}$”<br>只能输入至少n位的数字：”^\d{n,}$”<br>只能输入m~n位的数字：”^\d{m,n}$”<br>只能输入零和非零开头的数字：”^(0|[1-9][0-9]</em>)$”。<br>只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。<br>只能输入有1<del>3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。<br>只能输入非零的正整数：”^+?[1-9][0-9]<em>$”。<br>只能输入非零的负整数：”^-[1-9][]0-9″</em>$。<br>只能输入长度为3的字符：”^.{3}$”。<br>只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>只能输入由数字和26个英文字母组成的字符串：”^[A-Za-z0-9]+$”。<br>只能输入由数字、26个英文字母或者下划线组成的字符串：”^\w+$”。<br>验证用户密码：”^[a-zA-Z]\w{5,17}$”<br>正确格式为：以字母开头，长度在6</del>18之间，只能包含字符、数字和下划线。验证是否含有^%&amp;’,;=?$\”等字符：”[^%&amp;’,;=?$\x22]+”。<br>只能输入汉字：”^[\u4e00-\u9fa5]{0,}$”<br>验证Email地址：”^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$”。<br>验证InternetURL：”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]</em>)?$”。<br>验证电话号码：”^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$”<br>正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。<br>验证身份证号（15位或18位数字）：”^\d{15}|\d{18}$”。<br>验证一年的12个月：”^(0?[1-9]|1[0-2])$”<br>正确格式为：”01″～”09″和”1″～”12″。<br>验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”<br>正确格式为；”01″～”09″和”1″～”31″。<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）String.prototype.len=function(){return this.replace(/[^\x00-\xff]/g,”aa”).length;}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配html标签的正则表达式：&lt;(.*)&gt;(.</em>)&lt;/(.<em>)&gt;|&lt;(.*)/&gt;<br>匹配首尾空格的正则表达式：(^\s</em>)|(\s*$)<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>利用正则表达式分解和转换IP地址：<br>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：<br>function IP2V(ip){re=/(\d+).(\d+).(\d+).(\d+)/g //匹配IP地址的正则表达式<br>if(re.test(ip)){return RegExp.$1<em>Math.pow(255,3))+RegExp.$2</em>Math.pow(255,2))+RegExp.$3<em>255+RegExp.$4</em>1}else{throw new Error(“Not a valid IP address!”)}}</p><p>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：<br>var ip=”10.100.20.168″ip=ip.split(“.”)alert(“IP值是：”+(ip[0]<em>255</em>255<em>255+ip[1]<em>255</em>255+ip[2]<em>255+ip[3]<em>1))<br>匹配Email地址的正则表达式：\w+([-+.]\w+)</em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]</em>)?<br>利用正则表达式限制网页表单里的文本框输入内容：<br>用正则表达式限制只能输入中文：onkeyup=”value=value.replace(/[^\u4E00-\u9FA5]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\u4E00-\u9FA5]/g,”))”<br>用正则表达式限制只能输入全角字符： onkeyup=”value=value.replace(/[^\uFF00-\uFFFF]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\uFF00-\uFFFF]/g,”))”<br>用正则表达式限制只能输入数字：onkeyup=”value=value.replace(/[^\d]/g,”) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>用正则表达式限制只能输入数字和英文：onkeyup=”value=value.replace(/[\W]/g,”) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>评注：匹配中文还真是个头疼的事，有了这个表达式就好办了匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）匹配空白行的正则表达式：\n\s</em>\r<br>评注：可以用来删除空白行匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?|&lt;.<em>? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力匹配首尾空白字符的正则表达式：^\s</em>|\s*$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>评注：表单验证时很实用匹配网址URL的正则表达式：[a-zA-z]+://[^\s]</em><br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}评注：匹配形式如 0511-4405222 或 021-87888822匹配腾讯QQ号：[1-9][0-9]{4,}<br>评注：腾讯QQ号从10000开始匹配中国邮政编码：[1-9]\d{5}(?!\d)<br>评注：中国邮政编码为6位数字匹配身份证：\d{15}|\d{18}<br>评注：中国的身份证为15位或18位匹配ip地址：\d+.\d+.\d+.\d+<br>评注：提取ip地址时有用匹配特定数字：^[1-9]\d*$<br>//匹配正整数^-[1-9]\d*$<br>//匹配负整数^-?[1-9]\d*$<br>//匹配整数^[1-9]\d*|0$<br>//匹配非负整数（正整数 + 0）^-[1-9]\d*|0$<br>//匹配非正整数（负整数 + 0）^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$<br>//匹配正浮点数^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$<br>//匹配负浮点数^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$<br>//匹配浮点数^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$<br>//匹配非负浮点数（正浮点数 + 0）^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）评注：处理大量数据时有用，具体应用时注意修正匹配特定字符串：^[A-Za-z]+$<br>//匹配由26个英文字母组成的字符串^[A-Z]+$<br>//匹配由26个英文字母的大写组成的字符串^[a-z]+$<br>//匹配由26个英文字母的小写组成的字符串^[A-Za-z0-9]+$<br>//匹配由数字和26个英文字母组成的字符串^\w+$<br>//匹配由数字、26个英文字母或者下划线组成的字符串评注：最基本也是最常用的一些表达式整理出来的一些常用的正则表达式 所属分类: JScript<br>(三)<br>Email : /^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$/<br>isEmail1 : /^\w+([.-]\w+)<em>@\w+([.-]\w+)<em>.\w+$/;<br>isEmail2 : /^.</em>@[^_]</em>$/;<br>Phone : /^(((\d{3}))|(\d{3}-))?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}$/<br>Mobile : /^(((\d{3}))|(\d{3}-))?13\d{9}$/<br>Url : /^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;_~`@[]\’:+!]</em>([^&lt;&gt;""])<em>$/<br>IdCard : /^\d{15}(\d{2}[A-Za-z0-9])?$/<br>Currency : /^\d+(.\d+)?$/<br>Number : /^\d+$/<br>Code : /^[1-9]\d{5}$/<br>QQ : /^[1-9]\d{4,8}$/<br>Integer : /^[-+]?\d+$/<br>Double : /^[-+]?\d+(.\d+)?$/<br>English : /^[A-Za-z]+$/<br>Chinese : /^[\u0391-\uFFE5]+$/<br>UnSafe : /^(([A-Z]</em>|[a-z]<em>|\d</em>|[-_~!@#$%^&amp;*.()[]{}&lt;&gt;?\/\’\”]*)|.{0,5})$|\s/<br>PassWord :^[\w]{6,12}$<br>ZipCode : ^[\d]{6}/^(+\d+ )?((\d+) )?[\d ]+$/;</p><p>//这个是国际通用的电话号码判断/^(1[0-2]\d|\d{1,2})$/;<br>//这个是年龄的判断/^\d+.\d{2}$/;<br>//这个是判断输入的是否为货币值<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）String.prototype.len=function(){return this.replace([^\x00-\xff]/g,”aa”).length;}<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配HTML标记的正则表达式：/&lt;(.*)&gt;.</em>&lt;/\1&gt;|&lt;(.<em>) /&gt;/<br>匹配首尾空格的正则表达式：(^\s</em>)|(\s*$)<br>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]</em>)?^\d+$　　//<br>匹配非负整数（正整数 + 0）^[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配正整数^((-\d+)|(0+))$　　//<br>匹配非正整数（负整数 + 0）^-[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配负整数^-?\d+$　　　　//<br>匹配整数^\d+(.\d+)?$　　//<br>匹配非负浮点数（正浮点数 + 0）^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$　//<br>匹配正浮点数^((-\d+(.\d+)?)|(0+(.0+)?))$　　//<br>匹配非正浮点数（负浮点数 + 0）^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$ //<br>匹配负浮点数^(-?\d+)(.\d+)?$</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb学习笔记</title>
      <link href="/2022/08/18/javaweb-xue-xi-bi-ji/"/>
      <url>/2022/08/18/javaweb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JAVA-WEB"><a href="#JAVA-WEB" class="headerlink" title="JAVA WEB"></a>JAVA WEB</h1><ul><li><h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><ol><li>概念：Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web<strong>服务端</strong>和web<strong>客户端</strong>两部分。(B/S或者C/S)</li><li>WEB分类：<strong>动态WEB资源</strong>(指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同。);<strong>静态WEB资源</strong>(指web页面中供人们浏览的数据始终是不变。)。</li><li>开发技术: <strong>HTML、CSS</strong>(静态web资源开发)；<strong>JavaScript</strong>、JSP/Servlet、ASP、PHP(动态web资源开发)。</li></ol></li><li><h1 id="前端开发三件套"><a href="#前端开发三件套" class="headerlink" title="前端开发三件套"></a>前端开发三件套</h1><blockquote><h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h2><ol><li><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍 "></a>介绍 <br></h3>   <pre class="line-numbers language-none"><code class="language-none">用于处理文字，画面排版，图片显示等作用的标记性语言<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h3 id="HTML文件固定书写格式"><a href="#HTML文件固定书写格式" class="headerlink" title="HTML文件固定书写格式"></a>HTML文件固定书写格式</h3></li></ol></blockquote> <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;!--html页面的开始--&gt;   &lt;head&gt;&lt;!--头标题的开始--&gt;      &lt;title&gt;标签&lt;/title&gt;   &lt;/head&gt;&lt;!--头标题的结束--&gt;   &lt;body&gt;&lt;!--主题内容的开始--&gt;      .....&lt;!--页面主题内容--&gt;   &lt;/body&gt;&lt;!--主题内容的结束--&gt;&lt;/html&gt;&lt;!--html页面的结束--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="3"><li><h3 id="HTML标签介绍"><a href="#HTML标签介绍" class="headerlink" title="HTML标签介绍"></a>HTML标签介绍</h3><blockquote><ul><li>标签格式 <blockquote><p>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</p></blockquote></li><li>标签名对大小写不敏感</li><li>标签属性<blockquote><ol><li>基本属性 如：&lt; body bgcolor=”red”&gt;&lt; /body&gt;</li><li>事件属性 如：&lt; button onclick=”alert(‘hello,world’)”&gt;&lt; /button&gt;</li></ol></blockquote></li><li>标签种类<blockquote><ol><li>单标签：&lt;标签名/&gt; 如：&lt; br/&gt;换行 &lt; hr/&gt;分隔符</li><li>双标签：&lt;标签名&gt;封装数据&lt;/标签名&gt; 如：&lt; body &gt;&lt; /body &gt;</li></ol></blockquote></li><li>标签语法<blockquote><ol><li>标签不能交叉嵌套</li><li>标签必须完整(双标签必须成对出现,单标签必须完整(&lt; br/&gt;))</li><li>属性赋值必须要带双引号 “”</li></ol></blockquote></li></ul></blockquote></li><li><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><blockquote><ul><li>font标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;font color="red" face="宋体" size=5&gt;我是字体标签&lt;/font&gt;&lt;!--   &gt;&gt; 1. font标签(基本属性)       1. size (1~7)       2. face (字体样式)       3. color   --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>标题标签(&lt; h1&gt;标题内容&lt; /h&gt;)<blockquote><ol><li>h1~h6</li><li>align=”left”/“right”/“center”(对齐属性)</li></ol></blockquote></li><li>超链接标签(<a></a>) <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;a href="https://www.baidu.com"&gt;百度&lt;/a&gt;         &lt;!--             基本属性               1. href 存放地址 如:https://www.baidu.com               2. target: _shelf / _blank               3. 列表标签(无序列表/有序列表)         --&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>(无序/有序)列表标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;ul&gt;&lt;!--无序列表的标签 u表示乱序--&gt;            &lt;li&gt;小文&lt;/li&gt;&lt;!--li表示list item--&gt;&lt;!--li表示列表项--&gt;            &lt;li&gt;小红&lt;/li&gt;            &lt;li&gt;小君&lt;/li&gt;            &lt;li&gt;小名&lt;/li&gt;         &lt;/ul&gt;         &lt;ol&gt;&lt;!--有序列表的标签--&gt;&lt;!--o表示order--&gt;            &lt;li&gt;小文&lt;/li&gt;&lt;!--li表示list item--&gt;            &lt;li&gt;小红&lt;/li&gt;            &lt;li&gt;小君&lt;/li&gt;            &lt;li&gt;小名&lt;/li&gt;         &lt;/ol&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>图片标签  (单标签) <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;百度&lt;/title&gt;      &lt;body&gt;         &lt;!--         基本属性            1.src=""设置图片路径            2.width            3.height            4.boder(边框)         web接受路径有两个            1.相对路径：               . 表示当前文件所在的目录               .. 表示当前文件夹上一级的目录               文件名 表示当前文件所在目录的文件 .文件名/ (可以省略)            2.绝对路径               正确格式:https://ip:port/工程名/资源路径         --&gt;         &lt;img src="../img/landscape_sky2.jpg" width="100" height="200" boder="1"/&gt;      &lt;/body&gt;   &lt;/head&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>表格标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;!--            table 是表格标签               1.align 对齐属性               2.width               3.height               4.boder                 5.ceilspacing 单元格间距            tr 表示行标签            th 表示头标签 默认居中               1.colspan 跨行               2.rowspan 跨列            td 表示单元格标签               1.colspan 跨行               2.rowspan 跨列         --&gt;         &lt;table border="1" width="500" height="500" ceilspacing="0"&gt;            &lt;tr&gt;               &lt;th colspan="2"&gt;1.1&lt;/th&gt;                              &lt;th&gt;1.3&lt;/th&gt;               &lt;th&gt;1.4&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;               &lt;th&gt;2.1&lt;/th&gt;               &lt;th&gt;2.2&lt;/th&gt;               &lt;th&gt;2.3&lt;/th&gt;               &lt;th&gt;2.4&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;               &lt;th&gt;3.1&lt;/th&gt;               &lt;th&gt;3.2&lt;/th&gt;               &lt;th&gt;3.3&lt;/th&gt;               &lt;th&gt;3.4&lt;/th&gt;            &lt;/tr&gt;         &lt;/table&gt;      &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>iframe标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;      &lt;head&gt;         &lt;title&gt;百度&lt;/title&gt;         &lt;body&gt;            &lt;!--iframe独立生成一个页面--&gt;            &lt;!--iframe和a标签的应用--&gt;            &lt;!--               1.给iframe命名，给静态资源链接(src)               2.给超文本(href)标签a提供跳转目标target，target与name同名               --&gt;            &lt;iframe src="../img/landscape.jmg" width="500" height="500" name="..."&gt;&lt;/iframe&gt;               &lt;ul&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;                  &lt;li&gt;&lt;a href="..." target="..."&gt;....&lt;/a&gt;&lt;/li&gt;               &lt;/ul&gt;         &lt;/body&gt;      &lt;/head&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>其他标签 <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--    1.div标签 用来“独占一行”   2.span标签 用来“封装数据的长度”   3.p标签 用来“默认在段落的上方或下方空出一行”--&gt;   &lt;div&gt;标签1&lt;/div&gt;   &lt;span&gt;标签2&lt;/span&gt;   &lt;p&gt;标签3&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></li></ol><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h2><blockquote><ul><li><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍 "></a>介绍 <br></h3><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 层叠样式表（CSS）是一种用来表现HTML或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。2. CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。3. 简单来说：css可以更好地丰富网页设计，常常和HTML一起“合作”，增添页面的表现力，同时告诉浏览器，这段样式将应用到哪个对象.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre></li><li><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构 "></a>语法结构 <br></h3> <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">选择器名{   属性：值;//类似于字典键值对,一一对应的映射属性}选择器：浏览器根据选择器决定受css样式影响HTML元素(标签)属性：是你要改变的样式名 被花括号包围 用冒号':'来连接属性和值 形成类似于字典的映射结构多个声明：用分号隔开(便于代码阅读)h1 {  color : red ;  font-size : 16px ;/*px表示像素*/  width : 150px ;  height : 50px ;  border-bottom :  1px  solid  #333 ;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-CSS与HTML的结合方式"><a href="#3-CSS与HTML的结合方式" class="headerlink" title="3. CSS与HTML的结合方式"></a>3. CSS与HTML的结合方式</h3><blockquote><ul><li>内连样式 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;body&gt;&lt;img src="..." width="250" height="163" alt="..."style="border: 4px solid red" /&gt;&lt;/body&gt;/*  1. 一旦标签和样式多了起来，代码冗长且不宜阅读 2. 复用性差      */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>嵌入样式 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;   &lt;head&gt;      &lt;meta charset="utf-8" /&gt;      &lt;title&gt;页面的标题&lt;/title&gt;      &lt;style type="text/css"&gt;         /*下面的style是重点！！！*/         /*在head标签中，用style标签定义自己所需要的css样式 然后在body标签内直接调用 从而提高了代码的复用性*/         /*            缺点：只能在同一个页面进行复用，依然复用性不高         */         img{            border: 4px solid red;         }      &lt;/style&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外连样式(首选) <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">/* 独立创建一个.css文件 然后在HTML文件中用link标签进行调用*/&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;   &lt;head&gt;      &lt;meta charset="utf-8" /&gt;      &lt;title&gt;页面的标题&lt;/title&gt;      /*下面这行是重点！！！*/      &lt;link rel="stylesheet" href="自定义css文件名.css" /&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><h3 id="选择器种类"><a href="#选择器种类" class="headerlink" title="选择器种类"></a>选择器种类</h3></li></ol><ul><li>标签名选择器 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         div{            border: 1px solid yellow ;            font-size: 18;            color: blue;         }/*标签名选择器 div*/      &lt;/style&gt;   &lt;/head&gt;   &lt;body&gt;      ...      &lt;div&gt;title one&lt;/div&gt;   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>id选择器 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         #id001{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div id="id001"&gt;标题&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>class类型选择器 <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         .class01{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div class="class01"&gt;标题&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></blockquote></blockquote><h4 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:<br></h4><p> <strong>ID选择器</strong>和<strong>CLASS选择器</strong>的区别：<br></p><ol><li>一个HTML标签只能应用于一个ID选择器(唯一性)</li><li>一个HTML标签可以应用多个CLASS选择器</li><li>ID选择器是以“#”开头，并且只能在单个元素使用</li><li>CLASS选择器是以“.”开头，可以多个元素应用，中间用“，”隔开</li></ol><blockquote><blockquote><blockquote><ul><li>组合选择器<br><br> 废话不多说直接上代码演示<br> <pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;style type="text/css"&gt;         #id001,.class01{            border: 20px dashed pink;            font-size: 18;            color: black;         }         &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;         &lt;div class="class01"&gt;标题&lt;/div&gt;         &lt;div id="id001"&gt;标题2&lt;/div&gt;         &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></blockquote><h2 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3. JavaScript"></a>3. JavaScript</h2><blockquote><ul><li><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍<br></h3>  <pre class="line-numbers language-none"><code class="language-none">1. JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。2. 它是作为开发Web页面的脚本语言.3. JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><h3 id="JavaScript与HTML结合方式"><a href="#JavaScript与HTML结合方式" class="headerlink" title="JavaScript与HTML结合方式"></a>JavaScript与HTML结合方式</h3><blockquote><ol><li>嵌入样式 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;script type="text/javascript"&gt;      alert("hello JavaScript");//JavaScript提供的一个警告框函数，可以接受任意参数      &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外连样式 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;      &lt;title&gt;标题&lt;/title&gt;      &lt;script type="text/javascript"src="文件名.js"&gt;//提高代码复用率      &lt;/script&gt;//单独创建一个.js文件 同理于css外连样式写法   &lt;/head&gt;   &lt;body&gt;      ...   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote></li></ul></blockquote></blockquote><h4 id="tips：-外连样式和嵌入样式可以组合使用，但不能嵌套使用。"><a href="#tips：-外连样式和嵌入样式可以组合使用，但不能嵌套使用。" class="headerlink" title="tips： 外连样式和嵌入样式可以组合使用，但不能嵌套使用。"></a>tips： 外连样式和嵌入样式可以组合使用，但不能嵌套使用。</h4><blockquote><blockquote><ul><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法<br></h3><blockquote><h4 id="1-变量-类型-x2F-值-x2F-定义格式"><a href="#1-变量-类型-x2F-值-x2F-定义格式" class="headerlink" title="1. 变量(类型/值/定义格式)"></a>1. 变量(类型/值/定义格式)</h4><pre><code> <pre class="line-numbers language-none"><code class="language-none">         1. 数值类型          number         2. 字符串类型        string         3. 对象类型          object         4. 布尔类型          boolean         5. 函数类型          function---         1. undefined         为初始化赋值的变量         2. null              空值         3. NAN(Not a Number) 非数值，非数字---         var 变量名;         变量名=值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;    &lt;script type="text/javascript"&gt;      var i;      i=12;      alert(typeof(i));//typeof()是JavaScript提供的一个检验类型的函数   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   ....   &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h4><blockquote><ul><li>关系运算符<br><br> 使用 <strong>==</strong> 来做相等运算时，当使用==来比较两个值时，<strong>如果值的类型不同，则会自动进行类型转换</strong>，将其转换为相同的类型，然后在比较<br> 使用 <strong>===</strong> 来做全等运算<br> 用来判断两个值<strong>是否全等</strong>，它和相等类似，<strong>不同的是它不会做自动的类型转换</strong>，如果两个值的类型不同，直接返回false</li><li>逻辑运算符<br><ol><li>且运算            &amp;&amp;</li><li>或运算            ||</li><li>取反运算          ！<br>  遵循短路原则(即在且运算中，双真才真;在或运算中,一真即真)</li></ol></li></ul></blockquote><h4 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h4></blockquote></li></ul></blockquote></blockquote><ul><li>定义格式<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;    &lt;head&gt;    &lt;title&gt;标题&lt;/title&gt;     &lt;script type="text/javascript"&gt;       var arr=[];//定义一个空数组 故arr.length的数值为0       arr[0]=123;       alert(arr.length);//数值为1       arr[2]="afdsa";       alert(arr.length);//数值为3       //以上JavaScript代码结果说明数组会根据最大的下标进行自动扩容    &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;    ....    &lt;/body&gt; &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><blockquote><h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4></blockquote></blockquote></blockquote></li><li>定义格式(两种) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;function 函数名(形参列表){//关键字function构建函数   函数体;}函数名();//函数调用function 函数名2(a,b){//形参列表中的形参不需要带var，直接变量名即可   return a+b;}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;var 函数名=function(形参列表){   函数体;}函数名();//调用&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="tips-在js中不允许重载-后一项函数会覆盖前一项的函数。"><a href="#tips-在js中不允许重载-后一项函数会覆盖前一项的函数。" class="headerlink" title="tips:在js中不允许重载,后一项函数会覆盖前一项的函数。"></a>tips:在js中不允许重载,后一项函数会覆盖前一项的函数。</h4><ul><li><p>函数的隐形参数——arguments<br><br>  在function函数中不需要定义，但却可以直接获取所有参数的变量</p> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function fun1()   {      for(var i=0;i&lt;arguments.length;i++&gt;){         alert(arguments[i]);      }   }   fun1(1,2,"abs");   function sum(){      var result=0;      for(var j=0;j&lt;arguments.length;j++&gt;){         result+=arguments[j];      }return result;   }   sum(1,2,3,4,5,6,7,70);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><blockquote><blockquote><h4 id="5-对象"><a href="#5-对象" class="headerlink" title="5. 对象"></a>5. 对象</h4></blockquote></blockquote></blockquote><ul><li>定义格式(两种) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;   &lt;script type="text/javascript"&gt;      var obj=new Object();//对象=属性+方法      obj.age=20;//属性      obj.name="hjy";      obj.fun=funtion(){//方法      alert("年龄："+this.age+"姓名："+this.name);      }      alert(obj.name);      //alert(obj.fun());      obj.fun();   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   &lt;/body&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;   &lt;head&gt;   &lt;title&gt;标题&lt;/title&gt;   &lt;script type="text/javascript"&gt;      var obj={//obj对象名         name: "hjy",//用逗号隔开！！！         age: 20,         fun1:funtion(){//fun1函数名            alert("what the fuck?!")         }//最后一个不用标点      }   &lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;   &lt;/body&gt;   &lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><blockquote><h4 id="6-js的事件"><a href="#6-js的事件" class="headerlink" title="6. js的事件"></a>6. js的事件</h4><p> 事件：电脑输入设备与页面进行交互响应，我们称之为事件。</p></blockquote></blockquote></blockquote></li><li>常用事件 <br><ol><li>onload 加载完成事件</li><li>onclick 单击事件</li><li>onblur 失去焦点事件</li><li>onchange 内容发生改变事件</li><li>onsubmit 表单提交事件</li></ol></li><li>事件注册<ol><li>静态注册<br><br>通过HTML标签的事件属性直接赋予事件响应后的代码</li><li>动态注册<br><br>通过js代码得到<strong>标签的dom对象</strong>，然后在通过**dom对象.事件名=funtion(){}**这种形式赋予事件响应的代码 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;title&gt;&lt;script type="text/javascript"&gt;   funtion sum(a,b){      return a+b;   }&lt;/script&gt;&lt;/head&gt;&lt;body onclick="sum(1,2)"&gt;//静态注册(绑定)&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;title&gt;&lt;script type="text/javascript"&gt;   window.onload=funtion(){      alert("动态绑定事件onload");//动态注册(绑定)   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li>onclick事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   funtion onclickFun(){      alert("what the hell?!");   }   window.onload=funtion(){      var hjyObj=document.getElementById("hjy16");//js创建dom对象hjyObj      hjyObj.onclick=funtion(){//然后hjyObj.事件名=funtion(){代码块}         alert("动态绑定事件");      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;button onclick="onclickFun()"&gt;按钮1&lt;/button&gt;//调用函数 提高复用率 静态注册   &lt;button id="hjy16"&gt;按钮2&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onblur事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onblurFun(){      alert("静态事件onblur");   }   window.onload=function(){      var obj1=document.getElementById("awsl");      obj1.onclick=function(){         console.log("动态事件onblur绑定");//console是javascript提供的控制台对象,专门用来控制浏览器的控制器打印输出，用于测试      }//log()是打印方法   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   用户名:&lt;input type="text" onblur="onblurFun();"/&gt;&lt;br/&gt;   用户密码: &lt;input type="password" id="awsl"/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onchange事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onchangeFun(){      alert ("女神已经改变了");   }   window.onload=function(){      var sel1=document.getElementById("sel01");      sel1.onchange=function(){       alert("男神已经改变了") ; //事件onchange的响应的代码块      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;select&gt;   &lt;option&gt;白敬亭&lt;/option&gt;   &lt;option&gt;杨洋&lt;/option&gt;   &lt;option&gt;彭于晏&lt;/option&gt;   &lt;/select&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>onsubmit事件(废话不多说 直接上代码) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function onsubmitFun(){      alert("发现不合法");      return false;   }   window.onload=function(){      var sub1=document.getElementById("sub01");      sub1.onsubmit=function(){       alert("发现不合法");       return false; //事件onsubmit的响应的代码块      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;form action="网址..." method="get" onsubmit="return onsubmitFun()"&gt;//记得return！！！   &lt;input type="submit" value="静态注册"/&gt;   &lt;/form&gt;   &lt;form action="网址..." id="sub01"&gt;   &lt;input type="submit" value="动态注册"/&gt;   &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><ul><li><h3 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h3></li></ul></blockquote></blockquote></li></ul><ol><li>概述<br>HTML <strong>DOM</strong> 模型被结构化为 <strong>对象树</strong> : <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;文档标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="..."&gt;我的链接&lt;/a&gt;&lt;h1&gt;我的标题&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="/./../img/dom.png" alt="图片"></li><li>作用<br></li></ol></li><li>Javascript可以创建<strong>动态</strong>的HTML</li><li>JavaScript 能改变页面中的所有 <strong>HTML 元素</strong></li><li>JavaScript 能改变页面中的所有 <strong>HTML 属性</strong></li><li>JavaScript 能改变页面中的所有 <strong>CSS 样式</strong></li><li>JavaScript 能<strong>删除</strong>已有的 HTML 元素和属性</li><li>JavaScript 能<strong>添加</strong>新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件<strong>作出反应</strong></li><li>JavaScript 能在页面中<strong>创建新的 HTML 事件</strong><ol start="3"><li>代码演示 <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   function cliclkFun(){      var usernameObj=document.getElementById("username");      var usernameText=usernameObj.value;      var patt=/^\w(5,12)&amp;/;//正则表达式(要求字符串只能是由数字，字母和下划线构成且长度在5-12之间)      if(patt.test(usernameText)){         alert("用户名合法");      }else{         alert("用户名不合法");      }   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;用户名：&lt;input type="text" id="username" value="hjy"/&gt;&lt;button onclick="clickFun()"&gt;校验&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><ul><li><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3> <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;html&gt;&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;script type="text/javascript"&gt;   var str="alskfhal";   var patt=/e/;   if(patt.test(str)){      alert("字符串正确");   }else{      alert("字符串错误");   }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 常用正则表达式看下一篇博客文章(doge)</li></ul></blockquote></blockquote></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单制作</title>
      <link href="/2022/08/18/biao-dan-zhi-zuo/"/>
      <url>/2022/08/18/biao-dan-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="制作一个表单页面"><a href="#制作一个表单页面" class="headerlink" title="制作一个表单页面"></a>制作一个表单页面</h1><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;表单&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;                &lt;form&gt;            &lt;h1 align="center"&gt;登录首页&lt;/h1&gt;            &lt;input type="hidden" name="action" value="login"/&gt;            &lt;table align="center"&gt;                &lt;tr&gt;                    &lt;td&gt;                        用户名称:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;input name="username"type="text" value="默认值"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        用户密码:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input name="password"type="password" value="abc"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        确认密码:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input name="password"type="password" value="abc"/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        性别:                    &lt;/td&gt;                    &lt;td&gt;                         &lt;input type="radio" name="sex" checked="checked"/&gt;男&lt;input type="radio"name="sex"/&gt;女&lt;br/&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        兴趣爱好:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;input name="hobby"type="checkbox"checked="check"/&gt;唱歌                        &lt;input name="hobby" type="checkbox"/&gt;跳舞                        &lt;input name="hobby"type="checkbox"/&gt;rap                        &lt;input name="hobby" type="checkbox"/&gt;篮球                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        国籍:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;select name="country"&gt;                        &lt;option value="none"&gt;--请选择国籍&lt;/option&gt;                        &lt;option selected="selected" value="cn"&gt;中国&lt;/option&gt;                        &lt;option value="usa"&gt;美佬&lt;/option&gt;                        &lt;option value="jap"&gt;小日本&lt;/option&gt;                        &lt;/select&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        自我评价:                    &lt;/td&gt;                    &lt;td&gt;                        &lt;textarea rows="10" cols="20"&gt;请输入自我评价信息&lt;/textarea&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;                        &lt;input type="reset" value="重置"&gt;                        &lt;input type="submit" value="提交"&gt;                    &lt;/td&gt;                &lt;/tr&gt;                &lt;!--action=login                &amp;username=默认值                &amp;password=123456                &amp;password=123456                &amp;sex=on                &amp;hobby=on                &amp;country=中国                --&gt;            &lt;/table&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记一</title>
      <link href="/2022/08/17/suan-fa-bi-ji-yi/"/>
      <url>/2022/08/17/suan-fa-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><ul><li><h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><ol><li>概念：二分查找又称折半查找，通过不断改变两端边界的值，从而在一维数据中快速查找目标值。</li><li>使用前提：在具有<strong>单调</strong>(递增/递减)的一维数据(数组)。</li><li>思想：二分的过程就是不断微分的过程。</li></ol></li><li><h2 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h2><strong>细节</strong>：数组下标都是从零开始，故存进数组的数据也是从下标零开始。</li></ul><ol><li><p>搜索区间<strong>左闭右闭</strong>[l,r]—&gt;寻找<strong>一个数</strong></p><p> l=0;<br> r=数组长度-1;</p><table><thead><tr><th align="center">l</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center">r</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">…</td><td align="center">n-1</td></tr></tbody></table></li></ol>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BinarySearch(int arr[],int target){    int l=0;//初始化搜索边界    int r=n-1;//数组长度减一//下标为n-1未数组越界        while(l&lt;=r){//终止条件是(l==r+1)表示搜索区间是[r+1,r],此区间为开(不存在)            int mid=l+(r-l)/2;//防止数据溢出            if(a[mid]&gt;target){                r=mid-1;//[l,r]--&gt;[l,mid-1]            }            else if(a[mid]&lt;target){                l=mid+1;//[l,r]--&gt;[mid+1,r]            }else{                return l;//return r也可以            }        }        return -1;//搜索区间为空,即找不到target则return-1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><ol><li>问题1：为什么while的循环条件是l &lt;= r,而不是l &lt; r?<br>解: 因为前者的终止条件是l==r+1,搜索区间为[r+1,r]，此区间为空;后者终止条件是l==r,搜索区间为[r,r]，此区间不为空。当只有区间为空时，才可以退出while循环，表示未找到target值。</li><li>问题2：为什么称这搜索区间为左闭右闭?<br>解：因为初始的左右下标边界都是可以取的，r=0;l=n-1(未越界)。</li><li>问题3：为什么r=mid-1,l=mid+1?<br>解：因为已经检测到mid不是我们要找的target，故将mid除去。mid将初始化的搜索区间拆分为[l,mid-1],[mid+1,r];</li></ol></li><li><p>搜索区间<strong>左闭右开</strong>[l,r)—&gt;寻找<strong>左右侧边界</strong></p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void left_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            r=mid;//改变右侧边界r，向左靠拢        }    }return l;//return r也可以}void right_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            l=mid+1;//改变右侧边界l，向右靠拢        }    }return l-1;//return r-1也可以}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><ol><li>问题1：为什么while的循环条件是l &lt; r,而不是l &lt;= r?<br> 解：初始化的搜索边界l=0；r=n;此时的右边界r=n是已经数组下标越界了，故将while循环的终止条件设置为l==r,即搜索区间为[r,r)，很明显此区间为空。</li><li>问题2.为什么l=mid+1，r=mid，而不是l=mid+1,r=mid-1?<br> 解：还是根据搜索区间置空的原理解释。检测mid不符合我们要找的target，所以将mid去掉，即mid将搜索区间分成两部分[l,mid),[mid+1,r)。</li><li>问题3：当target值为小于数组所有值或大于所有值或者介于端点值但不存在，那返回什么？<br> 解：问得好！当target小于任何数时，return 0；当target大于任何数时，return n；当target介于两端点值时，返回第一个大于target值的下标。</li><li>问题4：要想实现如果找不到target值就返回-1，怎么改？ <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    void left_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            r=mid;//改变右侧边界r，向左靠拢        }    }    if(l==n)return -1;//当target大于任何数组的所有数时，返回-1，也就是说右侧边界r无法向左进行靠拢。//换成if(r==n)return -1也可以return a[l]==target?l:-1;//换成return a[r]==target?r:-1也可以}void right_bound(int arr[],int target){    int l=0;    int r=n;    while(l&lt;r){//注意！！！        int mid=l+(r-l)/2;        if(a[mid]&gt;target){            r=mid;//注意！！！        }else if(a[mid]&lt;target){            l=mid+1;        }else{            l=mid+1;//改变左侧边界l，向右靠拢        }    }    if(l==0)return -1;//当target小于任何数组的所有数时，返回-1，也就是说左侧边界无法向右靠拢。//换成r==0也可以return a[l-1]==target?(l-1):-1;//换成a[r-1]=target?(r-1):-1也可以}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><ul><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>理解清楚while循环退出的条件(终止条件)</li><li>理解清楚搜索区间为空的作用</li><li>理解上面两条，你就明白如何确定二分的边界了！</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/08/14/dai-ma-kuai-yan-shi/first/"/>
      <url>/2022/08/14/dai-ma-kuai-yan-shi/first/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><blockquote><p>“引用语法&gt;”</p><blockquote><p>二级应用</p></blockquote></blockquote><p>谈恋爱：</p><ol><li>物色女孩</li><li>相处聊天</li><li>准备惊喜</li><li>最后表白冲击</li></ol><p>无序列表：</p><ul><li>我不道哇</li><li>我记到鸟</li></ul><ul><li>也可以无序标记</li><li>好像跟-的不一样</li></ul><p>日计划:</p><ul><li><input checked="" disabled="" type="checkbox"> 刷洛谷题</li><li><input checked="" disabled="" type="checkbox"> 后端知识(javaweb java jdbc)</li><li><input checked="" disabled="" type="checkbox"> 前端三件套(javascript css html)</li><li><input checked="" disabled="" type="checkbox"> 练琴 英语背单词</li></ul><p>代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"what the hell?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表格</p><table><thead><tr><th align="center">学生</th><th align="center">数学成绩</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">93</td></tr><tr><td align="center">李四</td><td align="center">69</td></tr><tr><td align="center">脚注：</td><td align="center"></td></tr></tbody></table><p>hjy<a href="21%E5%8C%BB%E5%B7%A5%E5%AD%A6%E7%94%9F">^学生</a></p><pre class="line-numbers language-none"><code class="language-none">浅浅地学Markdown语法*斜体***加粗**H~2~OX^2==这是一段高亮文字====这是高亮文字吗==//vscode不支持高亮文字标记==what the hell==语法展示:* 可以吗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法展示：</p><ul><li>又可以了(要得有空格)</li><li>呦吼</li></ul><p><em>斜体</em><br><del>HELLO WORLD</del>(删除)<br><strong>何名杨</strong></p><p><strong>欢迎学习Markdown语法</strong>(一对双星)<br><strong>欢迎学习Markdown语法</strong>(下划线)加粗</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/12/hello-world/"/>
      <url>/2022/08/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
